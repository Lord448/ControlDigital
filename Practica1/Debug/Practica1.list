
Practica1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080095fc  080095fc  000195fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096bc  080096bc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  080096bc  080096bc  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080096bc  080096bc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096bc  080096bc  000196bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096c0  080096c0  000196c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080096c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001288  200001e4  080098a8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000146c  080098a8  0002146c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d0f  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000340c  00000000  00000000  00033f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00037328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  000384b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b329  00000000  00000000  000394b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152ca  00000000  00000000  000547d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000925c9  00000000  00000000  00069aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc06c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bd8  00000000  00000000  000fc0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e4 	.word	0x200001e4
 8000128:	00000000 	.word	0x00000000
 800012c:	080095e4 	.word	0x080095e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e8 	.word	0x200001e8
 8000148:	080095e4 	.word	0x080095e4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
#endif

uint32_t ADC_Res;

int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  HAL_Init();
 8000160:	f000 faf0 	bl	8000744 <HAL_Init>
  SystemClock_Config();
 8000164:	f000 f87e 	bl	8000264 <SystemClock_Config>
  MX_GPIO_Init();
 8000168:	f000 f968 	bl	800043c <MX_GPIO_Init>
  MX_ADC1_Init();
 800016c:	f000 f8d8 	bl	8000320 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000170:	f000 f914 	bl	800039c <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000174:	f008 f8d8 	bl	8008328 <MX_USB_DEVICE_Init>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000178:	4809      	ldr	r0, [pc, #36]	; (80001a0 <main+0x44>)
 800017a:	f000 ff9d 	bl	80010b8 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 800017e:	4809      	ldr	r0, [pc, #36]	; (80001a4 <main+0x48>)
 8000180:	f003 fe18 	bl	8003db4 <HAL_TIM_Base_Start_IT>
  while (1)
  {
	  vTaskADC();
 8000184:	f000 f812 	bl	80001ac <vTaskADC>
	  vTaskSend();
 8000188:	f000 f83a 	bl	8000200 <vTaskSend>

#ifdef USER_DEBUG
	  while(ParsedFlag);
 800018c:	bf00      	nop
 800018e:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <main+0x4c>)
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	2b00      	cmp	r3, #0
 8000194:	d1fb      	bne.n	800018e <main+0x32>
	  ParsedFlag = true;
 8000196:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <main+0x4c>)
 8000198:	2201      	movs	r2, #1
 800019a:	701a      	strb	r2, [r3, #0]
	  vTaskADC();
 800019c:	e7f2      	b.n	8000184 <main+0x28>
 800019e:	bf00      	nop
 80001a0:	20000200 	.word	0x20000200
 80001a4:	20000230 	.word	0x20000230
 80001a8:	20000000 	.word	0x20000000

080001ac <vTaskADC>:
#endif
  }
}

static void vTaskADC(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80001b0:	4810      	ldr	r0, [pc, #64]	; (80001f4 <vTaskADC+0x48>)
 80001b2:	f000 fc01 	bl	80009b8 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK) //All good in the ADC Conversion
 80001b6:	2105      	movs	r1, #5
 80001b8:	480e      	ldr	r0, [pc, #56]	; (80001f4 <vTaskADC+0x48>)
 80001ba:	f000 fcd7 	bl	8000b6c <HAL_ADC_PollForConversion>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d10c      	bne.n	80001de <vTaskADC+0x32>
	{
	  ADC_Res = HAL_ADC_GetValue(&hadc1);
 80001c4:	480b      	ldr	r0, [pc, #44]	; (80001f4 <vTaskADC+0x48>)
 80001c6:	f000 fdd7 	bl	8000d78 <HAL_ADC_GetValue>
 80001ca:	4603      	mov	r3, r0
 80001cc:	4a0a      	ldr	r2, [pc, #40]	; (80001f8 <vTaskADC+0x4c>)
 80001ce:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80001d0:	2200      	movs	r2, #0
 80001d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d6:	4809      	ldr	r0, [pc, #36]	; (80001fc <vTaskADC+0x50>)
 80001d8:	f001 faae 	bl	8001738 <HAL_GPIO_WritePin>
 80001dc:	e005      	b.n	80001ea <vTaskADC+0x3e>
	}
	else
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); //Error in ADC founded
 80001de:	2201      	movs	r2, #1
 80001e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e4:	4805      	ldr	r0, [pc, #20]	; (80001fc <vTaskADC+0x50>)
 80001e6:	f001 faa7 	bl	8001738 <HAL_GPIO_WritePin>
	HAL_ADC_Stop(&hadc1);
 80001ea:	4802      	ldr	r0, [pc, #8]	; (80001f4 <vTaskADC+0x48>)
 80001ec:	f000 fc92 	bl	8000b14 <HAL_ADC_Stop>
}
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	20000200 	.word	0x20000200
 80001f8:	20000278 	.word	0x20000278
 80001fc:	40011000 	.word	0x40011000

08000200 <vTaskSend>:

static void vTaskSend(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0
	char Buffer[10];
	sprintf(Buffer, "%d \r\n", (int)ADC_Res);
 8000206:	4b0e      	ldr	r3, [pc, #56]	; (8000240 <vTaskSend+0x40>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	461a      	mov	r2, r3
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	490d      	ldr	r1, [pc, #52]	; (8000244 <vTaskSend+0x44>)
 8000210:	4618      	mov	r0, r3
 8000212:	f008 fd6d 	bl	8008cf0 <siprintf>
	if(CDC_getReady() == USBD_OK)
 8000216:	f008 f96b 	bl	80084f0 <CDC_getReady>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d10a      	bne.n	8000236 <vTaskSend+0x36>
	{
	  CDC_Transmit_FS((uint8_t *) Buffer, strlen(Buffer));
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	4618      	mov	r0, r3
 8000224:	f7ff ff92 	bl	800014c <strlen>
 8000228:	4603      	mov	r3, r0
 800022a:	b29a      	uxth	r2, r3
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	4611      	mov	r1, r2
 8000230:	4618      	mov	r0, r3
 8000232:	f008 f937 	bl	80084a4 <CDC_Transmit_FS>
	}
}
 8000236:	bf00      	nop
 8000238:	3710      	adds	r7, #16
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	20000278 	.word	0x20000278
 8000244:	080095fc 	.word	0x080095fc

08000248 <HAL_TIM_PeriodElapsedCallback>:

#ifdef USER_DEBUG
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
	ParsedFlag = false;
 8000250:	4b03      	ldr	r3, [pc, #12]	; (8000260 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000252:	2200      	movs	r2, #0
 8000254:	701a      	strb	r2, [r3, #0]
}
 8000256:	bf00      	nop
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr
 8000260:	20000000 	.word	0x20000000

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b094      	sub	sp, #80	; 0x50
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800026e:	2228      	movs	r2, #40	; 0x28
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f008 fd34 	bl	8008ce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	f107 0314 	add.w	r3, r7, #20
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]
 8000284:	60da      	str	r2, [r3, #12]
 8000286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000294:	2301      	movs	r3, #1
 8000296:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800029c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a2:	2301      	movs	r3, #1
 80002a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a6:	2302      	movs	r3, #2
 80002a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ba:	4618      	mov	r0, r3
 80002bc:	f002 ffc2 	bl	8003244 <HAL_RCC_OscConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002c6:	f000 f905 	bl	80004d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ca:	230f      	movs	r3, #15
 80002cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ce:	2302      	movs	r3, #2
 80002d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e0:	f107 0314 	add.w	r3, r7, #20
 80002e4:	2102      	movs	r1, #2
 80002e6:	4618      	mov	r0, r3
 80002e8:	f003 fa2e 	bl	8003748 <HAL_RCC_ClockConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002f2:	f000 f8ef 	bl	80004d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80002f6:	2312      	movs	r3, #18
 80002f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002fe:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000300:	2300      	movs	r3, #0
 8000302:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	4618      	mov	r0, r3
 8000308:	f003 fb98 	bl	8003a3c <HAL_RCCEx_PeriphCLKConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000312:	f000 f8df 	bl	80004d4 <Error_Handler>
  }
}
 8000316:	bf00      	nop
 8000318:	3750      	adds	r7, #80	; 0x50
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
	...

08000320 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2200      	movs	r2, #0
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	605a      	str	r2, [r3, #4]
 800032e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000330:	4b18      	ldr	r3, [pc, #96]	; (8000394 <MX_ADC1_Init+0x74>)
 8000332:	4a19      	ldr	r2, [pc, #100]	; (8000398 <MX_ADC1_Init+0x78>)
 8000334:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <MX_ADC1_Init+0x74>)
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800033c:	4b15      	ldr	r3, [pc, #84]	; (8000394 <MX_ADC1_Init+0x74>)
 800033e:	2200      	movs	r2, #0
 8000340:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000342:	4b14      	ldr	r3, [pc, #80]	; (8000394 <MX_ADC1_Init+0x74>)
 8000344:	2200      	movs	r2, #0
 8000346:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000348:	4b12      	ldr	r3, [pc, #72]	; (8000394 <MX_ADC1_Init+0x74>)
 800034a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800034e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000350:	4b10      	ldr	r3, [pc, #64]	; (8000394 <MX_ADC1_Init+0x74>)
 8000352:	2200      	movs	r2, #0
 8000354:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000356:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <MX_ADC1_Init+0x74>)
 8000358:	2201      	movs	r2, #1
 800035a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800035c:	480d      	ldr	r0, [pc, #52]	; (8000394 <MX_ADC1_Init+0x74>)
 800035e:	f000 fa53 	bl	8000808 <HAL_ADC_Init>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000368:	f000 f8b4 	bl	80004d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800036c:	2300      	movs	r3, #0
 800036e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000370:	2301      	movs	r3, #1
 8000372:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	4619      	mov	r1, r3
 800037c:	4805      	ldr	r0, [pc, #20]	; (8000394 <MX_ADC1_Init+0x74>)
 800037e:	f000 fd07 	bl	8000d90 <HAL_ADC_ConfigChannel>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000388:	f000 f8a4 	bl	80004d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800038c:	bf00      	nop
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000200 	.word	0x20000200
 8000398:	40012400 	.word	0x40012400

0800039c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b086      	sub	sp, #24
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003a2:	f107 0308 	add.w	r3, r7, #8
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b0:	463b      	mov	r3, r7
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003b8:	4b1e      	ldr	r3, [pc, #120]	; (8000434 <MX_TIM1_Init+0x98>)
 80003ba:	4a1f      	ldr	r2, [pc, #124]	; (8000438 <MX_TIM1_Init+0x9c>)
 80003bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 80003be:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <MX_TIM1_Init+0x98>)
 80003c0:	220a      	movs	r2, #10
 80003c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c4:	4b1b      	ldr	r3, [pc, #108]	; (8000434 <MX_TIM1_Init+0x98>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65454;
 80003ca:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <MX_TIM1_Init+0x98>)
 80003cc:	f64f 72ae 	movw	r2, #65454	; 0xffae
 80003d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d2:	4b18      	ldr	r3, [pc, #96]	; (8000434 <MX_TIM1_Init+0x98>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003d8:	4b16      	ldr	r3, [pc, #88]	; (8000434 <MX_TIM1_Init+0x98>)
 80003da:	2200      	movs	r2, #0
 80003dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003de:	4b15      	ldr	r3, [pc, #84]	; (8000434 <MX_TIM1_Init+0x98>)
 80003e0:	2280      	movs	r2, #128	; 0x80
 80003e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003e4:	4813      	ldr	r0, [pc, #76]	; (8000434 <MX_TIM1_Init+0x98>)
 80003e6:	f003 fc95 	bl	8003d14 <HAL_TIM_Base_Init>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80003f0:	f000 f870 	bl	80004d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003fa:	f107 0308 	add.w	r3, r7, #8
 80003fe:	4619      	mov	r1, r3
 8000400:	480c      	ldr	r0, [pc, #48]	; (8000434 <MX_TIM1_Init+0x98>)
 8000402:	f003 fe31 	bl	8004068 <HAL_TIM_ConfigClockSource>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800040c:	f000 f862 	bl	80004d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000410:	2300      	movs	r3, #0
 8000412:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000414:	2300      	movs	r3, #0
 8000416:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000418:	463b      	mov	r3, r7
 800041a:	4619      	mov	r1, r3
 800041c:	4805      	ldr	r0, [pc, #20]	; (8000434 <MX_TIM1_Init+0x98>)
 800041e:	f004 f807 	bl	8004430 <HAL_TIMEx_MasterConfigSynchronization>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000428:	f000 f854 	bl	80004d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800042c:	bf00      	nop
 800042e:	3718      	adds	r7, #24
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20000230 	.word	0x20000230
 8000438:	40012c00 	.word	0x40012c00

0800043c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b088      	sub	sp, #32
 8000440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000442:	f107 0310 	add.w	r3, r7, #16
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000450:	4b1e      	ldr	r3, [pc, #120]	; (80004cc <MX_GPIO_Init+0x90>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a1d      	ldr	r2, [pc, #116]	; (80004cc <MX_GPIO_Init+0x90>)
 8000456:	f043 0310 	orr.w	r3, r3, #16
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <MX_GPIO_Init+0x90>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0310 	and.w	r3, r3, #16
 8000464:	60fb      	str	r3, [r7, #12]
 8000466:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <MX_GPIO_Init+0x90>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a17      	ldr	r2, [pc, #92]	; (80004cc <MX_GPIO_Init+0x90>)
 800046e:	f043 0320 	orr.w	r3, r3, #32
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b15      	ldr	r3, [pc, #84]	; (80004cc <MX_GPIO_Init+0x90>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0320 	and.w	r3, r3, #32
 800047c:	60bb      	str	r3, [r7, #8]
 800047e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <MX_GPIO_Init+0x90>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a11      	ldr	r2, [pc, #68]	; (80004cc <MX_GPIO_Init+0x90>)
 8000486:	f043 0304 	orr.w	r3, r3, #4
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <MX_GPIO_Init+0x90>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f003 0304 	and.w	r3, r3, #4
 8000494:	607b      	str	r3, [r7, #4]
 8000496:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800049e:	480c      	ldr	r0, [pc, #48]	; (80004d0 <MX_GPIO_Init+0x94>)
 80004a0:	f001 f94a 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004aa:	2301      	movs	r3, #1
 80004ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	2302      	movs	r3, #2
 80004b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004b6:	f107 0310 	add.w	r3, r7, #16
 80004ba:	4619      	mov	r1, r3
 80004bc:	4804      	ldr	r0, [pc, #16]	; (80004d0 <MX_GPIO_Init+0x94>)
 80004be:	f000 ffb7 	bl	8001430 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004c2:	bf00      	nop
 80004c4:	3720      	adds	r7, #32
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40011000 	.word	0x40011000

080004d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d8:	b672      	cpsid	i
}
 80004da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004dc:	e7fe      	b.n	80004dc <Error_Handler+0x8>
	...

080004e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004e6:	4b15      	ldr	r3, [pc, #84]	; (800053c <HAL_MspInit+0x5c>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	4a14      	ldr	r2, [pc, #80]	; (800053c <HAL_MspInit+0x5c>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6193      	str	r3, [r2, #24]
 80004f2:	4b12      	ldr	r3, [pc, #72]	; (800053c <HAL_MspInit+0x5c>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fe:	4b0f      	ldr	r3, [pc, #60]	; (800053c <HAL_MspInit+0x5c>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	4a0e      	ldr	r2, [pc, #56]	; (800053c <HAL_MspInit+0x5c>)
 8000504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000508:	61d3      	str	r3, [r2, #28]
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <HAL_MspInit+0x5c>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000516:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <HAL_MspInit+0x60>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	4a04      	ldr	r2, [pc, #16]	; (8000540 <HAL_MspInit+0x60>)
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr
 800053c:	40021000 	.word	0x40021000
 8000540:	40010000 	.word	0x40010000

08000544 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a14      	ldr	r2, [pc, #80]	; (80005b0 <HAL_ADC_MspInit+0x6c>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d121      	bne.n	80005a8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <HAL_ADC_MspInit+0x70>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a12      	ldr	r2, [pc, #72]	; (80005b4 <HAL_ADC_MspInit+0x70>)
 800056a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <HAL_ADC_MspInit+0x70>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800057c:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <HAL_ADC_MspInit+0x70>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a0c      	ldr	r2, [pc, #48]	; (80005b4 <HAL_ADC_MspInit+0x70>)
 8000582:	f043 0304 	orr.w	r3, r3, #4
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <HAL_ADC_MspInit+0x70>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f003 0304 	and.w	r3, r3, #4
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000594:	2301      	movs	r3, #1
 8000596:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000598:	2303      	movs	r3, #3
 800059a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059c:	f107 0310 	add.w	r3, r7, #16
 80005a0:	4619      	mov	r1, r3
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <HAL_ADC_MspInit+0x74>)
 80005a4:	f000 ff44 	bl	8001430 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005a8:	bf00      	nop
 80005aa:	3720      	adds	r7, #32
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40012400 	.word	0x40012400
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010800 	.word	0x40010800

080005bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <HAL_TIM_Base_MspInit+0x44>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d113      	bne.n	80005f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <HAL_TIM_Base_MspInit+0x48>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	4a0c      	ldr	r2, [pc, #48]	; (8000604 <HAL_TIM_Base_MspInit+0x48>)
 80005d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005d8:	6193      	str	r3, [r2, #24]
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <HAL_TIM_Base_MspInit+0x48>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	2019      	movs	r0, #25
 80005ec:	f000 fee9 	bl	80013c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80005f0:	2019      	movs	r0, #25
 80005f2:	f000 ff02 	bl	80013fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40012c00 	.word	0x40012c00
 8000604:	40021000 	.word	0x40021000

08000608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800060c:	e7fe      	b.n	800060c <NMI_Handler+0x4>

0800060e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000612:	e7fe      	b.n	8000612 <HardFault_Handler+0x4>

08000614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000618:	e7fe      	b.n	8000618 <MemManage_Handler+0x4>

0800061a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800061e:	e7fe      	b.n	800061e <BusFault_Handler+0x4>

08000620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000624:	e7fe      	b.n	8000624 <UsageFault_Handler+0x4>

08000626 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr

08000632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr

0800063e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr

0800064a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800064e:	f000 f8bf 	bl	80007d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800065c:	4802      	ldr	r0, [pc, #8]	; (8000668 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800065e:	f001 f9a8 	bl	80019b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000f4c 	.word	0x20000f4c

0800066c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000670:	4802      	ldr	r0, [pc, #8]	; (800067c <TIM1_UP_IRQHandler+0x10>)
 8000672:	f003 fbf1 	bl	8003e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000230 	.word	0x20000230

08000680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000688:	4a14      	ldr	r2, [pc, #80]	; (80006dc <_sbrk+0x5c>)
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <_sbrk+0x60>)
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <_sbrk+0x64>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d102      	bne.n	80006a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <_sbrk+0x64>)
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <_sbrk+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <_sbrk+0x64>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	693a      	ldr	r2, [r7, #16]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d207      	bcs.n	80006c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006b0:	f008 faec 	bl	8008c8c <__errno>
 80006b4:	4603      	mov	r3, r0
 80006b6:	220c      	movs	r2, #12
 80006b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006be:	e009      	b.n	80006d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <_sbrk+0x64>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <_sbrk+0x64>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <_sbrk+0x64>)
 80006d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006d2:	68fb      	ldr	r3, [r7, #12]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20005000 	.word	0x20005000
 80006e0:	00000400 	.word	0x00000400
 80006e4:	2000027c 	.word	0x2000027c
 80006e8:	20001470 	.word	0x20001470

080006ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006f8:	f7ff fff8 	bl	80006ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006fc:	480b      	ldr	r0, [pc, #44]	; (800072c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006fe:	490c      	ldr	r1, [pc, #48]	; (8000730 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000700:	4a0c      	ldr	r2, [pc, #48]	; (8000734 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000704:	e002      	b.n	800070c <LoopCopyDataInit>

08000706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070a:	3304      	adds	r3, #4

0800070c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800070c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000710:	d3f9      	bcc.n	8000706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000712:	4a09      	ldr	r2, [pc, #36]	; (8000738 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000714:	4c09      	ldr	r4, [pc, #36]	; (800073c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000718:	e001      	b.n	800071e <LoopFillZerobss>

0800071a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800071c:	3204      	adds	r2, #4

0800071e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000720:	d3fb      	bcc.n	800071a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000722:	f008 fab9 	bl	8008c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000726:	f7ff fd19 	bl	800015c <main>
  bx lr
 800072a:	4770      	bx	lr
  ldr r0, =_sdata
 800072c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000730:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000734:	080096c4 	.word	0x080096c4
  ldr r2, =_sbss
 8000738:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800073c:	2000146c 	.word	0x2000146c

08000740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000740:	e7fe      	b.n	8000740 <ADC1_2_IRQHandler>
	...

08000744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <HAL_Init+0x28>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a07      	ldr	r2, [pc, #28]	; (800076c <HAL_Init+0x28>)
 800074e:	f043 0310 	orr.w	r3, r3, #16
 8000752:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000754:	2003      	movs	r0, #3
 8000756:	f000 fe29 	bl	80013ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800075a:	200f      	movs	r0, #15
 800075c:	f000 f808 	bl	8000770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000760:	f7ff febe 	bl	80004e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40022000 	.word	0x40022000

08000770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_InitTick+0x54>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <HAL_InitTick+0x58>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4619      	mov	r1, r3
 8000782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000786:	fbb3 f3f1 	udiv	r3, r3, r1
 800078a:	fbb2 f3f3 	udiv	r3, r2, r3
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fe41 	bl	8001416 <HAL_SYSTICK_Config>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	e00e      	b.n	80007bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2b0f      	cmp	r3, #15
 80007a2:	d80a      	bhi.n	80007ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a4:	2200      	movs	r2, #0
 80007a6:	6879      	ldr	r1, [r7, #4]
 80007a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007ac:	f000 fe09 	bl	80013c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b0:	4a06      	ldr	r2, [pc, #24]	; (80007cc <HAL_InitTick+0x5c>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007b6:	2300      	movs	r3, #0
 80007b8:	e000      	b.n	80007bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000004 	.word	0x20000004
 80007c8:	2000000c 	.word	0x2000000c
 80007cc:	20000008 	.word	0x20000008

080007d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <HAL_IncTick+0x1c>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_IncTick+0x20>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4413      	add	r3, r2
 80007e0:	4a03      	ldr	r2, [pc, #12]	; (80007f0 <HAL_IncTick+0x20>)
 80007e2:	6013      	str	r3, [r2, #0]
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	2000000c 	.word	0x2000000c
 80007f0:	20000280 	.word	0x20000280

080007f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return uwTick;
 80007f8:	4b02      	ldr	r3, [pc, #8]	; (8000804 <HAL_GetTick+0x10>)
 80007fa:	681b      	ldr	r3, [r3, #0]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	20000280 	.word	0x20000280

08000808 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000810:	2300      	movs	r3, #0
 8000812:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000814:	2300      	movs	r3, #0
 8000816:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d101      	bne.n	800082a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	e0be      	b.n	80009a8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	689b      	ldr	r3, [r3, #8]
 800082e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000834:	2b00      	cmp	r3, #0
 8000836:	d109      	bne.n	800084c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2200      	movs	r2, #0
 8000842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff fe7c 	bl	8000544 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f000 fbf1 	bl	8001034 <ADC_ConversionStop_Disable>
 8000852:	4603      	mov	r3, r0
 8000854:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800085a:	f003 0310 	and.w	r3, r3, #16
 800085e:	2b00      	cmp	r3, #0
 8000860:	f040 8099 	bne.w	8000996 <HAL_ADC_Init+0x18e>
 8000864:	7dfb      	ldrb	r3, [r7, #23]
 8000866:	2b00      	cmp	r3, #0
 8000868:	f040 8095 	bne.w	8000996 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000870:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000874:	f023 0302 	bic.w	r3, r3, #2
 8000878:	f043 0202 	orr.w	r2, r3, #2
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000888:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	7b1b      	ldrb	r3, [r3, #12]
 800088e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000890:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	4313      	orrs	r3, r2
 8000896:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008a0:	d003      	beq.n	80008aa <HAL_ADC_Init+0xa2>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d102      	bne.n	80008b0 <HAL_ADC_Init+0xa8>
 80008aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ae:	e000      	b.n	80008b2 <HAL_ADC_Init+0xaa>
 80008b0:	2300      	movs	r3, #0
 80008b2:	693a      	ldr	r2, [r7, #16]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	7d1b      	ldrb	r3, [r3, #20]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d119      	bne.n	80008f4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	7b1b      	ldrb	r3, [r3, #12]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d109      	bne.n	80008dc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	3b01      	subs	r3, #1
 80008ce:	035a      	lsls	r2, r3, #13
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	e00b      	b.n	80008f4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e0:	f043 0220 	orr.w	r2, r3, #32
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ec:	f043 0201 	orr.w	r2, r3, #1
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	430a      	orrs	r2, r1
 8000906:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	689a      	ldr	r2, [r3, #8]
 800090e:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <HAL_ADC_Init+0x1a8>)
 8000910:	4013      	ands	r3, r2
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	6812      	ldr	r2, [r2, #0]
 8000916:	68b9      	ldr	r1, [r7, #8]
 8000918:	430b      	orrs	r3, r1
 800091a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000924:	d003      	beq.n	800092e <HAL_ADC_Init+0x126>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d104      	bne.n	8000938 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	691b      	ldr	r3, [r3, #16]
 8000932:	3b01      	subs	r3, #1
 8000934:	051b      	lsls	r3, r3, #20
 8000936:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	430a      	orrs	r2, r1
 800094a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <HAL_ADC_Init+0x1ac>)
 8000954:	4013      	ands	r3, r2
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	429a      	cmp	r2, r3
 800095a:	d10b      	bne.n	8000974 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2200      	movs	r2, #0
 8000960:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000966:	f023 0303 	bic.w	r3, r3, #3
 800096a:	f043 0201 	orr.w	r2, r3, #1
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000972:	e018      	b.n	80009a6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000978:	f023 0312 	bic.w	r3, r3, #18
 800097c:	f043 0210 	orr.w	r2, r3, #16
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000988:	f043 0201 	orr.w	r2, r3, #1
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000990:	2301      	movs	r3, #1
 8000992:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000994:	e007      	b.n	80009a6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800099a:	f043 0210 	orr.w	r2, r3, #16
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80009a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3718      	adds	r7, #24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	ffe1f7fd 	.word	0xffe1f7fd
 80009b4:	ff1f0efe 	.word	0xff1f0efe

080009b8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009c0:	2300      	movs	r3, #0
 80009c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d101      	bne.n	80009d2 <HAL_ADC_Start+0x1a>
 80009ce:	2302      	movs	r3, #2
 80009d0:	e098      	b.n	8000b04 <HAL_ADC_Start+0x14c>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2201      	movs	r2, #1
 80009d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f000 fad0 	bl	8000f80 <ADC_Enable>
 80009e0:	4603      	mov	r3, r0
 80009e2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f040 8087 	bne.w	8000afa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009f4:	f023 0301 	bic.w	r3, r3, #1
 80009f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a41      	ldr	r2, [pc, #260]	; (8000b0c <HAL_ADC_Start+0x154>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d105      	bne.n	8000a16 <HAL_ADC_Start+0x5e>
 8000a0a:	4b41      	ldr	r3, [pc, #260]	; (8000b10 <HAL_ADC_Start+0x158>)
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d115      	bne.n	8000a42 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d026      	beq.n	8000a7e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a38:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a40:	e01d      	b.n	8000a7e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a2f      	ldr	r2, [pc, #188]	; (8000b10 <HAL_ADC_Start+0x158>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d004      	beq.n	8000a62 <HAL_ADC_Start+0xaa>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a2b      	ldr	r2, [pc, #172]	; (8000b0c <HAL_ADC_Start+0x154>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d10d      	bne.n	8000a7e <HAL_ADC_Start+0xc6>
 8000a62:	4b2b      	ldr	r3, [pc, #172]	; (8000b10 <HAL_ADC_Start+0x158>)
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d007      	beq.n	8000a7e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d006      	beq.n	8000a98 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8e:	f023 0206 	bic.w	r2, r3, #6
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a96:	e002      	b.n	8000a9e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f06f 0202 	mvn.w	r2, #2
 8000aae:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000aba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000abe:	d113      	bne.n	8000ae8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ac4:	4a11      	ldr	r2, [pc, #68]	; (8000b0c <HAL_ADC_Start+0x154>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d105      	bne.n	8000ad6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <HAL_ADC_Start+0x158>)
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d108      	bne.n	8000ae8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	689a      	ldr	r2, [r3, #8]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	e00c      	b.n	8000b02 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	689a      	ldr	r2, [r3, #8]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	e003      	b.n	8000b02 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40012800 	.word	0x40012800
 8000b10:	40012400 	.word	0x40012400

08000b14 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d101      	bne.n	8000b2e <HAL_ADC_Stop+0x1a>
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	e01a      	b.n	8000b64 <HAL_ADC_Stop+0x50>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2201      	movs	r2, #1
 8000b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f000 fa7c 	bl	8001034 <ADC_ConversionStop_Disable>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d109      	bne.n	8000b5a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b4e:	f023 0301 	bic.w	r3, r3, #1
 8000b52:	f043 0201 	orr.w	r2, r3, #1
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b087      	sub	sp, #28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000b82:	f7ff fe37 	bl	80007f4 <HAL_GetTick>
 8000b86:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d00b      	beq.n	8000bae <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9a:	f043 0220 	orr.w	r2, r3, #32
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e0d3      	b.n	8000d56 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d131      	bne.n	8000c20 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d12a      	bne.n	8000c20 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000bca:	e021      	b.n	8000c10 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bd2:	d01d      	beq.n	8000c10 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d007      	beq.n	8000bea <HAL_ADC_PollForConversion+0x7e>
 8000bda:	f7ff fe0b 	bl	80007f4 <HAL_GetTick>
 8000bde:	4602      	mov	r2, r0
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	683a      	ldr	r2, [r7, #0]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d212      	bcs.n	8000c10 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f003 0302 	and.w	r3, r3, #2
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d10b      	bne.n	8000c10 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfc:	f043 0204 	orr.w	r2, r3, #4
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	e0a2      	b.n	8000d56 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d0d6      	beq.n	8000bcc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000c1e:	e070      	b.n	8000d02 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000c20:	4b4f      	ldr	r3, [pc, #316]	; (8000d60 <HAL_ADC_PollForConversion+0x1f4>)
 8000c22:	681c      	ldr	r4, [r3, #0]
 8000c24:	2002      	movs	r0, #2
 8000c26:	f002 ffbf 	bl	8003ba8 <HAL_RCCEx_GetPeriphCLKFreq>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	6919      	ldr	r1, [r3, #16]
 8000c36:	4b4b      	ldr	r3, [pc, #300]	; (8000d64 <HAL_ADC_PollForConversion+0x1f8>)
 8000c38:	400b      	ands	r3, r1
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d118      	bne.n	8000c70 <HAL_ADC_PollForConversion+0x104>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	68d9      	ldr	r1, [r3, #12]
 8000c44:	4b48      	ldr	r3, [pc, #288]	; (8000d68 <HAL_ADC_PollForConversion+0x1fc>)
 8000c46:	400b      	ands	r3, r1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d111      	bne.n	8000c70 <HAL_ADC_PollForConversion+0x104>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	6919      	ldr	r1, [r3, #16]
 8000c52:	4b46      	ldr	r3, [pc, #280]	; (8000d6c <HAL_ADC_PollForConversion+0x200>)
 8000c54:	400b      	ands	r3, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d108      	bne.n	8000c6c <HAL_ADC_PollForConversion+0x100>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	68d9      	ldr	r1, [r3, #12]
 8000c60:	4b43      	ldr	r3, [pc, #268]	; (8000d70 <HAL_ADC_PollForConversion+0x204>)
 8000c62:	400b      	ands	r3, r1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d101      	bne.n	8000c6c <HAL_ADC_PollForConversion+0x100>
 8000c68:	2314      	movs	r3, #20
 8000c6a:	e020      	b.n	8000cae <HAL_ADC_PollForConversion+0x142>
 8000c6c:	2329      	movs	r3, #41	; 0x29
 8000c6e:	e01e      	b.n	8000cae <HAL_ADC_PollForConversion+0x142>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	6919      	ldr	r1, [r3, #16]
 8000c76:	4b3d      	ldr	r3, [pc, #244]	; (8000d6c <HAL_ADC_PollForConversion+0x200>)
 8000c78:	400b      	ands	r3, r1
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d106      	bne.n	8000c8c <HAL_ADC_PollForConversion+0x120>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	68d9      	ldr	r1, [r3, #12]
 8000c84:	4b3a      	ldr	r3, [pc, #232]	; (8000d70 <HAL_ADC_PollForConversion+0x204>)
 8000c86:	400b      	ands	r3, r1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d00d      	beq.n	8000ca8 <HAL_ADC_PollForConversion+0x13c>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	6919      	ldr	r1, [r3, #16]
 8000c92:	4b38      	ldr	r3, [pc, #224]	; (8000d74 <HAL_ADC_PollForConversion+0x208>)
 8000c94:	400b      	ands	r3, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d108      	bne.n	8000cac <HAL_ADC_PollForConversion+0x140>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	68d9      	ldr	r1, [r3, #12]
 8000ca0:	4b34      	ldr	r3, [pc, #208]	; (8000d74 <HAL_ADC_PollForConversion+0x208>)
 8000ca2:	400b      	ands	r3, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d101      	bne.n	8000cac <HAL_ADC_PollForConversion+0x140>
 8000ca8:	2354      	movs	r3, #84	; 0x54
 8000caa:	e000      	b.n	8000cae <HAL_ADC_PollForConversion+0x142>
 8000cac:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000cae:	fb02 f303 	mul.w	r3, r2, r3
 8000cb2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000cb4:	e021      	b.n	8000cfa <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cbc:	d01a      	beq.n	8000cf4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d007      	beq.n	8000cd4 <HAL_ADC_PollForConversion+0x168>
 8000cc4:	f7ff fd96 	bl	80007f4 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	683a      	ldr	r2, [r7, #0]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d20f      	bcs.n	8000cf4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d90b      	bls.n	8000cf4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce0:	f043 0204 	orr.w	r2, r3, #4
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	e030      	b.n	8000d56 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d8d9      	bhi.n	8000cb6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f06f 0212 	mvn.w	r2, #18
 8000d0a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d10:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d22:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d26:	d115      	bne.n	8000d54 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d111      	bne.n	8000d54 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d105      	bne.n	8000d54 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4c:	f043 0201 	orr.w	r2, r3, #1
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	371c      	adds	r7, #28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd90      	pop	{r4, r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000004 	.word	0x20000004
 8000d64:	24924924 	.word	0x24924924
 8000d68:	00924924 	.word	0x00924924
 8000d6c:	12492492 	.word	0x12492492
 8000d70:	00492492 	.word	0x00492492
 8000d74:	00249249 	.word	0x00249249

08000d78 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d101      	bne.n	8000db0 <HAL_ADC_ConfigChannel+0x20>
 8000dac:	2302      	movs	r3, #2
 8000dae:	e0dc      	b.n	8000f6a <HAL_ADC_ConfigChannel+0x1da>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2201      	movs	r2, #1
 8000db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b06      	cmp	r3, #6
 8000dbe:	d81c      	bhi.n	8000dfa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	3b05      	subs	r3, #5
 8000dd2:	221f      	movs	r2, #31
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	4019      	ands	r1, r3
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	6818      	ldr	r0, [r3, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	4613      	mov	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4413      	add	r3, r2
 8000dea:	3b05      	subs	r3, #5
 8000dec:	fa00 f203 	lsl.w	r2, r0, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	635a      	str	r2, [r3, #52]	; 0x34
 8000df8:	e03c      	b.n	8000e74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	2b0c      	cmp	r3, #12
 8000e00:	d81c      	bhi.n	8000e3c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4413      	add	r3, r2
 8000e12:	3b23      	subs	r3, #35	; 0x23
 8000e14:	221f      	movs	r2, #31
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	4019      	ands	r1, r3
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	6818      	ldr	r0, [r3, #0]
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	4613      	mov	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	3b23      	subs	r3, #35	; 0x23
 8000e2e:	fa00 f203 	lsl.w	r2, r0, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	430a      	orrs	r2, r1
 8000e38:	631a      	str	r2, [r3, #48]	; 0x30
 8000e3a:	e01b      	b.n	8000e74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	4613      	mov	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3b41      	subs	r3, #65	; 0x41
 8000e4e:	221f      	movs	r2, #31
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	4019      	ands	r1, r3
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	6818      	ldr	r0, [r3, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	4613      	mov	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	3b41      	subs	r3, #65	; 0x41
 8000e68:	fa00 f203 	lsl.w	r2, r0, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	430a      	orrs	r2, r1
 8000e72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b09      	cmp	r3, #9
 8000e7a:	d91c      	bls.n	8000eb6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	68d9      	ldr	r1, [r3, #12]
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4613      	mov	r3, r2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	4413      	add	r3, r2
 8000e8c:	3b1e      	subs	r3, #30
 8000e8e:	2207      	movs	r2, #7
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	4019      	ands	r1, r3
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	6898      	ldr	r0, [r3, #8]
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	3b1e      	subs	r3, #30
 8000ea8:	fa00 f203 	lsl.w	r2, r0, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	e019      	b.n	8000eea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	6919      	ldr	r1, [r3, #16]
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	4413      	add	r3, r2
 8000ec6:	2207      	movs	r2, #7
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	4019      	ands	r1, r3
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	6898      	ldr	r0, [r3, #8]
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4413      	add	r3, r2
 8000ede:	fa00 f203 	lsl.w	r2, r0, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b10      	cmp	r3, #16
 8000ef0:	d003      	beq.n	8000efa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ef6:	2b11      	cmp	r3, #17
 8000ef8:	d132      	bne.n	8000f60 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a1d      	ldr	r2, [pc, #116]	; (8000f74 <HAL_ADC_ConfigChannel+0x1e4>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d125      	bne.n	8000f50 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d126      	bne.n	8000f60 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f20:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b10      	cmp	r3, #16
 8000f28:	d11a      	bne.n	8000f60 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <HAL_ADC_ConfigChannel+0x1ec>)
 8000f30:	fba2 2303 	umull	r2, r3, r2, r3
 8000f34:	0c9a      	lsrs	r2, r3, #18
 8000f36:	4613      	mov	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f40:	e002      	b.n	8000f48 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1f9      	bne.n	8000f42 <HAL_ADC_ConfigChannel+0x1b2>
 8000f4e:	e007      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f54:	f043 0220 	orr.w	r2, r3, #32
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	40012400 	.word	0x40012400
 8000f78:	20000004 	.word	0x20000004
 8000f7c:	431bde83 	.word	0x431bde83

08000f80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d040      	beq.n	8001020 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f042 0201 	orr.w	r2, r2, #1
 8000fac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fae:	4b1f      	ldr	r3, [pc, #124]	; (800102c <ADC_Enable+0xac>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a1f      	ldr	r2, [pc, #124]	; (8001030 <ADC_Enable+0xb0>)
 8000fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb8:	0c9b      	lsrs	r3, r3, #18
 8000fba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fbc:	e002      	b.n	8000fc4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f9      	bne.n	8000fbe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fca:	f7ff fc13 	bl	80007f4 <HAL_GetTick>
 8000fce:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000fd0:	e01f      	b.n	8001012 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000fd2:	f7ff fc0f 	bl	80007f4 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d918      	bls.n	8001012 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d011      	beq.n	8001012 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff2:	f043 0210 	orr.w	r2, r3, #16
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffe:	f043 0201 	orr.w	r2, r3, #1
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e007      	b.n	8001022 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	2b01      	cmp	r3, #1
 800101e:	d1d8      	bne.n	8000fd2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000004 	.word	0x20000004
 8001030:	431bde83 	.word	0x431bde83

08001034 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	2b01      	cmp	r3, #1
 800104c:	d12e      	bne.n	80010ac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f022 0201 	bic.w	r2, r2, #1
 800105c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800105e:	f7ff fbc9 	bl	80007f4 <HAL_GetTick>
 8001062:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001064:	e01b      	b.n	800109e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001066:	f7ff fbc5 	bl	80007f4 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d914      	bls.n	800109e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b01      	cmp	r3, #1
 8001080:	d10d      	bne.n	800109e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001086:	f043 0210 	orr.w	r2, r3, #16
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001092:	f043 0201 	orr.w	r2, r3, #1
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e007      	b.n	80010ae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d0dc      	beq.n	8001066 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b087      	sub	sp, #28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d101      	bne.n	80010d6 <HAL_ADCEx_Calibration_Start+0x1e>
 80010d2:	2302      	movs	r3, #2
 80010d4:	e097      	b.n	8001206 <HAL_ADCEx_Calibration_Start+0x14e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ffa8 	bl	8001034 <ADC_ConversionStop_Disable>
 80010e4:	4603      	mov	r3, r0
 80010e6:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff49 	bl	8000f80 <ADC_Enable>
 80010ee:	4603      	mov	r3, r0
 80010f0:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80010f2:	7dfb      	ldrb	r3, [r7, #23]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f040 8081 	bne.w	80011fc <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001102:	f023 0302 	bic.w	r3, r3, #2
 8001106:	f043 0202 	orr.w	r2, r3, #2
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800110e:	4b40      	ldr	r3, [pc, #256]	; (8001210 <HAL_ADCEx_Calibration_Start+0x158>)
 8001110:	681c      	ldr	r4, [r3, #0]
 8001112:	2002      	movs	r0, #2
 8001114:	f002 fd48 	bl	8003ba8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001118:	4603      	mov	r3, r0
 800111a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800111e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001120:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001122:	e002      	b.n	800112a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	3b01      	subs	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f9      	bne.n	8001124 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f042 0208 	orr.w	r2, r2, #8
 800113e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001140:	f7ff fb58 	bl	80007f4 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001146:	e01b      	b.n	8001180 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001148:	f7ff fb54 	bl	80007f4 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b0a      	cmp	r3, #10
 8001154:	d914      	bls.n	8001180 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f003 0308 	and.w	r3, r3, #8
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00d      	beq.n	8001180 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001168:	f023 0312 	bic.w	r3, r3, #18
 800116c:	f043 0210 	orr.w	r2, r3, #16
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e042      	b.n	8001206 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1dc      	bne.n	8001148 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f042 0204 	orr.w	r2, r2, #4
 800119c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800119e:	f7ff fb29 	bl	80007f4 <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80011a4:	e01b      	b.n	80011de <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80011a6:	f7ff fb25 	bl	80007f4 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b0a      	cmp	r3, #10
 80011b2:	d914      	bls.n	80011de <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00d      	beq.n	80011de <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c6:	f023 0312 	bic.w	r3, r3, #18
 80011ca:	f043 0210 	orr.w	r2, r3, #16
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e013      	b.n	8001206 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1dc      	bne.n	80011a6 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f0:	f023 0303 	bic.w	r3, r3, #3
 80011f4:	f043 0201 	orr.w	r2, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001204:	7dfb      	ldrb	r3, [r7, #23]
}
 8001206:	4618      	mov	r0, r3
 8001208:	371c      	adds	r7, #28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd90      	pop	{r4, r7, pc}
 800120e:	bf00      	nop
 8001210:	20000004 	.word	0x20000004

08001214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001230:	4013      	ands	r3, r2
 8001232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800123c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001246:	4a04      	ldr	r2, [pc, #16]	; (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	60d3      	str	r3, [r2, #12]
}
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <__NVIC_GetPriorityGrouping+0x18>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	0a1b      	lsrs	r3, r3, #8
 8001266:	f003 0307 	and.w	r3, r3, #7
}
 800126a:	4618      	mov	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	2b00      	cmp	r3, #0
 8001288:	db0b      	blt.n	80012a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	f003 021f 	and.w	r2, r3, #31
 8001290:	4906      	ldr	r1, [pc, #24]	; (80012ac <__NVIC_EnableIRQ+0x34>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	095b      	lsrs	r3, r3, #5
 8001298:	2001      	movs	r0, #1
 800129a:	fa00 f202 	lsl.w	r2, r0, r2
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	e000e100 	.word	0xe000e100

080012b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	db0a      	blt.n	80012da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	490c      	ldr	r1, [pc, #48]	; (80012fc <__NVIC_SetPriority+0x4c>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	440b      	add	r3, r1
 80012d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d8:	e00a      	b.n	80012f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4908      	ldr	r1, [pc, #32]	; (8001300 <__NVIC_SetPriority+0x50>)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	3b04      	subs	r3, #4
 80012e8:	0112      	lsls	r2, r2, #4
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	440b      	add	r3, r1
 80012ee:	761a      	strb	r2, [r3, #24]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000e100 	.word	0xe000e100
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	; 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f1c3 0307 	rsb	r3, r3, #7
 800131e:	2b04      	cmp	r3, #4
 8001320:	bf28      	it	cs
 8001322:	2304      	movcs	r3, #4
 8001324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3304      	adds	r3, #4
 800132a:	2b06      	cmp	r3, #6
 800132c:	d902      	bls.n	8001334 <NVIC_EncodePriority+0x30>
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3b03      	subs	r3, #3
 8001332:	e000      	b.n	8001336 <NVIC_EncodePriority+0x32>
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	401a      	ands	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43d9      	mvns	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	4313      	orrs	r3, r2
         );
}
 800135e:	4618      	mov	r0, r3
 8001360:	3724      	adds	r7, #36	; 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001378:	d301      	bcc.n	800137e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137a:	2301      	movs	r3, #1
 800137c:	e00f      	b.n	800139e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137e:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <SysTick_Config+0x40>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001386:	210f      	movs	r1, #15
 8001388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800138c:	f7ff ff90 	bl	80012b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <SysTick_Config+0x40>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001396:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <SysTick_Config+0x40>)
 8001398:	2207      	movs	r2, #7
 800139a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	e000e010 	.word	0xe000e010

080013ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ff2d 	bl	8001214 <__NVIC_SetPriorityGrouping>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b086      	sub	sp, #24
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
 80013ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d4:	f7ff ff42 	bl	800125c <__NVIC_GetPriorityGrouping>
 80013d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	68b9      	ldr	r1, [r7, #8]
 80013de:	6978      	ldr	r0, [r7, #20]
 80013e0:	f7ff ff90 	bl	8001304 <NVIC_EncodePriority>
 80013e4:	4602      	mov	r2, r0
 80013e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff5f 	bl	80012b0 <__NVIC_SetPriority>
}
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff35 	bl	8001278 <__NVIC_EnableIRQ>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ffa2 	bl	8001368 <SysTick_Config>
 8001424:	4603      	mov	r3, r0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001430:	b480      	push	{r7}
 8001432:	b08b      	sub	sp, #44	; 0x2c
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001442:	e169      	b.n	8001718 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001444:	2201      	movs	r2, #1
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	69fa      	ldr	r2, [r7, #28]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	429a      	cmp	r2, r3
 800145e:	f040 8158 	bne.w	8001712 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	4a9a      	ldr	r2, [pc, #616]	; (80016d0 <HAL_GPIO_Init+0x2a0>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d05e      	beq.n	800152a <HAL_GPIO_Init+0xfa>
 800146c:	4a98      	ldr	r2, [pc, #608]	; (80016d0 <HAL_GPIO_Init+0x2a0>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d875      	bhi.n	800155e <HAL_GPIO_Init+0x12e>
 8001472:	4a98      	ldr	r2, [pc, #608]	; (80016d4 <HAL_GPIO_Init+0x2a4>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d058      	beq.n	800152a <HAL_GPIO_Init+0xfa>
 8001478:	4a96      	ldr	r2, [pc, #600]	; (80016d4 <HAL_GPIO_Init+0x2a4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d86f      	bhi.n	800155e <HAL_GPIO_Init+0x12e>
 800147e:	4a96      	ldr	r2, [pc, #600]	; (80016d8 <HAL_GPIO_Init+0x2a8>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d052      	beq.n	800152a <HAL_GPIO_Init+0xfa>
 8001484:	4a94      	ldr	r2, [pc, #592]	; (80016d8 <HAL_GPIO_Init+0x2a8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d869      	bhi.n	800155e <HAL_GPIO_Init+0x12e>
 800148a:	4a94      	ldr	r2, [pc, #592]	; (80016dc <HAL_GPIO_Init+0x2ac>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d04c      	beq.n	800152a <HAL_GPIO_Init+0xfa>
 8001490:	4a92      	ldr	r2, [pc, #584]	; (80016dc <HAL_GPIO_Init+0x2ac>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d863      	bhi.n	800155e <HAL_GPIO_Init+0x12e>
 8001496:	4a92      	ldr	r2, [pc, #584]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d046      	beq.n	800152a <HAL_GPIO_Init+0xfa>
 800149c:	4a90      	ldr	r2, [pc, #576]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d85d      	bhi.n	800155e <HAL_GPIO_Init+0x12e>
 80014a2:	2b12      	cmp	r3, #18
 80014a4:	d82a      	bhi.n	80014fc <HAL_GPIO_Init+0xcc>
 80014a6:	2b12      	cmp	r3, #18
 80014a8:	d859      	bhi.n	800155e <HAL_GPIO_Init+0x12e>
 80014aa:	a201      	add	r2, pc, #4	; (adr r2, 80014b0 <HAL_GPIO_Init+0x80>)
 80014ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b0:	0800152b 	.word	0x0800152b
 80014b4:	08001505 	.word	0x08001505
 80014b8:	08001517 	.word	0x08001517
 80014bc:	08001559 	.word	0x08001559
 80014c0:	0800155f 	.word	0x0800155f
 80014c4:	0800155f 	.word	0x0800155f
 80014c8:	0800155f 	.word	0x0800155f
 80014cc:	0800155f 	.word	0x0800155f
 80014d0:	0800155f 	.word	0x0800155f
 80014d4:	0800155f 	.word	0x0800155f
 80014d8:	0800155f 	.word	0x0800155f
 80014dc:	0800155f 	.word	0x0800155f
 80014e0:	0800155f 	.word	0x0800155f
 80014e4:	0800155f 	.word	0x0800155f
 80014e8:	0800155f 	.word	0x0800155f
 80014ec:	0800155f 	.word	0x0800155f
 80014f0:	0800155f 	.word	0x0800155f
 80014f4:	0800150d 	.word	0x0800150d
 80014f8:	08001521 	.word	0x08001521
 80014fc:	4a79      	ldr	r2, [pc, #484]	; (80016e4 <HAL_GPIO_Init+0x2b4>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d013      	beq.n	800152a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001502:	e02c      	b.n	800155e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	623b      	str	r3, [r7, #32]
          break;
 800150a:	e029      	b.n	8001560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	3304      	adds	r3, #4
 8001512:	623b      	str	r3, [r7, #32]
          break;
 8001514:	e024      	b.n	8001560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	3308      	adds	r3, #8
 800151c:	623b      	str	r3, [r7, #32]
          break;
 800151e:	e01f      	b.n	8001560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	330c      	adds	r3, #12
 8001526:	623b      	str	r3, [r7, #32]
          break;
 8001528:	e01a      	b.n	8001560 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d102      	bne.n	8001538 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001532:	2304      	movs	r3, #4
 8001534:	623b      	str	r3, [r7, #32]
          break;
 8001536:	e013      	b.n	8001560 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d105      	bne.n	800154c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001540:	2308      	movs	r3, #8
 8001542:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69fa      	ldr	r2, [r7, #28]
 8001548:	611a      	str	r2, [r3, #16]
          break;
 800154a:	e009      	b.n	8001560 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800154c:	2308      	movs	r3, #8
 800154e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69fa      	ldr	r2, [r7, #28]
 8001554:	615a      	str	r2, [r3, #20]
          break;
 8001556:	e003      	b.n	8001560 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
          break;
 800155c:	e000      	b.n	8001560 <HAL_GPIO_Init+0x130>
          break;
 800155e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	2bff      	cmp	r3, #255	; 0xff
 8001564:	d801      	bhi.n	800156a <HAL_GPIO_Init+0x13a>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	e001      	b.n	800156e <HAL_GPIO_Init+0x13e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3304      	adds	r3, #4
 800156e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	2bff      	cmp	r3, #255	; 0xff
 8001574:	d802      	bhi.n	800157c <HAL_GPIO_Init+0x14c>
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	e002      	b.n	8001582 <HAL_GPIO_Init+0x152>
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	3b08      	subs	r3, #8
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	210f      	movs	r1, #15
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	fa01 f303 	lsl.w	r3, r1, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	401a      	ands	r2, r3
 8001594:	6a39      	ldr	r1, [r7, #32]
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	fa01 f303 	lsl.w	r3, r1, r3
 800159c:	431a      	orrs	r2, r3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 80b1 	beq.w	8001712 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015b0:	4b4d      	ldr	r3, [pc, #308]	; (80016e8 <HAL_GPIO_Init+0x2b8>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4a4c      	ldr	r2, [pc, #304]	; (80016e8 <HAL_GPIO_Init+0x2b8>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6193      	str	r3, [r2, #24]
 80015bc:	4b4a      	ldr	r3, [pc, #296]	; (80016e8 <HAL_GPIO_Init+0x2b8>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015c8:	4a48      	ldr	r2, [pc, #288]	; (80016ec <HAL_GPIO_Init+0x2bc>)
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	089b      	lsrs	r3, r3, #2
 80015ce:	3302      	adds	r3, #2
 80015d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	220f      	movs	r2, #15
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	4013      	ands	r3, r2
 80015ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a40      	ldr	r2, [pc, #256]	; (80016f0 <HAL_GPIO_Init+0x2c0>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d013      	beq.n	800161c <HAL_GPIO_Init+0x1ec>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a3f      	ldr	r2, [pc, #252]	; (80016f4 <HAL_GPIO_Init+0x2c4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d00d      	beq.n	8001618 <HAL_GPIO_Init+0x1e8>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a3e      	ldr	r2, [pc, #248]	; (80016f8 <HAL_GPIO_Init+0x2c8>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d007      	beq.n	8001614 <HAL_GPIO_Init+0x1e4>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a3d      	ldr	r2, [pc, #244]	; (80016fc <HAL_GPIO_Init+0x2cc>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d101      	bne.n	8001610 <HAL_GPIO_Init+0x1e0>
 800160c:	2303      	movs	r3, #3
 800160e:	e006      	b.n	800161e <HAL_GPIO_Init+0x1ee>
 8001610:	2304      	movs	r3, #4
 8001612:	e004      	b.n	800161e <HAL_GPIO_Init+0x1ee>
 8001614:	2302      	movs	r3, #2
 8001616:	e002      	b.n	800161e <HAL_GPIO_Init+0x1ee>
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <HAL_GPIO_Init+0x1ee>
 800161c:	2300      	movs	r3, #0
 800161e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001620:	f002 0203 	and.w	r2, r2, #3
 8001624:	0092      	lsls	r2, r2, #2
 8001626:	4093      	lsls	r3, r2
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	4313      	orrs	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800162e:	492f      	ldr	r1, [pc, #188]	; (80016ec <HAL_GPIO_Init+0x2bc>)
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	3302      	adds	r3, #2
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d006      	beq.n	8001656 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001648:	4b2d      	ldr	r3, [pc, #180]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	492c      	ldr	r1, [pc, #176]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	608b      	str	r3, [r1, #8]
 8001654:	e006      	b.n	8001664 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001656:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	43db      	mvns	r3, r3
 800165e:	4928      	ldr	r1, [pc, #160]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 8001660:	4013      	ands	r3, r2
 8001662:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d006      	beq.n	800167e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001670:	4b23      	ldr	r3, [pc, #140]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	4922      	ldr	r1, [pc, #136]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	60cb      	str	r3, [r1, #12]
 800167c:	e006      	b.n	800168c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800167e:	4b20      	ldr	r3, [pc, #128]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	43db      	mvns	r3, r3
 8001686:	491e      	ldr	r1, [pc, #120]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 8001688:	4013      	ands	r3, r2
 800168a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d006      	beq.n	80016a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001698:	4b19      	ldr	r3, [pc, #100]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	4918      	ldr	r1, [pc, #96]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	604b      	str	r3, [r1, #4]
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016a6:	4b16      	ldr	r3, [pc, #88]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	4914      	ldr	r1, [pc, #80]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d021      	beq.n	8001704 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	490e      	ldr	r1, [pc, #56]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	600b      	str	r3, [r1, #0]
 80016cc:	e021      	b.n	8001712 <HAL_GPIO_Init+0x2e2>
 80016ce:	bf00      	nop
 80016d0:	10320000 	.word	0x10320000
 80016d4:	10310000 	.word	0x10310000
 80016d8:	10220000 	.word	0x10220000
 80016dc:	10210000 	.word	0x10210000
 80016e0:	10120000 	.word	0x10120000
 80016e4:	10110000 	.word	0x10110000
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40010000 	.word	0x40010000
 80016f0:	40010800 	.word	0x40010800
 80016f4:	40010c00 	.word	0x40010c00
 80016f8:	40011000 	.word	0x40011000
 80016fc:	40011400 	.word	0x40011400
 8001700:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_GPIO_Init+0x304>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	43db      	mvns	r3, r3
 800170c:	4909      	ldr	r1, [pc, #36]	; (8001734 <HAL_GPIO_Init+0x304>)
 800170e:	4013      	ands	r3, r2
 8001710:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	3301      	adds	r3, #1
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	fa22 f303 	lsr.w	r3, r2, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	f47f ae8e 	bne.w	8001444 <HAL_GPIO_Init+0x14>
  }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	372c      	adds	r7, #44	; 0x2c
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001754:	e003      	b.n	800175e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001756:	887b      	ldrh	r3, [r7, #2]
 8001758:	041a      	lsls	r2, r3, #16
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	611a      	str	r2, [r3, #16]
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800176a:	b08b      	sub	sp, #44	; 0x2c
 800176c:	af06      	add	r7, sp, #24
 800176e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e0f1      	b.n	800195e <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d106      	bne.n	8001794 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f006 ffd2 	bl	8008738 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2203      	movs	r2, #3
 8001798:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f002 fedb 	bl	800455c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	687e      	ldr	r6, [r7, #4]
 80017ae:	466d      	mov	r5, sp
 80017b0:	f106 0410 	add.w	r4, r6, #16
 80017b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	602b      	str	r3, [r5, #0]
 80017bc:	1d33      	adds	r3, r6, #4
 80017be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017c0:	6838      	ldr	r0, [r7, #0]
 80017c2:	f002 fea5 	bl	8004510 <USB_CoreInit>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2202      	movs	r2, #2
 80017d0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e0c2      	b.n	800195e <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f002 fed6 	bl	8004590 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	e040      	b.n	800186c <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	4613      	mov	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	440b      	add	r3, r1
 80017fa:	3301      	adds	r3, #1
 80017fc:	2201      	movs	r2, #1
 80017fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	1c5a      	adds	r2, r3, #1
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	440b      	add	r3, r1
 8001810:	7bfa      	ldrb	r2, [r7, #15]
 8001812:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	440b      	add	r3, r1
 8001824:	3303      	adds	r3, #3
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800182a:	7bfa      	ldrb	r2, [r7, #15]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	440b      	add	r3, r1
 8001838:	3338      	adds	r3, #56	; 0x38
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800183e:	7bfa      	ldrb	r2, [r7, #15]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	440b      	add	r3, r1
 800184c:	333c      	adds	r3, #60	; 0x3c
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001852:	7bfa      	ldrb	r2, [r7, #15]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	440b      	add	r3, r1
 8001860:	3340      	adds	r3, #64	; 0x40
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	3301      	adds	r3, #1
 800186a:	73fb      	strb	r3, [r7, #15]
 800186c:	7bfa      	ldrb	r2, [r7, #15]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	429a      	cmp	r2, r3
 8001874:	d3b9      	bcc.n	80017ea <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001876:	2300      	movs	r3, #0
 8001878:	73fb      	strb	r3, [r7, #15]
 800187a:	e044      	b.n	8001906 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800187c:	7bfa      	ldrb	r2, [r7, #15]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	440b      	add	r3, r1
 800188a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001892:	7bfa      	ldrb	r2, [r7, #15]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	440b      	add	r3, r1
 80018a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018a4:	7bfa      	ldrb	r2, [r7, #15]
 80018a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018a8:	7bfa      	ldrb	r2, [r7, #15]
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	440b      	add	r3, r1
 80018b6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018be:	7bfa      	ldrb	r2, [r7, #15]
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	440b      	add	r3, r1
 80018cc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018d4:	7bfa      	ldrb	r2, [r7, #15]
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	440b      	add	r3, r1
 80018e2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018ea:	7bfa      	ldrb	r2, [r7, #15]
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	440b      	add	r3, r1
 80018f8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	3301      	adds	r3, #1
 8001904:	73fb      	strb	r3, [r7, #15]
 8001906:	7bfa      	ldrb	r2, [r7, #15]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	429a      	cmp	r2, r3
 800190e:	d3b5      	bcc.n	800187c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	603b      	str	r3, [r7, #0]
 8001916:	687e      	ldr	r6, [r7, #4]
 8001918:	466d      	mov	r5, sp
 800191a:	f106 0410 	add.w	r4, r6, #16
 800191e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001922:	6823      	ldr	r3, [r4, #0]
 8001924:	602b      	str	r3, [r5, #0]
 8001926:	1d33      	adds	r3, r6, #4
 8001928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800192a:	6838      	ldr	r0, [r7, #0]
 800192c:	f002 fe3c 	bl	80045a8 <USB_DevInit>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d005      	beq.n	8001942 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2202      	movs	r2, #2
 800193a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e00d      	b.n	800195e <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f005 f8bd 	bl	8006ad6 <USB_DevDisconnect>

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001966 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001974:	2b01      	cmp	r3, #1
 8001976:	d101      	bne.n	800197c <HAL_PCD_Start+0x16>
 8001978:	2302      	movs	r3, #2
 800197a:	e016      	b.n	80019aa <HAL_PCD_Start+0x44>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f002 fdd1 	bl	8004530 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800198e:	2101      	movs	r1, #1
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f007 f944 	bl	8008c1e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f005 f891 	bl	8006ac2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b088      	sub	sp, #32
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f005 f893 	bl	8006aea <USB_ReadInterrupts>
 80019c4:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 fb1b 	bl	800200c <PCD_EP_ISR_Handler>

    return;
 80019d6:	e119      	b.n	8001c0c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d013      	beq.n	8001a0a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019f4:	b292      	uxth	r2, r2
 80019f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f006 ff17 	bl	800882e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001a00:	2100      	movs	r1, #0
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f905 	bl	8001c12 <HAL_PCD_SetAddress>

    return;
 8001a08:	e100      	b.n	8001c0c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00c      	beq.n	8001a2e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a26:	b292      	uxth	r2, r2
 8001a28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001a2c:	e0ee      	b.n	8001c0c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00c      	beq.n	8001a52 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a4a:	b292      	uxth	r2, r2
 8001a4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001a50:	e0dc      	b.n	8001c0c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d027      	beq.n	8001aac <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0204 	bic.w	r2, r2, #4
 8001a6e:	b292      	uxth	r2, r2
 8001a70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0208 	bic.w	r2, r2, #8
 8001a86:	b292      	uxth	r2, r2
 8001a88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f006 ff07 	bl	80088a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001aa4:	b292      	uxth	r2, r2
 8001aa6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001aaa:	e0af      	b.n	8001c0c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 8083 	beq.w	8001bbe <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	77fb      	strb	r3, [r7, #31]
 8001abc:	e010      	b.n	8001ae0 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	7ffb      	ldrb	r3, [r7, #31]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	441a      	add	r2, r3
 8001aca:	7ffb      	ldrb	r3, [r7, #31]
 8001acc:	8812      	ldrh	r2, [r2, #0]
 8001ace:	b292      	uxth	r2, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	3320      	adds	r3, #32
 8001ad4:	443b      	add	r3, r7
 8001ad6:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001ada:	7ffb      	ldrb	r3, [r7, #31]
 8001adc:	3301      	adds	r3, #1
 8001ade:	77fb      	strb	r3, [r7, #31]
 8001ae0:	7ffb      	ldrb	r3, [r7, #31]
 8001ae2:	2b07      	cmp	r3, #7
 8001ae4:	d9eb      	bls.n	8001abe <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f042 0201 	orr.w	r2, r2, #1
 8001af8:	b292      	uxth	r2, r2
 8001afa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0201 	bic.w	r2, r2, #1
 8001b10:	b292      	uxth	r2, r2
 8001b12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001b16:	bf00      	nop
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f6      	beq.n	8001b18 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b3c:	b292      	uxth	r2, r2
 8001b3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	77fb      	strb	r3, [r7, #31]
 8001b46:	e00f      	b.n	8001b68 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001b48:	7ffb      	ldrb	r3, [r7, #31]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6812      	ldr	r2, [r2, #0]
 8001b4e:	4611      	mov	r1, r2
 8001b50:	7ffa      	ldrb	r2, [r7, #31]
 8001b52:	0092      	lsls	r2, r2, #2
 8001b54:	440a      	add	r2, r1
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	3320      	adds	r3, #32
 8001b5a:	443b      	add	r3, r7
 8001b5c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001b60:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001b62:	7ffb      	ldrb	r3, [r7, #31]
 8001b64:	3301      	adds	r3, #1
 8001b66:	77fb      	strb	r3, [r7, #31]
 8001b68:	7ffb      	ldrb	r3, [r7, #31]
 8001b6a:	2b07      	cmp	r3, #7
 8001b6c:	d9ec      	bls.n	8001b48 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0208 	orr.w	r2, r2, #8
 8001b80:	b292      	uxth	r2, r2
 8001b82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b98:	b292      	uxth	r2, r2
 8001b9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f042 0204 	orr.w	r2, r2, #4
 8001bb0:	b292      	uxth	r2, r2
 8001bb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f006 fe58 	bl	800886c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001bbc:	e026      	b.n	8001c0c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00f      	beq.n	8001be8 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bda:	b292      	uxth	r2, r2
 8001bdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f006 fe16 	bl	8008812 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001be6:	e011      	b.n	8001c0c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00c      	beq.n	8001c0c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c04:	b292      	uxth	r2, r2
 8001c06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001c0a:	bf00      	nop
  }
}
 8001c0c:	3720      	adds	r7, #32
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_PCD_SetAddress+0x1a>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e013      	b.n	8001c54 <HAL_PCD_SetAddress+0x42>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	78fa      	ldrb	r2, [r7, #3]
 8001c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	78fa      	ldrb	r2, [r7, #3]
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f004 ff29 	bl	8006a9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	4608      	mov	r0, r1
 8001c66:	4611      	mov	r1, r2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	70fb      	strb	r3, [r7, #3]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	803b      	strh	r3, [r7, #0]
 8001c72:	4613      	mov	r3, r2
 8001c74:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	da0e      	bge.n	8001ca0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	4413      	add	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	705a      	strb	r2, [r3, #1]
 8001c9e:	e00e      	b.n	8001cbe <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	f003 0207 	and.w	r2, r3, #7
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cca:	883a      	ldrh	r2, [r7, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	78ba      	ldrb	r2, [r7, #2]
 8001cd4:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cd6:	78bb      	ldrb	r3, [r7, #2]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d102      	bne.n	8001ce2 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_PCD_EP_Open+0x94>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e00e      	b.n	8001d0e <HAL_PCD_EP_Open+0xb2>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68f9      	ldr	r1, [r7, #12]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f002 fc72 	bl	80045e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001d0c:	7afb      	ldrb	r3, [r7, #11]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b084      	sub	sp, #16
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	da0e      	bge.n	8001d48 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2201      	movs	r2, #1
 8001d44:	705a      	strb	r2, [r3, #1]
 8001d46:	e00e      	b.n	8001d66 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	f003 0207 	and.w	r2, r3, #7
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <HAL_PCD_EP_Close+0x6a>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e00e      	b.n	8001d9e <HAL_PCD_EP_Close+0x88>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68f9      	ldr	r1, [r7, #12]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f002 ffea 	bl	8004d68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	603b      	str	r3, [r7, #0]
 8001db2:	460b      	mov	r3, r1
 8001db4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001db6:	7afb      	ldrb	r3, [r7, #11]
 8001db8:	f003 0207 	and.w	r2, r3, #7
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	4413      	add	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2200      	movs	r2, #0
 8001de4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001de6:	7afb      	ldrb	r3, [r7, #11]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6979      	ldr	r1, [r7, #20]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f003 f9a1 	bl	8005140 <USB_EPStartXfer>

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	f003 0207 	and.w	r2, r3, #7
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	440b      	add	r3, r1
 8001e26:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr

08001e36 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	460b      	mov	r3, r1
 8001e44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e46:	7afb      	ldrb	r3, [r7, #11]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4413      	add	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e82:	7afb      	ldrb	r3, [r7, #11]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6979      	ldr	r1, [r7, #20]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f003 f953 	bl	8005140 <USB_EPStartXfer>

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	f003 0207 	and.w	r2, r3, #7
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d901      	bls.n	8001ec2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e04c      	b.n	8001f5c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ec2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	da0e      	bge.n	8001ee8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	705a      	strb	r2, [r3, #1]
 8001ee6:	e00c      	b.n	8001f02 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ee8:	78fa      	ldrb	r2, [r7, #3]
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2201      	movs	r2, #1
 8001f06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_PCD_EP_SetStall+0x7e>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e01c      	b.n	8001f5c <HAL_PCD_EP_SetStall+0xb8>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68f9      	ldr	r1, [r7, #12]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f004 fcb6 	bl	80068a2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d108      	bne.n	8001f52 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	f004 fddb 	bl	8006b08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	f003 020f 	and.w	r2, r3, #15
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d901      	bls.n	8001f82 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e040      	b.n	8002004 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	da0e      	bge.n	8001fa8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	1c5a      	adds	r2, r3, #1
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	705a      	strb	r2, [r3, #1]
 8001fa6:	e00e      	b.n	8001fc6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	f003 0207 	and.w	r2, r3, #7
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_PCD_EP_ClrStall+0x82>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e00e      	b.n	8002004 <HAL_PCD_EP_ClrStall+0xa0>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68f9      	ldr	r1, [r7, #12]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f004 fca4 	bl	8006942 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b096      	sub	sp, #88	; 0x58
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002014:	e3bf      	b.n	8002796 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800201e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002022:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002026:	b2db      	uxtb	r3, r3
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002030:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002034:	2b00      	cmp	r3, #0
 8002036:	f040 8179 	bne.w	800232c <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800203a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	2b00      	cmp	r3, #0
 8002044:	d152      	bne.n	80020ec <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	b29b      	uxth	r3, r3
 800204e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002056:	81fb      	strh	r3, [r7, #14]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	89fb      	ldrh	r3, [r7, #14]
 800205e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002062:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002066:	b29b      	uxth	r3, r3
 8002068:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3328      	adds	r3, #40	; 0x28
 800206e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002078:	b29b      	uxth	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4413      	add	r3, r2
 8002084:	3302      	adds	r3, #2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	4413      	add	r3, r2
 800208e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800209a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800209c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800209e:	695a      	ldr	r2, [r3, #20]
 80020a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	441a      	add	r2, r3
 80020a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80020aa:	2100      	movs	r1, #0
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f006 fb96 	bl	80087de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 836b 	beq.w	8002796 <PCD_EP_ISR_Handler+0x78a>
 80020c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f040 8366 	bne.w	8002796 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	b292      	uxth	r2, r2
 80020de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80020ea:	e354      	b.n	8002796 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020f2:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80020fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002106:	2b00      	cmp	r3, #0
 8002108:	d034      	beq.n	8002174 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002112:	b29b      	uxth	r3, r3
 8002114:	461a      	mov	r2, r3
 8002116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4413      	add	r3, r2
 800211e:	3306      	adds	r3, #6
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	4413      	add	r3, r2
 8002128:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002134:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002142:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002146:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002148:	b29b      	uxth	r3, r3
 800214a:	f004 fd2d 	bl	8006ba8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	b29a      	uxth	r2, r3
 8002156:	f640 738f 	movw	r3, #3983	; 0xf8f
 800215a:	4013      	ands	r3, r2
 800215c:	823b      	strh	r3, [r7, #16]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	8a3a      	ldrh	r2, [r7, #16]
 8002164:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002168:	b292      	uxth	r2, r2
 800216a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f006 fb09 	bl	8008784 <HAL_PCD_SetupStageCallback>
 8002172:	e310      	b.n	8002796 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002174:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002178:	2b00      	cmp	r3, #0
 800217a:	f280 830c 	bge.w	8002796 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	b29a      	uxth	r2, r3
 8002186:	f640 738f 	movw	r3, #3983	; 0xf8f
 800218a:	4013      	ands	r3, r2
 800218c:	83fb      	strh	r3, [r7, #30]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	8bfa      	ldrh	r2, [r7, #30]
 8002194:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002198:	b292      	uxth	r2, r2
 800219a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	461a      	mov	r2, r3
 80021a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4413      	add	r3, r2
 80021b0:	3306      	adds	r3, #6
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021c6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80021c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d019      	beq.n	8002204 <PCD_EP_ISR_Handler+0x1f8>
 80021d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d015      	beq.n	8002204 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021de:	6959      	ldr	r1, [r3, #20]
 80021e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80021e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	f004 fcdd 	bl	8006ba8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80021ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021f0:	695a      	ldr	r2, [r3, #20]
 80021f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	441a      	add	r2, r3
 80021f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021fa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80021fc:	2100      	movs	r1, #0
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f006 fad2 	bl	80087a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800220e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002216:	2b00      	cmp	r3, #0
 8002218:	f040 82bd 	bne.w	8002796 <PCD_EP_ISR_Handler+0x78a>
 800221c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002220:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002224:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002228:	f000 82b5 	beq.w	8002796 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800223a:	b29b      	uxth	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	4413      	add	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	b29b      	uxth	r3, r3
 8002252:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002256:	b29a      	uxth	r2, r3
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	801a      	strh	r2, [r3, #0]
 800225c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	2b3e      	cmp	r3, #62	; 0x3e
 8002262:	d91d      	bls.n	80022a0 <PCD_EP_ISR_Handler+0x294>
 8002264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	095b      	lsrs	r3, r3, #5
 800226a:	647b      	str	r3, [r7, #68]	; 0x44
 800226c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	f003 031f 	and.w	r3, r3, #31
 8002274:	2b00      	cmp	r3, #0
 8002276:	d102      	bne.n	800227e <PCD_EP_ISR_Handler+0x272>
 8002278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800227a:	3b01      	subs	r3, #1
 800227c:	647b      	str	r3, [r7, #68]	; 0x44
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	b29a      	uxth	r2, r3
 8002284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002286:	b29b      	uxth	r3, r3
 8002288:	029b      	lsls	r3, r3, #10
 800228a:	b29b      	uxth	r3, r3
 800228c:	4313      	orrs	r3, r2
 800228e:	b29b      	uxth	r3, r3
 8002290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002298:	b29a      	uxth	r2, r3
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	801a      	strh	r2, [r3, #0]
 800229e:	e026      	b.n	80022ee <PCD_EP_ISR_Handler+0x2e2>
 80022a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10a      	bne.n	80022be <PCD_EP_ISR_Handler+0x2b2>
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	801a      	strh	r2, [r3, #0]
 80022bc:	e017      	b.n	80022ee <PCD_EP_ISR_Handler+0x2e2>
 80022be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	085b      	lsrs	r3, r3, #1
 80022c4:	647b      	str	r3, [r7, #68]	; 0x44
 80022c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <PCD_EP_ISR_Handler+0x2cc>
 80022d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022d4:	3301      	adds	r3, #1
 80022d6:	647b      	str	r3, [r7, #68]	; 0x44
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	b29a      	uxth	r2, r3
 80022de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	029b      	lsls	r3, r3, #10
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	4313      	orrs	r3, r2
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022fe:	827b      	strh	r3, [r7, #18]
 8002300:	8a7b      	ldrh	r3, [r7, #18]
 8002302:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002306:	827b      	strh	r3, [r7, #18]
 8002308:	8a7b      	ldrh	r3, [r7, #18]
 800230a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800230e:	827b      	strh	r3, [r7, #18]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	8a7b      	ldrh	r3, [r7, #18]
 8002316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800231a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800231e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002326:	b29b      	uxth	r3, r3
 8002328:	8013      	strh	r3, [r2, #0]
 800232a:	e234      	b.n	8002796 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002340:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002344:	2b00      	cmp	r3, #0
 8002346:	f280 80fc 	bge.w	8002542 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b29a      	uxth	r2, r3
 800235c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002360:	4013      	ands	r3, r2
 8002362:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002378:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800237c:	b292      	uxth	r2, r2
 800237e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002380:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	4413      	add	r3, r2
 8002394:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002398:	7b1b      	ldrb	r3, [r3, #12]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d125      	bne.n	80023ea <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4413      	add	r3, r2
 80023b2:	3306      	adds	r3, #6
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023c6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80023ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 8092 	beq.w	80024f8 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023da:	6959      	ldr	r1, [r3, #20]
 80023dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023de:	88da      	ldrh	r2, [r3, #6]
 80023e0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80023e4:	f004 fbe0 	bl	8006ba8 <USB_ReadPMA>
 80023e8:	e086      	b.n	80024f8 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80023ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ec:	78db      	ldrb	r3, [r3, #3]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d10a      	bne.n	8002408 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80023f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80023f6:	461a      	mov	r2, r3
 80023f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f9d9 	bl	80027b2 <HAL_PCD_EP_DB_Receive>
 8002400:	4603      	mov	r3, r0
 8002402:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002406:	e077      	b.n	80024f8 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	b29b      	uxth	r3, r3
 800241a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800241e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002422:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	441a      	add	r2, r3
 8002434:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800243c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002444:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002448:	b29b      	uxth	r3, r3
 800244a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	b29b      	uxth	r3, r3
 800245e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d024      	beq.n	80024b0 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800246e:	b29b      	uxth	r3, r3
 8002470:	461a      	mov	r2, r3
 8002472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4413      	add	r3, r2
 800247a:	3302      	adds	r3, #2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	4413      	add	r3, r2
 8002484:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800248e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002492:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002496:	2b00      	cmp	r3, #0
 8002498:	d02e      	beq.n	80024f8 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024a0:	6959      	ldr	r1, [r3, #20]
 80024a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024a4:	891a      	ldrh	r2, [r3, #8]
 80024a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80024aa:	f004 fb7d 	bl	8006ba8 <USB_ReadPMA>
 80024ae:	e023      	b.n	80024f8 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	461a      	mov	r2, r3
 80024bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	4413      	add	r3, r2
 80024c4:	3306      	adds	r3, #6
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024d8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80024dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d009      	beq.n	80024f8 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ea:	6959      	ldr	r1, [r3, #20]
 80024ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ee:	895a      	ldrh	r2, [r3, #10]
 80024f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80024f4:	f004 fb58 	bl	8006ba8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80024f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024fa:	69da      	ldr	r2, [r3, #28]
 80024fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002500:	441a      	add	r2, r3
 8002502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002504:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002508:	695a      	ldr	r2, [r3, #20]
 800250a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800250e:	441a      	add	r2, r3
 8002510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002512:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <PCD_EP_ISR_Handler+0x51c>
 800251c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	429a      	cmp	r2, r3
 8002526:	d206      	bcs.n	8002536 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	4619      	mov	r1, r3
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f006 f93a 	bl	80087a8 <HAL_PCD_DataOutStageCallback>
 8002534:	e005      	b.n	8002542 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800253c:	4618      	mov	r0, r3
 800253e:	f002 fdff 	bl	8005140 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002542:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 8123 	beq.w	8002796 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8002550:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	b29b      	uxth	r3, r3
 8002576:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800257a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800257e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	441a      	add	r2, r3
 8002590:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800259c:	b29b      	uxth	r3, r3
 800259e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80025a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a2:	78db      	ldrb	r3, [r3, #3]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	f040 80a2 	bne.w	80026ee <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80025aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ac:	2200      	movs	r2, #0
 80025ae:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80025b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b2:	7b1b      	ldrb	r3, [r3, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 8093 	beq.w	80026e0 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80025be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d046      	beq.n	8002654 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c8:	785b      	ldrb	r3, [r3, #1]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d126      	bne.n	800261c <PCD_EP_ISR_Handler+0x610>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025dc:	b29b      	uxth	r3, r3
 80025de:	461a      	mov	r2, r3
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	4413      	add	r3, r2
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
 80025e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	011a      	lsls	r2, r3, #4
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	4413      	add	r3, r2
 80025f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025f4:	623b      	str	r3, [r7, #32]
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002600:	b29a      	uxth	r2, r3
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	801a      	strh	r2, [r3, #0]
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	b29b      	uxth	r3, r3
 800260c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002614:	b29a      	uxth	r2, r3
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	801a      	strh	r2, [r3, #0]
 800261a:	e061      	b.n	80026e0 <PCD_EP_ISR_Handler+0x6d4>
 800261c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800261e:	785b      	ldrb	r3, [r3, #1]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d15d      	bne.n	80026e0 <PCD_EP_ISR_Handler+0x6d4>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002632:	b29b      	uxth	r3, r3
 8002634:	461a      	mov	r2, r3
 8002636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002638:	4413      	add	r3, r2
 800263a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800263c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	011a      	lsls	r2, r3, #4
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002644:	4413      	add	r3, r2
 8002646:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800264a:	62bb      	str	r3, [r7, #40]	; 0x28
 800264c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264e:	2200      	movs	r2, #0
 8002650:	801a      	strh	r2, [r3, #0]
 8002652:	e045      	b.n	80026e0 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	63fb      	str	r3, [r7, #60]	; 0x3c
 800265a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800265c:	785b      	ldrb	r3, [r3, #1]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d126      	bne.n	80026b0 <PCD_EP_ISR_Handler+0x6a4>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	637b      	str	r3, [r7, #52]	; 0x34
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002670:	b29b      	uxth	r3, r3
 8002672:	461a      	mov	r2, r3
 8002674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002676:	4413      	add	r3, r2
 8002678:	637b      	str	r3, [r7, #52]	; 0x34
 800267a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	011a      	lsls	r2, r3, #4
 8002680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002682:	4413      	add	r3, r2
 8002684:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002688:	633b      	str	r3, [r7, #48]	; 0x30
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	b29b      	uxth	r3, r3
 8002690:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002694:	b29a      	uxth	r2, r3
 8002696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002698:	801a      	strh	r2, [r3, #0]
 800269a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ac:	801a      	strh	r2, [r3, #0]
 80026ae:	e017      	b.n	80026e0 <PCD_EP_ISR_Handler+0x6d4>
 80026b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b2:	785b      	ldrb	r3, [r3, #1]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d113      	bne.n	80026e0 <PCD_EP_ISR_Handler+0x6d4>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026c6:	4413      	add	r3, r2
 80026c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	011a      	lsls	r2, r3, #4
 80026d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026d2:	4413      	add	r3, r2
 80026d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80026da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026dc:	2200      	movs	r2, #0
 80026de:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	4619      	mov	r1, r3
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f006 f879 	bl	80087de <HAL_PCD_DataInStageCallback>
 80026ec:	e053      	b.n	8002796 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80026ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d146      	bne.n	8002788 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002702:	b29b      	uxth	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	4413      	add	r3, r2
 800270e:	3302      	adds	r3, #2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	4413      	add	r3, r2
 8002718:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002722:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002728:	699a      	ldr	r2, [r3, #24]
 800272a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800272e:	429a      	cmp	r2, r3
 8002730:	d907      	bls.n	8002742 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8002732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800273a:	1ad2      	subs	r2, r2, r3
 800273c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800273e:	619a      	str	r2, [r3, #24]
 8002740:	e002      	b.n	8002748 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8002742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d106      	bne.n	800275e <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	4619      	mov	r1, r3
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f006 f841 	bl	80087de <HAL_PCD_DataInStageCallback>
 800275c:	e01b      	b.n	8002796 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800275e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002760:	695a      	ldr	r2, [r3, #20]
 8002762:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002766:	441a      	add	r2, r3
 8002768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800276a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800276c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800276e:	69da      	ldr	r2, [r3, #28]
 8002770:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002774:	441a      	add	r2, r3
 8002776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002778:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002780:	4618      	mov	r0, r3
 8002782:	f002 fcdd 	bl	8005140 <USB_EPStartXfer>
 8002786:	e006      	b.n	8002796 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002788:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800278c:	461a      	mov	r2, r3
 800278e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f91b 	bl	80029cc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800279e:	b29b      	uxth	r3, r3
 80027a0:	b21b      	sxth	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f6ff ac37 	blt.w	8002016 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3758      	adds	r7, #88	; 0x58
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b088      	sub	sp, #32
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	4613      	mov	r3, r2
 80027be:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d07e      	beq.n	80028c8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4413      	add	r3, r2
 80027de:	3302      	adds	r3, #2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027f2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	699a      	ldr	r2, [r3, #24]
 80027f8:	8b7b      	ldrh	r3, [r7, #26]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d306      	bcc.n	800280c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	8b7b      	ldrh	r3, [r7, #26]
 8002804:	1ad2      	subs	r2, r2, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	619a      	str	r2, [r3, #24]
 800280a:	e002      	b.n	8002812 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2200      	movs	r2, #0
 8002810:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d123      	bne.n	8002862 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	461a      	mov	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	b29b      	uxth	r3, r3
 800282c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002834:	833b      	strh	r3, [r7, #24]
 8002836:	8b3b      	ldrh	r3, [r7, #24]
 8002838:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800283c:	833b      	strh	r3, [r7, #24]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	441a      	add	r2, r3
 800284c:	8b3b      	ldrh	r3, [r7, #24]
 800284e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800285a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800285e:	b29b      	uxth	r3, r3
 8002860:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002868:	2b00      	cmp	r3, #0
 800286a:	d01f      	beq.n	80028ac <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	461a      	mov	r2, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	b29b      	uxth	r3, r3
 800287e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002886:	82fb      	strh	r3, [r7, #22]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	441a      	add	r2, r3
 8002896:	8afb      	ldrh	r3, [r7, #22]
 8002898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800289c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80028ac:	8b7b      	ldrh	r3, [r7, #26]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 8087 	beq.w	80029c2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6818      	ldr	r0, [r3, #0]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	6959      	ldr	r1, [r3, #20]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	891a      	ldrh	r2, [r3, #8]
 80028c0:	8b7b      	ldrh	r3, [r7, #26]
 80028c2:	f004 f971 	bl	8006ba8 <USB_ReadPMA>
 80028c6:	e07c      	b.n	80029c2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	461a      	mov	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4413      	add	r3, r2
 80028dc:	3306      	adds	r3, #6
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028f0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	699a      	ldr	r2, [r3, #24]
 80028f6:	8b7b      	ldrh	r3, [r7, #26]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d306      	bcc.n	800290a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	699a      	ldr	r2, [r3, #24]
 8002900:	8b7b      	ldrh	r3, [r7, #26]
 8002902:	1ad2      	subs	r2, r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	619a      	str	r2, [r3, #24]
 8002908:	e002      	b.n	8002910 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2200      	movs	r2, #0
 800290e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d123      	bne.n	8002960 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	b29b      	uxth	r3, r3
 800292a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800292e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002932:	83fb      	strh	r3, [r7, #30]
 8002934:	8bfb      	ldrh	r3, [r7, #30]
 8002936:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800293a:	83fb      	strh	r3, [r7, #30]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	461a      	mov	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	441a      	add	r2, r3
 800294a:	8bfb      	ldrh	r3, [r7, #30]
 800294c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295c:	b29b      	uxth	r3, r3
 800295e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002960:	88fb      	ldrh	r3, [r7, #6]
 8002962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002966:	2b00      	cmp	r3, #0
 8002968:	d11f      	bne.n	80029aa <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	461a      	mov	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	b29b      	uxth	r3, r3
 800297c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002984:	83bb      	strh	r3, [r7, #28]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	441a      	add	r2, r3
 8002994:	8bbb      	ldrh	r3, [r7, #28]
 8002996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800299a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800299e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80029aa:	8b7b      	ldrh	r3, [r7, #26]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	6959      	ldr	r1, [r3, #20]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	895a      	ldrh	r2, [r3, #10]
 80029bc:	8b7b      	ldrh	r3, [r7, #26]
 80029be:	f004 f8f3 	bl	8006ba8 <USB_ReadPMA>
    }
  }

  return count;
 80029c2:	8b7b      	ldrh	r3, [r7, #26]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3720      	adds	r7, #32
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b0a4      	sub	sp, #144	; 0x90
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	4613      	mov	r3, r2
 80029d8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029da:	88fb      	ldrh	r3, [r7, #6]
 80029dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 81dd 	beq.w	8002da0 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	3302      	adds	r3, #2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a0e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	699a      	ldr	r2, [r3, #24]
 8002a16:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d907      	bls.n	8002a2e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a26:	1ad2      	subs	r2, r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	619a      	str	r2, [r3, #24]
 8002a2c:	e002      	b.n	8002a34 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2200      	movs	r2, #0
 8002a32:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f040 80b9 	bne.w	8002bb0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	785b      	ldrb	r3, [r3, #1]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d126      	bne.n	8002a94 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5a:	4413      	add	r3, r2
 8002a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	011a      	lsls	r2, r3, #4
 8002a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a66:	4413      	add	r3, r2
 8002a68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7c:	801a      	strh	r2, [r3, #0]
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	881b      	ldrh	r3, [r3, #0]
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a90:	801a      	strh	r2, [r3, #0]
 8002a92:	e01a      	b.n	8002aca <HAL_PCD_EP_DB_Transmit+0xfe>
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	785b      	ldrb	r3, [r3, #1]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d116      	bne.n	8002aca <HAL_PCD_EP_DB_Transmit+0xfe>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab0:	4413      	add	r3, r2
 8002ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	011a      	lsls	r2, r3, #4
 8002aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002abc:	4413      	add	r3, r2
 8002abe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ac2:	633b      	str	r3, [r7, #48]	; 0x30
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	785b      	ldrb	r3, [r3, #1]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d126      	bne.n	8002b26 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	461a      	mov	r2, r3
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	4413      	add	r3, r2
 8002aee:	61fb      	str	r3, [r7, #28]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	011a      	lsls	r2, r3, #4
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	4413      	add	r3, r2
 8002afa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002afe:	61bb      	str	r3, [r7, #24]
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	801a      	strh	r2, [r3, #0]
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	801a      	strh	r2, [r3, #0]
 8002b24:	e017      	b.n	8002b56 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	785b      	ldrb	r3, [r3, #1]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d113      	bne.n	8002b56 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	461a      	mov	r2, r3
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	4413      	add	r3, r2
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	011a      	lsls	r2, r3, #4
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	4413      	add	r3, r2
 8002b4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b4e:	623b      	str	r3, [r7, #32]
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	2200      	movs	r2, #0
 8002b54:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f005 fe3e 	bl	80087de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b62:	88fb      	ldrh	r3, [r7, #6]
 8002b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 82fc 	beq.w	8003166 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b88:	82fb      	strh	r3, [r7, #22]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	441a      	add	r2, r3
 8002b98:	8afb      	ldrh	r3, [r7, #22]
 8002b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ba2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	8013      	strh	r3, [r2, #0]
 8002bae:	e2da      	b.n	8003166 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d021      	beq.n	8002bfe <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	441a      	add	r2, r3
 8002be6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	f040 82ae 	bne.w	8003166 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	695a      	ldr	r2, [r3, #20]
 8002c0e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c12:	441a      	add	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	69da      	ldr	r2, [r3, #28]
 8002c1c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c20:	441a      	add	r2, r3
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	6a1a      	ldr	r2, [r3, #32]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d30b      	bcc.n	8002c4a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	6a1a      	ldr	r2, [r3, #32]
 8002c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c42:	1ad2      	subs	r2, r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	621a      	str	r2, [r3, #32]
 8002c48:	e017      	b.n	8002c7a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d108      	bne.n	8002c64 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002c52:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c62:	e00a      	b.n	8002c7a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2200      	movs	r2, #0
 8002c78:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	785b      	ldrb	r3, [r3, #1]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d165      	bne.n	8002d4e <HAL_PCD_EP_DB_Transmit+0x382>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	461a      	mov	r2, r3
 8002c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c96:	4413      	add	r3, r2
 8002c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	011a      	lsls	r2, r3, #4
 8002ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ca8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb8:	801a      	strh	r2, [r3, #0]
 8002cba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cbe:	2b3e      	cmp	r3, #62	; 0x3e
 8002cc0:	d91d      	bls.n	8002cfe <HAL_PCD_EP_DB_Transmit+0x332>
 8002cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cce:	f003 031f 	and.w	r3, r3, #31
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d102      	bne.n	8002cdc <HAL_PCD_EP_DB_Transmit+0x310>
 8002cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	029b      	lsls	r3, r3, #10
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	4313      	orrs	r3, r2
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfa:	801a      	strh	r2, [r3, #0]
 8002cfc:	e044      	b.n	8002d88 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10a      	bne.n	8002d1c <HAL_PCD_EP_DB_Transmit+0x350>
 8002d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d18:	801a      	strh	r2, [r3, #0]
 8002d1a:	e035      	b.n	8002d88 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002d1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d20:	085b      	lsrs	r3, r3, #1
 8002d22:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d32:	3301      	adds	r3, #1
 8002d34:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	029b      	lsls	r3, r3, #10
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	4313      	orrs	r3, r2
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4a:	801a      	strh	r2, [r3, #0]
 8002d4c:	e01c      	b.n	8002d88 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	785b      	ldrb	r3, [r3, #1]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d118      	bne.n	8002d88 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	461a      	mov	r2, r3
 8002d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d6a:	4413      	add	r3, r2
 8002d6c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	011a      	lsls	r2, r3, #4
 8002d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d76:	4413      	add	r3, r2
 8002d78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d7c:	643b      	str	r3, [r7, #64]	; 0x40
 8002d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d86:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6818      	ldr	r0, [r3, #0]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	6959      	ldr	r1, [r3, #20]
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	891a      	ldrh	r2, [r3, #8]
 8002d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	f003 fec0 	bl	8006b1e <USB_WritePMA>
 8002d9e:	e1e2      	b.n	8003166 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4413      	add	r3, r2
 8002db4:	3306      	adds	r3, #6
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dc8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	699a      	ldr	r2, [r3, #24]
 8002dd0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d307      	bcc.n	8002de8 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	699a      	ldr	r2, [r3, #24]
 8002ddc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002de0:	1ad2      	subs	r2, r2, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	619a      	str	r2, [r3, #24]
 8002de6:	e002      	b.n	8002dee <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2200      	movs	r2, #0
 8002dec:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f040 80c0 	bne.w	8002f78 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	785b      	ldrb	r3, [r3, #1]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d126      	bne.n	8002e4e <HAL_PCD_EP_DB_Transmit+0x482>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	461a      	mov	r2, r3
 8002e12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e14:	4413      	add	r3, r2
 8002e16:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	011a      	lsls	r2, r3, #4
 8002e1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e20:	4413      	add	r3, r2
 8002e22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e26:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e36:	801a      	strh	r2, [r3, #0]
 8002e38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e4a:	801a      	strh	r2, [r3, #0]
 8002e4c:	e01a      	b.n	8002e84 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	785b      	ldrb	r3, [r3, #1]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d116      	bne.n	8002e84 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	667b      	str	r3, [r7, #100]	; 0x64
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e6a:	4413      	add	r3, r2
 8002e6c:	667b      	str	r3, [r7, #100]	; 0x64
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	011a      	lsls	r2, r3, #4
 8002e74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e76:	4413      	add	r3, r2
 8002e78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e7c:	663b      	str	r3, [r7, #96]	; 0x60
 8002e7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e80:	2200      	movs	r2, #0
 8002e82:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	677b      	str	r3, [r7, #116]	; 0x74
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	785b      	ldrb	r3, [r3, #1]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d12b      	bne.n	8002eea <HAL_PCD_EP_DB_Transmit+0x51e>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea6:	4413      	add	r3, r2
 8002ea8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	011a      	lsls	r2, r3, #4
 8002eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002eb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ebc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ece:	801a      	strh	r2, [r3, #0]
 8002ed0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ee6:	801a      	strh	r2, [r3, #0]
 8002ee8:	e017      	b.n	8002f1a <HAL_PCD_EP_DB_Transmit+0x54e>
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	785b      	ldrb	r3, [r3, #1]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d113      	bne.n	8002f1a <HAL_PCD_EP_DB_Transmit+0x54e>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	461a      	mov	r2, r3
 8002efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f00:	4413      	add	r3, r2
 8002f02:	677b      	str	r3, [r7, #116]	; 0x74
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	011a      	lsls	r2, r3, #4
 8002f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f12:	673b      	str	r3, [r7, #112]	; 0x70
 8002f14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f16:	2200      	movs	r2, #0
 8002f18:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	4619      	mov	r1, r3
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f005 fc5c 	bl	80087de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f040 811a 	bne.w	8003166 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	461a      	mov	r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	441a      	add	r2, r3
 8002f5e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	8013      	strh	r3, [r2, #0]
 8002f76:	e0f6      	b.n	8003166 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f78:	88fb      	ldrh	r3, [r7, #6]
 8002f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d121      	bne.n	8002fc6 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	461a      	mov	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	441a      	add	r2, r3
 8002fae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	f040 80ca 	bne.w	8003166 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002fda:	441a      	add	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	69da      	ldr	r2, [r3, #28]
 8002fe4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002fe8:	441a      	add	r2, r3
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	6a1a      	ldr	r2, [r3, #32]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d30b      	bcc.n	8003012 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	6a1a      	ldr	r2, [r3, #32]
 8003006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800300a:	1ad2      	subs	r2, r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	621a      	str	r2, [r3, #32]
 8003010:	e017      	b.n	8003042 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d108      	bne.n	800302c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800301a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800301e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800302a:	e00a      	b.n	8003042 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2200      	movs	r2, #0
 8003038:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	657b      	str	r3, [r7, #84]	; 0x54
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	785b      	ldrb	r3, [r3, #1]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d165      	bne.n	800311c <HAL_PCD_EP_DB_Transmit+0x750>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800305e:	b29b      	uxth	r3, r3
 8003060:	461a      	mov	r2, r3
 8003062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003064:	4413      	add	r3, r2
 8003066:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	011a      	lsls	r2, r3, #4
 800306e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003070:	4413      	add	r3, r2
 8003072:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003076:	65bb      	str	r3, [r7, #88]	; 0x58
 8003078:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	b29b      	uxth	r3, r3
 800307e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003082:	b29a      	uxth	r2, r3
 8003084:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003086:	801a      	strh	r2, [r3, #0]
 8003088:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800308c:	2b3e      	cmp	r3, #62	; 0x3e
 800308e:	d91d      	bls.n	80030cc <HAL_PCD_EP_DB_Transmit+0x700>
 8003090:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	66bb      	str	r3, [r7, #104]	; 0x68
 8003098:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d102      	bne.n	80030aa <HAL_PCD_EP_DB_Transmit+0x6de>
 80030a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030a6:	3b01      	subs	r3, #1
 80030a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80030aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	029b      	lsls	r3, r3, #10
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	4313      	orrs	r3, r2
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030c8:	801a      	strh	r2, [r3, #0]
 80030ca:	e041      	b.n	8003150 <HAL_PCD_EP_DB_Transmit+0x784>
 80030cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10a      	bne.n	80030ea <HAL_PCD_EP_DB_Transmit+0x71e>
 80030d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030e6:	801a      	strh	r2, [r3, #0]
 80030e8:	e032      	b.n	8003150 <HAL_PCD_EP_DB_Transmit+0x784>
 80030ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030ee:	085b      	lsrs	r3, r3, #1
 80030f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80030f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <HAL_PCD_EP_DB_Transmit+0x738>
 80030fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003100:	3301      	adds	r3, #1
 8003102:	66bb      	str	r3, [r7, #104]	; 0x68
 8003104:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	b29a      	uxth	r2, r3
 800310a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800310c:	b29b      	uxth	r3, r3
 800310e:	029b      	lsls	r3, r3, #10
 8003110:	b29b      	uxth	r3, r3
 8003112:	4313      	orrs	r3, r2
 8003114:	b29a      	uxth	r2, r3
 8003116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003118:	801a      	strh	r2, [r3, #0]
 800311a:	e019      	b.n	8003150 <HAL_PCD_EP_DB_Transmit+0x784>
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	785b      	ldrb	r3, [r3, #1]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d115      	bne.n	8003150 <HAL_PCD_EP_DB_Transmit+0x784>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800312c:	b29b      	uxth	r3, r3
 800312e:	461a      	mov	r2, r3
 8003130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003132:	4413      	add	r3, r2
 8003134:	657b      	str	r3, [r7, #84]	; 0x54
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	011a      	lsls	r2, r3, #4
 800313c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800313e:	4413      	add	r3, r2
 8003140:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003144:	653b      	str	r3, [r7, #80]	; 0x50
 8003146:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800314a:	b29a      	uxth	r2, r3
 800314c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800314e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6818      	ldr	r0, [r3, #0]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	6959      	ldr	r1, [r3, #20]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	895a      	ldrh	r2, [r3, #10]
 800315c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003160:	b29b      	uxth	r3, r3
 8003162:	f003 fcdc 	bl	8006b1e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	b29b      	uxth	r3, r3
 8003178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800317c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003180:	82bb      	strh	r3, [r7, #20]
 8003182:	8abb      	ldrh	r3, [r7, #20]
 8003184:	f083 0310 	eor.w	r3, r3, #16
 8003188:	82bb      	strh	r3, [r7, #20]
 800318a:	8abb      	ldrh	r3, [r7, #20]
 800318c:	f083 0320 	eor.w	r3, r3, #32
 8003190:	82bb      	strh	r3, [r7, #20]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	441a      	add	r2, r3
 80031a0:	8abb      	ldrh	r3, [r7, #20]
 80031a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3790      	adds	r7, #144	; 0x90
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	607b      	str	r3, [r7, #4]
 80031ca:	460b      	mov	r3, r1
 80031cc:	817b      	strh	r3, [r7, #10]
 80031ce:	4613      	mov	r3, r2
 80031d0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80031d2:	897b      	ldrh	r3, [r7, #10]
 80031d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00b      	beq.n	80031f6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031de:	897b      	ldrh	r3, [r7, #10]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4413      	add	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	e009      	b.n	800320a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031f6:	897a      	ldrh	r2, [r7, #10]
 80031f8:	4613      	mov	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	4413      	add	r3, r2
 8003208:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800320a:	893b      	ldrh	r3, [r7, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d107      	bne.n	8003220 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	2200      	movs	r2, #0
 8003214:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	b29a      	uxth	r2, r3
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	80da      	strh	r2, [r3, #6]
 800321e:	e00b      	b.n	8003238 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2201      	movs	r2, #1
 8003224:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	b29a      	uxth	r2, r3
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	0c1b      	lsrs	r3, r3, #16
 8003232:	b29a      	uxth	r2, r3
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr

08003244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e272      	b.n	800373c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 8087 	beq.w	8003372 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003264:	4b92      	ldr	r3, [pc, #584]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 030c 	and.w	r3, r3, #12
 800326c:	2b04      	cmp	r3, #4
 800326e:	d00c      	beq.n	800328a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003270:	4b8f      	ldr	r3, [pc, #572]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 030c 	and.w	r3, r3, #12
 8003278:	2b08      	cmp	r3, #8
 800327a:	d112      	bne.n	80032a2 <HAL_RCC_OscConfig+0x5e>
 800327c:	4b8c      	ldr	r3, [pc, #560]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003288:	d10b      	bne.n	80032a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800328a:	4b89      	ldr	r3, [pc, #548]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d06c      	beq.n	8003370 <HAL_RCC_OscConfig+0x12c>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d168      	bne.n	8003370 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e24c      	b.n	800373c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032aa:	d106      	bne.n	80032ba <HAL_RCC_OscConfig+0x76>
 80032ac:	4b80      	ldr	r3, [pc, #512]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a7f      	ldr	r2, [pc, #508]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80032b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	e02e      	b.n	8003318 <HAL_RCC_OscConfig+0xd4>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10c      	bne.n	80032dc <HAL_RCC_OscConfig+0x98>
 80032c2:	4b7b      	ldr	r3, [pc, #492]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a7a      	ldr	r2, [pc, #488]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80032c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	4b78      	ldr	r3, [pc, #480]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a77      	ldr	r2, [pc, #476]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	e01d      	b.n	8003318 <HAL_RCC_OscConfig+0xd4>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032e4:	d10c      	bne.n	8003300 <HAL_RCC_OscConfig+0xbc>
 80032e6:	4b72      	ldr	r3, [pc, #456]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a71      	ldr	r2, [pc, #452]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	4b6f      	ldr	r3, [pc, #444]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a6e      	ldr	r2, [pc, #440]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80032f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	e00b      	b.n	8003318 <HAL_RCC_OscConfig+0xd4>
 8003300:	4b6b      	ldr	r3, [pc, #428]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a6a      	ldr	r2, [pc, #424]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 8003306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	4b68      	ldr	r3, [pc, #416]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a67      	ldr	r2, [pc, #412]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 8003312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003316:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d013      	beq.n	8003348 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003320:	f7fd fa68 	bl	80007f4 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003328:	f7fd fa64 	bl	80007f4 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b64      	cmp	r3, #100	; 0x64
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e200      	b.n	800373c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333a:	4b5d      	ldr	r3, [pc, #372]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCC_OscConfig+0xe4>
 8003346:	e014      	b.n	8003372 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003348:	f7fd fa54 	bl	80007f4 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003350:	f7fd fa50 	bl	80007f4 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b64      	cmp	r3, #100	; 0x64
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e1ec      	b.n	800373c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003362:	4b53      	ldr	r3, [pc, #332]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x10c>
 800336e:	e000      	b.n	8003372 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d063      	beq.n	8003446 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800337e:	4b4c      	ldr	r3, [pc, #304]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00b      	beq.n	80033a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800338a:	4b49      	ldr	r3, [pc, #292]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 030c 	and.w	r3, r3, #12
 8003392:	2b08      	cmp	r3, #8
 8003394:	d11c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x18c>
 8003396:	4b46      	ldr	r3, [pc, #280]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d116      	bne.n	80033d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033a2:	4b43      	ldr	r3, [pc, #268]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d005      	beq.n	80033ba <HAL_RCC_OscConfig+0x176>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d001      	beq.n	80033ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e1c0      	b.n	800373c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ba:	4b3d      	ldr	r3, [pc, #244]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4939      	ldr	r1, [pc, #228]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ce:	e03a      	b.n	8003446 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d020      	beq.n	800341a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033d8:	4b36      	ldr	r3, [pc, #216]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 80033da:	2201      	movs	r2, #1
 80033dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033de:	f7fd fa09 	bl	80007f4 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e6:	f7fd fa05 	bl	80007f4 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e1a1      	b.n	800373c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f8:	4b2d      	ldr	r3, [pc, #180]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0f0      	beq.n	80033e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003404:	4b2a      	ldr	r3, [pc, #168]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4927      	ldr	r1, [pc, #156]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 8003414:	4313      	orrs	r3, r2
 8003416:	600b      	str	r3, [r1, #0]
 8003418:	e015      	b.n	8003446 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800341a:	4b26      	ldr	r3, [pc, #152]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7fd f9e8 	bl	80007f4 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003428:	f7fd f9e4 	bl	80007f4 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e180      	b.n	800373c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800343a:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d03a      	beq.n	80034c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d019      	beq.n	800348e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800345a:	4b17      	ldr	r3, [pc, #92]	; (80034b8 <HAL_RCC_OscConfig+0x274>)
 800345c:	2201      	movs	r2, #1
 800345e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003460:	f7fd f9c8 	bl	80007f4 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003468:	f7fd f9c4 	bl	80007f4 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e160      	b.n	800373c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800347a:	4b0d      	ldr	r3, [pc, #52]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003486:	2001      	movs	r0, #1
 8003488:	f000 faba 	bl	8003a00 <RCC_Delay>
 800348c:	e01c      	b.n	80034c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <HAL_RCC_OscConfig+0x274>)
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003494:	f7fd f9ae 	bl	80007f4 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800349a:	e00f      	b.n	80034bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800349c:	f7fd f9aa 	bl	80007f4 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d908      	bls.n	80034bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e146      	b.n	800373c <HAL_RCC_OscConfig+0x4f8>
 80034ae:	bf00      	nop
 80034b0:	40021000 	.word	0x40021000
 80034b4:	42420000 	.word	0x42420000
 80034b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034bc:	4b92      	ldr	r3, [pc, #584]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1e9      	bne.n	800349c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80a6 	beq.w	8003622 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034d6:	2300      	movs	r3, #0
 80034d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034da:	4b8b      	ldr	r3, [pc, #556]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10d      	bne.n	8003502 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e6:	4b88      	ldr	r3, [pc, #544]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	4a87      	ldr	r2, [pc, #540]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 80034ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f0:	61d3      	str	r3, [r2, #28]
 80034f2:	4b85      	ldr	r3, [pc, #532]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034fe:	2301      	movs	r3, #1
 8003500:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003502:	4b82      	ldr	r3, [pc, #520]	; (800370c <HAL_RCC_OscConfig+0x4c8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350a:	2b00      	cmp	r3, #0
 800350c:	d118      	bne.n	8003540 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800350e:	4b7f      	ldr	r3, [pc, #508]	; (800370c <HAL_RCC_OscConfig+0x4c8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a7e      	ldr	r2, [pc, #504]	; (800370c <HAL_RCC_OscConfig+0x4c8>)
 8003514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800351a:	f7fd f96b 	bl	80007f4 <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003520:	e008      	b.n	8003534 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003522:	f7fd f967 	bl	80007f4 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b64      	cmp	r3, #100	; 0x64
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e103      	b.n	800373c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003534:	4b75      	ldr	r3, [pc, #468]	; (800370c <HAL_RCC_OscConfig+0x4c8>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0f0      	beq.n	8003522 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d106      	bne.n	8003556 <HAL_RCC_OscConfig+0x312>
 8003548:	4b6f      	ldr	r3, [pc, #444]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	4a6e      	ldr	r2, [pc, #440]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	6213      	str	r3, [r2, #32]
 8003554:	e02d      	b.n	80035b2 <HAL_RCC_OscConfig+0x36e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10c      	bne.n	8003578 <HAL_RCC_OscConfig+0x334>
 800355e:	4b6a      	ldr	r3, [pc, #424]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	4a69      	ldr	r2, [pc, #420]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 8003564:	f023 0301 	bic.w	r3, r3, #1
 8003568:	6213      	str	r3, [r2, #32]
 800356a:	4b67      	ldr	r3, [pc, #412]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	4a66      	ldr	r2, [pc, #408]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 8003570:	f023 0304 	bic.w	r3, r3, #4
 8003574:	6213      	str	r3, [r2, #32]
 8003576:	e01c      	b.n	80035b2 <HAL_RCC_OscConfig+0x36e>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	2b05      	cmp	r3, #5
 800357e:	d10c      	bne.n	800359a <HAL_RCC_OscConfig+0x356>
 8003580:	4b61      	ldr	r3, [pc, #388]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	4a60      	ldr	r2, [pc, #384]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 8003586:	f043 0304 	orr.w	r3, r3, #4
 800358a:	6213      	str	r3, [r2, #32]
 800358c:	4b5e      	ldr	r3, [pc, #376]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	4a5d      	ldr	r2, [pc, #372]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	6213      	str	r3, [r2, #32]
 8003598:	e00b      	b.n	80035b2 <HAL_RCC_OscConfig+0x36e>
 800359a:	4b5b      	ldr	r3, [pc, #364]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	4a5a      	ldr	r2, [pc, #360]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 80035a0:	f023 0301 	bic.w	r3, r3, #1
 80035a4:	6213      	str	r3, [r2, #32]
 80035a6:	4b58      	ldr	r3, [pc, #352]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	4a57      	ldr	r2, [pc, #348]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 80035ac:	f023 0304 	bic.w	r3, r3, #4
 80035b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d015      	beq.n	80035e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ba:	f7fd f91b 	bl	80007f4 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c0:	e00a      	b.n	80035d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c2:	f7fd f917 	bl	80007f4 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e0b1      	b.n	800373c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d8:	4b4b      	ldr	r3, [pc, #300]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0ee      	beq.n	80035c2 <HAL_RCC_OscConfig+0x37e>
 80035e4:	e014      	b.n	8003610 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e6:	f7fd f905 	bl	80007f4 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ec:	e00a      	b.n	8003604 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ee:	f7fd f901 	bl	80007f4 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e09b      	b.n	800373c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003604:	4b40      	ldr	r3, [pc, #256]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1ee      	bne.n	80035ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003610:	7dfb      	ldrb	r3, [r7, #23]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d105      	bne.n	8003622 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003616:	4b3c      	ldr	r3, [pc, #240]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	4a3b      	ldr	r2, [pc, #236]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 800361c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003620:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 8087 	beq.w	800373a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800362c:	4b36      	ldr	r3, [pc, #216]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 030c 	and.w	r3, r3, #12
 8003634:	2b08      	cmp	r3, #8
 8003636:	d061      	beq.n	80036fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	2b02      	cmp	r3, #2
 800363e:	d146      	bne.n	80036ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003640:	4b33      	ldr	r3, [pc, #204]	; (8003710 <HAL_RCC_OscConfig+0x4cc>)
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003646:	f7fd f8d5 	bl	80007f4 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364e:	f7fd f8d1 	bl	80007f4 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e06d      	b.n	800373c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003660:	4b29      	ldr	r3, [pc, #164]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1f0      	bne.n	800364e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003674:	d108      	bne.n	8003688 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003676:	4b24      	ldr	r3, [pc, #144]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	4921      	ldr	r1, [pc, #132]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 8003684:	4313      	orrs	r3, r2
 8003686:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003688:	4b1f      	ldr	r3, [pc, #124]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a19      	ldr	r1, [r3, #32]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	430b      	orrs	r3, r1
 800369a:	491b      	ldr	r1, [pc, #108]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 800369c:	4313      	orrs	r3, r2
 800369e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036a0:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <HAL_RCC_OscConfig+0x4cc>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a6:	f7fd f8a5 	bl	80007f4 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ae:	f7fd f8a1 	bl	80007f4 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e03d      	b.n	800373c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036c0:	4b11      	ldr	r3, [pc, #68]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0f0      	beq.n	80036ae <HAL_RCC_OscConfig+0x46a>
 80036cc:	e035      	b.n	800373a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ce:	4b10      	ldr	r3, [pc, #64]	; (8003710 <HAL_RCC_OscConfig+0x4cc>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d4:	f7fd f88e 	bl	80007f4 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036dc:	f7fd f88a 	bl	80007f4 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e026      	b.n	800373c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ee:	4b06      	ldr	r3, [pc, #24]	; (8003708 <HAL_RCC_OscConfig+0x4c4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x498>
 80036fa:	e01e      	b.n	800373a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d107      	bne.n	8003714 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e019      	b.n	800373c <HAL_RCC_OscConfig+0x4f8>
 8003708:	40021000 	.word	0x40021000
 800370c:	40007000 	.word	0x40007000
 8003710:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003714:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <HAL_RCC_OscConfig+0x500>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	429a      	cmp	r2, r3
 8003726:	d106      	bne.n	8003736 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003732:	429a      	cmp	r2, r3
 8003734:	d001      	beq.n	800373a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e000      	b.n	800373c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40021000 	.word	0x40021000

08003748 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0d0      	b.n	80038fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800375c:	4b6a      	ldr	r3, [pc, #424]	; (8003908 <HAL_RCC_ClockConfig+0x1c0>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d910      	bls.n	800378c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376a:	4b67      	ldr	r3, [pc, #412]	; (8003908 <HAL_RCC_ClockConfig+0x1c0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f023 0207 	bic.w	r2, r3, #7
 8003772:	4965      	ldr	r1, [pc, #404]	; (8003908 <HAL_RCC_ClockConfig+0x1c0>)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	4313      	orrs	r3, r2
 8003778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800377a:	4b63      	ldr	r3, [pc, #396]	; (8003908 <HAL_RCC_ClockConfig+0x1c0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	429a      	cmp	r2, r3
 8003786:	d001      	beq.n	800378c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e0b8      	b.n	80038fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d020      	beq.n	80037da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037a4:	4b59      	ldr	r3, [pc, #356]	; (800390c <HAL_RCC_ClockConfig+0x1c4>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	4a58      	ldr	r2, [pc, #352]	; (800390c <HAL_RCC_ClockConfig+0x1c4>)
 80037aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037bc:	4b53      	ldr	r3, [pc, #332]	; (800390c <HAL_RCC_ClockConfig+0x1c4>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	4a52      	ldr	r2, [pc, #328]	; (800390c <HAL_RCC_ClockConfig+0x1c4>)
 80037c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037c8:	4b50      	ldr	r3, [pc, #320]	; (800390c <HAL_RCC_ClockConfig+0x1c4>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	494d      	ldr	r1, [pc, #308]	; (800390c <HAL_RCC_ClockConfig+0x1c4>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d040      	beq.n	8003868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d107      	bne.n	80037fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ee:	4b47      	ldr	r3, [pc, #284]	; (800390c <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d115      	bne.n	8003826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e07f      	b.n	80038fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2b02      	cmp	r3, #2
 8003804:	d107      	bne.n	8003816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003806:	4b41      	ldr	r3, [pc, #260]	; (800390c <HAL_RCC_ClockConfig+0x1c4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d109      	bne.n	8003826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e073      	b.n	80038fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003816:	4b3d      	ldr	r3, [pc, #244]	; (800390c <HAL_RCC_ClockConfig+0x1c4>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e06b      	b.n	80038fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003826:	4b39      	ldr	r3, [pc, #228]	; (800390c <HAL_RCC_ClockConfig+0x1c4>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f023 0203 	bic.w	r2, r3, #3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	4936      	ldr	r1, [pc, #216]	; (800390c <HAL_RCC_ClockConfig+0x1c4>)
 8003834:	4313      	orrs	r3, r2
 8003836:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003838:	f7fc ffdc 	bl	80007f4 <HAL_GetTick>
 800383c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383e:	e00a      	b.n	8003856 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003840:	f7fc ffd8 	bl	80007f4 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f241 3288 	movw	r2, #5000	; 0x1388
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e053      	b.n	80038fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003856:	4b2d      	ldr	r3, [pc, #180]	; (800390c <HAL_RCC_ClockConfig+0x1c4>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 020c 	and.w	r2, r3, #12
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	429a      	cmp	r2, r3
 8003866:	d1eb      	bne.n	8003840 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003868:	4b27      	ldr	r3, [pc, #156]	; (8003908 <HAL_RCC_ClockConfig+0x1c0>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d210      	bcs.n	8003898 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003876:	4b24      	ldr	r3, [pc, #144]	; (8003908 <HAL_RCC_ClockConfig+0x1c0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f023 0207 	bic.w	r2, r3, #7
 800387e:	4922      	ldr	r1, [pc, #136]	; (8003908 <HAL_RCC_ClockConfig+0x1c0>)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	4313      	orrs	r3, r2
 8003884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003886:	4b20      	ldr	r3, [pc, #128]	; (8003908 <HAL_RCC_ClockConfig+0x1c0>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d001      	beq.n	8003898 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e032      	b.n	80038fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d008      	beq.n	80038b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038a4:	4b19      	ldr	r3, [pc, #100]	; (800390c <HAL_RCC_ClockConfig+0x1c4>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	4916      	ldr	r1, [pc, #88]	; (800390c <HAL_RCC_ClockConfig+0x1c4>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d009      	beq.n	80038d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038c2:	4b12      	ldr	r3, [pc, #72]	; (800390c <HAL_RCC_ClockConfig+0x1c4>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	490e      	ldr	r1, [pc, #56]	; (800390c <HAL_RCC_ClockConfig+0x1c4>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038d6:	f000 f821 	bl	800391c <HAL_RCC_GetSysClockFreq>
 80038da:	4602      	mov	r2, r0
 80038dc:	4b0b      	ldr	r3, [pc, #44]	; (800390c <HAL_RCC_ClockConfig+0x1c4>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	091b      	lsrs	r3, r3, #4
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	490a      	ldr	r1, [pc, #40]	; (8003910 <HAL_RCC_ClockConfig+0x1c8>)
 80038e8:	5ccb      	ldrb	r3, [r1, r3]
 80038ea:	fa22 f303 	lsr.w	r3, r2, r3
 80038ee:	4a09      	ldr	r2, [pc, #36]	; (8003914 <HAL_RCC_ClockConfig+0x1cc>)
 80038f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038f2:	4b09      	ldr	r3, [pc, #36]	; (8003918 <HAL_RCC_ClockConfig+0x1d0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fc ff3a 	bl	8000770 <HAL_InitTick>

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	40022000 	.word	0x40022000
 800390c:	40021000 	.word	0x40021000
 8003910:	08009648 	.word	0x08009648
 8003914:	20000004 	.word	0x20000004
 8003918:	20000008 	.word	0x20000008

0800391c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	2300      	movs	r3, #0
 8003928:	60bb      	str	r3, [r7, #8]
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
 800392e:	2300      	movs	r3, #0
 8003930:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003936:	4b1e      	ldr	r3, [pc, #120]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	2b04      	cmp	r3, #4
 8003944:	d002      	beq.n	800394c <HAL_RCC_GetSysClockFreq+0x30>
 8003946:	2b08      	cmp	r3, #8
 8003948:	d003      	beq.n	8003952 <HAL_RCC_GetSysClockFreq+0x36>
 800394a:	e027      	b.n	800399c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800394c:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800394e:	613b      	str	r3, [r7, #16]
      break;
 8003950:	e027      	b.n	80039a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	0c9b      	lsrs	r3, r3, #18
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	4a17      	ldr	r2, [pc, #92]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800395c:	5cd3      	ldrb	r3, [r2, r3]
 800395e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d010      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800396a:	4b11      	ldr	r3, [pc, #68]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	0c5b      	lsrs	r3, r3, #17
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	4a11      	ldr	r2, [pc, #68]	; (80039bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003976:	5cd3      	ldrb	r3, [r2, r3]
 8003978:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a0d      	ldr	r2, [pc, #52]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800397e:	fb03 f202 	mul.w	r2, r3, r2
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	fbb2 f3f3 	udiv	r3, r2, r3
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	e004      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a0c      	ldr	r2, [pc, #48]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003990:	fb02 f303 	mul.w	r3, r2, r3
 8003994:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	613b      	str	r3, [r7, #16]
      break;
 800399a:	e002      	b.n	80039a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800399c:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800399e:	613b      	str	r3, [r7, #16]
      break;
 80039a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039a2:	693b      	ldr	r3, [r7, #16]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	371c      	adds	r7, #28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40021000 	.word	0x40021000
 80039b4:	007a1200 	.word	0x007a1200
 80039b8:	08009660 	.word	0x08009660
 80039bc:	08009670 	.word	0x08009670
 80039c0:	003d0900 	.word	0x003d0900

080039c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039c8:	4b02      	ldr	r3, [pc, #8]	; (80039d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80039ca:	681b      	ldr	r3, [r3, #0]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr
 80039d4:	20000004 	.word	0x20000004

080039d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039dc:	f7ff fff2 	bl	80039c4 <HAL_RCC_GetHCLKFreq>
 80039e0:	4602      	mov	r2, r0
 80039e2:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	0adb      	lsrs	r3, r3, #11
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	4903      	ldr	r1, [pc, #12]	; (80039fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ee:	5ccb      	ldrb	r3, [r1, r3]
 80039f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40021000 	.word	0x40021000
 80039fc:	08009658 	.word	0x08009658

08003a00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a08:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <RCC_Delay+0x34>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a0a      	ldr	r2, [pc, #40]	; (8003a38 <RCC_Delay+0x38>)
 8003a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a12:	0a5b      	lsrs	r3, r3, #9
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	fb02 f303 	mul.w	r3, r2, r3
 8003a1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a1c:	bf00      	nop
  }
  while (Delay --);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1e5a      	subs	r2, r3, #1
 8003a22:	60fa      	str	r2, [r7, #12]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f9      	bne.n	8003a1c <RCC_Delay+0x1c>
}
 8003a28:	bf00      	nop
 8003a2a:	bf00      	nop
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr
 8003a34:	20000004 	.word	0x20000004
 8003a38:	10624dd3 	.word	0x10624dd3

08003a3c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	613b      	str	r3, [r7, #16]
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d07d      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a5c:	4b4f      	ldr	r3, [pc, #316]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10d      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a68:	4b4c      	ldr	r3, [pc, #304]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	4a4b      	ldr	r2, [pc, #300]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a72:	61d3      	str	r3, [r2, #28]
 8003a74:	4b49      	ldr	r3, [pc, #292]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a80:	2301      	movs	r3, #1
 8003a82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a84:	4b46      	ldr	r3, [pc, #280]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d118      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a90:	4b43      	ldr	r3, [pc, #268]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a42      	ldr	r2, [pc, #264]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a9c:	f7fc feaa 	bl	80007f4 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa4:	f7fc fea6 	bl	80007f4 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b64      	cmp	r3, #100	; 0x64
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e06d      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab6:	4b3a      	ldr	r3, [pc, #232]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ac2:	4b36      	ldr	r3, [pc, #216]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d02e      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d027      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ae0:	4b2e      	ldr	r3, [pc, #184]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003aea:	4b2e      	ldr	r3, [pc, #184]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003af0:	4b2c      	ldr	r3, [pc, #176]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003af6:	4a29      	ldr	r2, [pc, #164]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d014      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b06:	f7fc fe75 	bl	80007f4 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b0c:	e00a      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0e:	f7fc fe71 	bl	80007f4 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e036      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b24:	4b1d      	ldr	r3, [pc, #116]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0ee      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b30:	4b1a      	ldr	r3, [pc, #104]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	4917      	ldr	r1, [pc, #92]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b42:	7dfb      	ldrb	r3, [r7, #23]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d105      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b48:	4b14      	ldr	r3, [pc, #80]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	4a13      	ldr	r2, [pc, #76]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b60:	4b0e      	ldr	r3, [pc, #56]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	490b      	ldr	r1, [pc, #44]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0310 	and.w	r3, r3, #16
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d008      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b7e:	4b07      	ldr	r3, [pc, #28]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	4904      	ldr	r1, [pc, #16]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40007000 	.word	0x40007000
 8003ba4:	42420440 	.word	0x42420440

08003ba8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b088      	sub	sp, #32
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61fb      	str	r3, [r7, #28]
 8003bb8:	2300      	movs	r3, #0
 8003bba:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b10      	cmp	r3, #16
 8003bc8:	d00a      	beq.n	8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b10      	cmp	r3, #16
 8003bce:	f200 808a 	bhi.w	8003ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d045      	beq.n	8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d075      	beq.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003bde:	e082      	b.n	8003ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003be0:	4b46      	ldr	r3, [pc, #280]	; (8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003be6:	4b45      	ldr	r3, [pc, #276]	; (8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d07b      	beq.n	8003cea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	0c9b      	lsrs	r3, r3, #18
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	4a41      	ldr	r2, [pc, #260]	; (8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003bfc:	5cd3      	ldrb	r3, [r2, r3]
 8003bfe:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d015      	beq.n	8003c36 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c0a:	4b3c      	ldr	r3, [pc, #240]	; (8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	0c5b      	lsrs	r3, r3, #17
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	4a3b      	ldr	r2, [pc, #236]	; (8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003c16:	5cd3      	ldrb	r3, [r2, r3]
 8003c18:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00d      	beq.n	8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003c24:	4a38      	ldr	r2, [pc, #224]	; (8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	fb02 f303 	mul.w	r3, r2, r3
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	e004      	b.n	8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4a34      	ldr	r2, [pc, #208]	; (8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003c3a:	fb02 f303 	mul.w	r3, r2, r3
 8003c3e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003c40:	4b2e      	ldr	r3, [pc, #184]	; (8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c4c:	d102      	bne.n	8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	61bb      	str	r3, [r7, #24]
      break;
 8003c52:	e04a      	b.n	8003cea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	4a2d      	ldr	r2, [pc, #180]	; (8003d10 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	085b      	lsrs	r3, r3, #1
 8003c60:	61bb      	str	r3, [r7, #24]
      break;
 8003c62:	e042      	b.n	8003cea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003c64:	4b25      	ldr	r3, [pc, #148]	; (8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c74:	d108      	bne.n	8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003c80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c84:	61bb      	str	r3, [r7, #24]
 8003c86:	e01f      	b.n	8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c92:	d109      	bne.n	8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003c94:	4b19      	ldr	r3, [pc, #100]	; (8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003ca0:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	e00f      	b.n	8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cb2:	d11c      	bne.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003cb4:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d016      	beq.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003cc0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003cc4:	61bb      	str	r3, [r7, #24]
      break;
 8003cc6:	e012      	b.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003cc8:	e011      	b.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003cca:	f7ff fe85 	bl	80039d8 <HAL_RCC_GetPCLK2Freq>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	0b9b      	lsrs	r3, r3, #14
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	3301      	adds	r3, #1
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce2:	61bb      	str	r3, [r7, #24]
      break;
 8003ce4:	e004      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003ce6:	bf00      	nop
 8003ce8:	e002      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003cea:	bf00      	nop
 8003cec:	e000      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003cee:	bf00      	nop
    }
  }
  return (frequency);
 8003cf0:	69bb      	ldr	r3, [r7, #24]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3720      	adds	r7, #32
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	08009674 	.word	0x08009674
 8003d04:	08009684 	.word	0x08009684
 8003d08:	007a1200 	.word	0x007a1200
 8003d0c:	003d0900 	.word	0x003d0900
 8003d10:	aaaaaaab 	.word	0xaaaaaaab

08003d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e041      	b.n	8003daa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fc fc3e 	bl	80005bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3304      	adds	r3, #4
 8003d50:	4619      	mov	r1, r3
 8003d52:	4610      	mov	r0, r2
 8003d54:	f000 fa74 	bl	8004240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d001      	beq.n	8003dcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e03a      	b.n	8003e42 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a18      	ldr	r2, [pc, #96]	; (8003e4c <HAL_TIM_Base_Start_IT+0x98>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00e      	beq.n	8003e0c <HAL_TIM_Base_Start_IT+0x58>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df6:	d009      	beq.n	8003e0c <HAL_TIM_Base_Start_IT+0x58>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a14      	ldr	r2, [pc, #80]	; (8003e50 <HAL_TIM_Base_Start_IT+0x9c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d004      	beq.n	8003e0c <HAL_TIM_Base_Start_IT+0x58>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a13      	ldr	r2, [pc, #76]	; (8003e54 <HAL_TIM_Base_Start_IT+0xa0>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d111      	bne.n	8003e30 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b06      	cmp	r3, #6
 8003e1c:	d010      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0201 	orr.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e2e:	e007      	b.n	8003e40 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0201 	orr.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr
 8003e4c:	40012c00 	.word	0x40012c00
 8003e50:	40000400 	.word	0x40000400
 8003e54:	40000800 	.word	0x40000800

08003e58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d122      	bne.n	8003eb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d11b      	bne.n	8003eb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f06f 0202 	mvn.w	r2, #2
 8003e84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f9b4 	bl	8004208 <HAL_TIM_IC_CaptureCallback>
 8003ea0:	e005      	b.n	8003eae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f9a7 	bl	80041f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f9b6 	bl	800421a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d122      	bne.n	8003f08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d11b      	bne.n	8003f08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f06f 0204 	mvn.w	r2, #4
 8003ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2202      	movs	r2, #2
 8003ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f98a 	bl	8004208 <HAL_TIM_IC_CaptureCallback>
 8003ef4:	e005      	b.n	8003f02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f97d 	bl	80041f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f98c 	bl	800421a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d122      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d11b      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f06f 0208 	mvn.w	r2, #8
 8003f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2204      	movs	r2, #4
 8003f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f960 	bl	8004208 <HAL_TIM_IC_CaptureCallback>
 8003f48:	e005      	b.n	8003f56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f953 	bl	80041f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f962 	bl	800421a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	f003 0310 	and.w	r3, r3, #16
 8003f66:	2b10      	cmp	r3, #16
 8003f68:	d122      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b10      	cmp	r3, #16
 8003f76:	d11b      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f06f 0210 	mvn.w	r2, #16
 8003f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2208      	movs	r2, #8
 8003f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f936 	bl	8004208 <HAL_TIM_IC_CaptureCallback>
 8003f9c:	e005      	b.n	8003faa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f929 	bl	80041f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f938 	bl	800421a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d10e      	bne.n	8003fdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d107      	bne.n	8003fdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f06f 0201 	mvn.w	r2, #1
 8003fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7fc f936 	bl	8000248 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe6:	2b80      	cmp	r3, #128	; 0x80
 8003fe8:	d10e      	bne.n	8004008 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff4:	2b80      	cmp	r3, #128	; 0x80
 8003ff6:	d107      	bne.n	8004008 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fa7b 	bl	80044fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004012:	2b40      	cmp	r3, #64	; 0x40
 8004014:	d10e      	bne.n	8004034 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004020:	2b40      	cmp	r3, #64	; 0x40
 8004022:	d107      	bne.n	8004034 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800402c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f8fc 	bl	800422c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	2b20      	cmp	r3, #32
 8004040:	d10e      	bne.n	8004060 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b20      	cmp	r3, #32
 800404e:	d107      	bne.n	8004060 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f06f 0220 	mvn.w	r2, #32
 8004058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fa46 	bl	80044ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004060:	bf00      	nop
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_TIM_ConfigClockSource+0x1c>
 8004080:	2302      	movs	r3, #2
 8004082:	e0b4      	b.n	80041ee <HAL_TIM_ConfigClockSource+0x186>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040bc:	d03e      	beq.n	800413c <HAL_TIM_ConfigClockSource+0xd4>
 80040be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c2:	f200 8087 	bhi.w	80041d4 <HAL_TIM_ConfigClockSource+0x16c>
 80040c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ca:	f000 8086 	beq.w	80041da <HAL_TIM_ConfigClockSource+0x172>
 80040ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d2:	d87f      	bhi.n	80041d4 <HAL_TIM_ConfigClockSource+0x16c>
 80040d4:	2b70      	cmp	r3, #112	; 0x70
 80040d6:	d01a      	beq.n	800410e <HAL_TIM_ConfigClockSource+0xa6>
 80040d8:	2b70      	cmp	r3, #112	; 0x70
 80040da:	d87b      	bhi.n	80041d4 <HAL_TIM_ConfigClockSource+0x16c>
 80040dc:	2b60      	cmp	r3, #96	; 0x60
 80040de:	d050      	beq.n	8004182 <HAL_TIM_ConfigClockSource+0x11a>
 80040e0:	2b60      	cmp	r3, #96	; 0x60
 80040e2:	d877      	bhi.n	80041d4 <HAL_TIM_ConfigClockSource+0x16c>
 80040e4:	2b50      	cmp	r3, #80	; 0x50
 80040e6:	d03c      	beq.n	8004162 <HAL_TIM_ConfigClockSource+0xfa>
 80040e8:	2b50      	cmp	r3, #80	; 0x50
 80040ea:	d873      	bhi.n	80041d4 <HAL_TIM_ConfigClockSource+0x16c>
 80040ec:	2b40      	cmp	r3, #64	; 0x40
 80040ee:	d058      	beq.n	80041a2 <HAL_TIM_ConfigClockSource+0x13a>
 80040f0:	2b40      	cmp	r3, #64	; 0x40
 80040f2:	d86f      	bhi.n	80041d4 <HAL_TIM_ConfigClockSource+0x16c>
 80040f4:	2b30      	cmp	r3, #48	; 0x30
 80040f6:	d064      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0x15a>
 80040f8:	2b30      	cmp	r3, #48	; 0x30
 80040fa:	d86b      	bhi.n	80041d4 <HAL_TIM_ConfigClockSource+0x16c>
 80040fc:	2b20      	cmp	r3, #32
 80040fe:	d060      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004100:	2b20      	cmp	r3, #32
 8004102:	d867      	bhi.n	80041d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004104:	2b00      	cmp	r3, #0
 8004106:	d05c      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004108:	2b10      	cmp	r3, #16
 800410a:	d05a      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0x15a>
 800410c:	e062      	b.n	80041d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6818      	ldr	r0, [r3, #0]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	6899      	ldr	r1, [r3, #8]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f000 f968 	bl	80043f2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004130:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	609a      	str	r2, [r3, #8]
      break;
 800413a:	e04f      	b.n	80041dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6818      	ldr	r0, [r3, #0]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	6899      	ldr	r1, [r3, #8]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f000 f951 	bl	80043f2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800415e:	609a      	str	r2, [r3, #8]
      break;
 8004160:	e03c      	b.n	80041dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6818      	ldr	r0, [r3, #0]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	6859      	ldr	r1, [r3, #4]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	461a      	mov	r2, r3
 8004170:	f000 f8c8 	bl	8004304 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2150      	movs	r1, #80	; 0x50
 800417a:	4618      	mov	r0, r3
 800417c:	f000 f91f 	bl	80043be <TIM_ITRx_SetConfig>
      break;
 8004180:	e02c      	b.n	80041dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	6859      	ldr	r1, [r3, #4]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	461a      	mov	r2, r3
 8004190:	f000 f8e6 	bl	8004360 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2160      	movs	r1, #96	; 0x60
 800419a:	4618      	mov	r0, r3
 800419c:	f000 f90f 	bl	80043be <TIM_ITRx_SetConfig>
      break;
 80041a0:	e01c      	b.n	80041dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6818      	ldr	r0, [r3, #0]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	6859      	ldr	r1, [r3, #4]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	461a      	mov	r2, r3
 80041b0:	f000 f8a8 	bl	8004304 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2140      	movs	r1, #64	; 0x40
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 f8ff 	bl	80043be <TIM_ITRx_SetConfig>
      break;
 80041c0:	e00c      	b.n	80041dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4619      	mov	r1, r3
 80041cc:	4610      	mov	r0, r2
 80041ce:	f000 f8f6 	bl	80043be <TIM_ITRx_SetConfig>
      break;
 80041d2:	e003      	b.n	80041dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	73fb      	strb	r3, [r7, #15]
      break;
 80041d8:	e000      	b.n	80041dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	bc80      	pop	{r7}
 8004206:	4770      	bx	lr

08004208 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr

0800421a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr

0800422c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr
	...

08004240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a29      	ldr	r2, [pc, #164]	; (80042f8 <TIM_Base_SetConfig+0xb8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00b      	beq.n	8004270 <TIM_Base_SetConfig+0x30>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800425e:	d007      	beq.n	8004270 <TIM_Base_SetConfig+0x30>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a26      	ldr	r2, [pc, #152]	; (80042fc <TIM_Base_SetConfig+0xbc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d003      	beq.n	8004270 <TIM_Base_SetConfig+0x30>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a25      	ldr	r2, [pc, #148]	; (8004300 <TIM_Base_SetConfig+0xc0>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d108      	bne.n	8004282 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a1c      	ldr	r2, [pc, #112]	; (80042f8 <TIM_Base_SetConfig+0xb8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d00b      	beq.n	80042a2 <TIM_Base_SetConfig+0x62>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004290:	d007      	beq.n	80042a2 <TIM_Base_SetConfig+0x62>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a19      	ldr	r2, [pc, #100]	; (80042fc <TIM_Base_SetConfig+0xbc>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d003      	beq.n	80042a2 <TIM_Base_SetConfig+0x62>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a18      	ldr	r2, [pc, #96]	; (8004300 <TIM_Base_SetConfig+0xc0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d108      	bne.n	80042b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a07      	ldr	r2, [pc, #28]	; (80042f8 <TIM_Base_SetConfig+0xb8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d103      	bne.n	80042e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	615a      	str	r2, [r3, #20]
}
 80042ee:	bf00      	nop
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr
 80042f8:	40012c00 	.word	0x40012c00
 80042fc:	40000400 	.word	0x40000400
 8004300:	40000800 	.word	0x40000800

08004304 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f023 0201 	bic.w	r2, r3, #1
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800432e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f023 030a 	bic.w	r3, r3, #10
 8004340:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4313      	orrs	r3, r2
 8004348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	621a      	str	r2, [r3, #32]
}
 8004356:	bf00      	nop
 8004358:	371c      	adds	r7, #28
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr

08004360 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	f023 0210 	bic.w	r2, r3, #16
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800438a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	031b      	lsls	r3, r3, #12
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800439c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	621a      	str	r2, [r3, #32]
}
 80043b4:	bf00      	nop
 80043b6:	371c      	adds	r7, #28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr

080043be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043be:	b480      	push	{r7}
 80043c0:	b085      	sub	sp, #20
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
 80043c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	f043 0307 	orr.w	r3, r3, #7
 80043e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	609a      	str	r2, [r3, #8]
}
 80043e8:	bf00      	nop
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr

080043f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b087      	sub	sp, #28
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	60f8      	str	r0, [r7, #12]
 80043fa:	60b9      	str	r1, [r7, #8]
 80043fc:	607a      	str	r2, [r7, #4]
 80043fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800440c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	021a      	lsls	r2, r3, #8
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	431a      	orrs	r2, r3
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	4313      	orrs	r3, r2
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	609a      	str	r2, [r3, #8]
}
 8004426:	bf00      	nop
 8004428:	371c      	adds	r7, #28
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr

08004430 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004440:	2b01      	cmp	r3, #1
 8004442:	d101      	bne.n	8004448 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004444:	2302      	movs	r3, #2
 8004446:	e046      	b.n	80044d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a16      	ldr	r2, [pc, #88]	; (80044e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d00e      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004494:	d009      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a12      	ldr	r2, [pc, #72]	; (80044e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d004      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a10      	ldr	r2, [pc, #64]	; (80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d10c      	bne.n	80044c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr
 80044e0:	40012c00 	.word	0x40012c00
 80044e4:	40000400 	.word	0x40000400
 80044e8:	40000800 	.word	0x40000800

080044ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bc80      	pop	{r7}
 80044fc:	4770      	bx	lr

080044fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr

08004510 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004510:	b084      	sub	sp, #16
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	f107 0014 	add.w	r0, r7, #20
 800451e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	bc80      	pop	{r7}
 800452c:	b004      	add	sp, #16
 800452e:	4770      	bx	lr

08004530 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004540:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004544:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	b29a      	uxth	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr

0800455c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004564:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004568:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004570:	b29a      	uxth	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	b29b      	uxth	r3, r3
 8004576:	43db      	mvns	r3, r3
 8004578:	b29b      	uxth	r3, r3
 800457a:	4013      	ands	r3, r2
 800457c:	b29a      	uxth	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	bc80      	pop	{r7}
 800458e:	4770      	bx	lr

08004590 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr

080045a8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80045a8:	b084      	sub	sp, #16
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	f107 0014 	add.w	r0, r7, #20
 80045b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	b004      	add	sp, #16
 80045e6:	4770      	bx	lr

080045e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b09d      	sub	sp, #116	; 0x74
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	b29b      	uxth	r3, r3
 8004606:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800460a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	78db      	ldrb	r3, [r3, #3]
 8004616:	2b03      	cmp	r3, #3
 8004618:	d81f      	bhi.n	800465a <USB_ActivateEndpoint+0x72>
 800461a:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <USB_ActivateEndpoint+0x38>)
 800461c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004620:	08004631 	.word	0x08004631
 8004624:	0800464d 	.word	0x0800464d
 8004628:	08004663 	.word	0x08004663
 800462c:	0800463f 	.word	0x0800463f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004630:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004634:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004638:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800463c:	e012      	b.n	8004664 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800463e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004642:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004646:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800464a:	e00b      	b.n	8004664 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800464c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004650:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004654:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004658:	e004      	b.n	8004664 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004660:	e000      	b.n	8004664 <USB_ActivateEndpoint+0x7c>
      break;
 8004662:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	441a      	add	r2, r3
 800466e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800467a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800467e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004682:	b29b      	uxth	r3, r3
 8004684:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	b29b      	uxth	r3, r3
 8004694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469c:	b29a      	uxth	r2, r3
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	441a      	add	r2, r3
 80046b4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80046b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	7b1b      	ldrb	r3, [r3, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f040 8178 	bne.w	80049c6 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	785b      	ldrb	r3, [r3, #1]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 8084 	beq.w	80047e8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	61bb      	str	r3, [r7, #24]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	461a      	mov	r2, r3
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	4413      	add	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	011a      	lsls	r2, r3, #4
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	88db      	ldrh	r3, [r3, #6]
 8004708:	085b      	lsrs	r3, r3, #1
 800470a:	b29b      	uxth	r3, r3
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	827b      	strh	r3, [r7, #18]
 8004722:	8a7b      	ldrh	r3, [r7, #18]
 8004724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01b      	beq.n	8004764 <USB_ActivateEndpoint+0x17c>
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	b29b      	uxth	r3, r3
 800473a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800473e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004742:	823b      	strh	r3, [r7, #16]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	441a      	add	r2, r3
 800474e:	8a3b      	ldrh	r3, [r7, #16]
 8004750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800475c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004760:	b29b      	uxth	r3, r3
 8004762:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	78db      	ldrb	r3, [r3, #3]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d020      	beq.n	80047ae <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	b29b      	uxth	r3, r3
 800477a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800477e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004782:	81bb      	strh	r3, [r7, #12]
 8004784:	89bb      	ldrh	r3, [r7, #12]
 8004786:	f083 0320 	eor.w	r3, r3, #32
 800478a:	81bb      	strh	r3, [r7, #12]
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	441a      	add	r2, r3
 8004796:	89bb      	ldrh	r3, [r7, #12]
 8004798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800479c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	8013      	strh	r3, [r2, #0]
 80047ac:	e2d5      	b.n	8004d5a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047c4:	81fb      	strh	r3, [r7, #14]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	441a      	add	r2, r3
 80047d0:	89fb      	ldrh	r3, [r7, #14]
 80047d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	8013      	strh	r3, [r2, #0]
 80047e6:	e2b8      	b.n	8004d5a <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	633b      	str	r3, [r7, #48]	; 0x30
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	461a      	mov	r2, r3
 80047f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f8:	4413      	add	r3, r2
 80047fa:	633b      	str	r3, [r7, #48]	; 0x30
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	011a      	lsls	r2, r3, #4
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	4413      	add	r3, r2
 8004806:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800480a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	88db      	ldrh	r3, [r3, #6]
 8004810:	085b      	lsrs	r3, r3, #1
 8004812:	b29b      	uxth	r3, r3
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004826:	b29b      	uxth	r3, r3
 8004828:	461a      	mov	r2, r3
 800482a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482c:	4413      	add	r3, r2
 800482e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	011a      	lsls	r2, r3, #4
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	4413      	add	r3, r2
 800483a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800483e:	627b      	str	r3, [r7, #36]	; 0x24
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	881b      	ldrh	r3, [r3, #0]
 8004844:	b29b      	uxth	r3, r3
 8004846:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800484a:	b29a      	uxth	r2, r3
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	801a      	strh	r2, [r3, #0]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	2b3e      	cmp	r3, #62	; 0x3e
 8004856:	d91d      	bls.n	8004894 <USB_ActivateEndpoint+0x2ac>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	095b      	lsrs	r3, r3, #5
 800485e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	f003 031f 	and.w	r3, r3, #31
 8004868:	2b00      	cmp	r3, #0
 800486a:	d102      	bne.n	8004872 <USB_ActivateEndpoint+0x28a>
 800486c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800486e:	3b01      	subs	r3, #1
 8004870:	66bb      	str	r3, [r7, #104]	; 0x68
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b29a      	uxth	r2, r3
 8004878:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800487a:	b29b      	uxth	r3, r3
 800487c:	029b      	lsls	r3, r3, #10
 800487e:	b29b      	uxth	r3, r3
 8004880:	4313      	orrs	r3, r2
 8004882:	b29b      	uxth	r3, r3
 8004884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800488c:	b29a      	uxth	r2, r3
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	801a      	strh	r2, [r3, #0]
 8004892:	e026      	b.n	80048e2 <USB_ActivateEndpoint+0x2fa>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10a      	bne.n	80048b2 <USB_ActivateEndpoint+0x2ca>
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	801a      	strh	r2, [r3, #0]
 80048b0:	e017      	b.n	80048e2 <USB_ActivateEndpoint+0x2fa>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	085b      	lsrs	r3, r3, #1
 80048b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d002      	beq.n	80048cc <USB_ActivateEndpoint+0x2e4>
 80048c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048c8:	3301      	adds	r3, #1
 80048ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	029b      	lsls	r3, r3, #10
 80048d8:	b29b      	uxth	r3, r3
 80048da:	4313      	orrs	r3, r2
 80048dc:	b29a      	uxth	r2, r3
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80048f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80048f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d01b      	beq.n	8004932 <USB_ActivateEndpoint+0x34a>
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	b29b      	uxth	r3, r3
 8004908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800490c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004910:	843b      	strh	r3, [r7, #32]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	441a      	add	r2, r3
 800491c:	8c3b      	ldrh	r3, [r7, #32]
 800491e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004926:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800492a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800492e:	b29b      	uxth	r3, r3
 8004930:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d124      	bne.n	8004984 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	b29b      	uxth	r3, r3
 8004948:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800494c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004950:	83bb      	strh	r3, [r7, #28]
 8004952:	8bbb      	ldrh	r3, [r7, #28]
 8004954:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004958:	83bb      	strh	r3, [r7, #28]
 800495a:	8bbb      	ldrh	r3, [r7, #28]
 800495c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004960:	83bb      	strh	r3, [r7, #28]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	441a      	add	r2, r3
 800496c:	8bbb      	ldrh	r3, [r7, #28]
 800496e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004972:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800497a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497e:	b29b      	uxth	r3, r3
 8004980:	8013      	strh	r3, [r2, #0]
 8004982:	e1ea      	b.n	8004d5a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	b29b      	uxth	r3, r3
 8004992:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499a:	83fb      	strh	r3, [r7, #30]
 800499c:	8bfb      	ldrh	r3, [r7, #30]
 800499e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049a2:	83fb      	strh	r3, [r7, #30]
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	441a      	add	r2, r3
 80049ae:	8bfb      	ldrh	r3, [r7, #30]
 80049b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	8013      	strh	r3, [r2, #0]
 80049c4:	e1c9      	b.n	8004d5a <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	78db      	ldrb	r3, [r3, #3]
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d11e      	bne.n	8004a0c <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	b29b      	uxth	r3, r3
 80049dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	441a      	add	r2, r3
 80049f2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80049f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	8013      	strh	r3, [r2, #0]
 8004a0a:	e01d      	b.n	8004a48 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a22:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	441a      	add	r2, r3
 8004a30:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	461a      	mov	r2, r3
 8004a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a58:	4413      	add	r3, r2
 8004a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	011a      	lsls	r2, r3, #4
 8004a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	891b      	ldrh	r3, [r3, #8]
 8004a70:	085b      	lsrs	r3, r3, #1
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a7a:	801a      	strh	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	461a      	mov	r2, r3
 8004a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a8c:	4413      	add	r3, r2
 8004a8e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	011a      	lsls	r2, r3, #4
 8004a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a9e:	653b      	str	r3, [r7, #80]	; 0x50
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	895b      	ldrh	r3, [r3, #10]
 8004aa4:	085b      	lsrs	r3, r3, #1
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	785b      	ldrb	r3, [r3, #1]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f040 8093 	bne.w	8004be0 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004aca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d01b      	beq.n	8004b0e <USB_ActivateEndpoint+0x526>
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	441a      	add	r2, r3
 8004af8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	881b      	ldrh	r3, [r3, #0]
 8004b1a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004b1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d01b      	beq.n	8004b5e <USB_ActivateEndpoint+0x576>
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	441a      	add	r2, r3
 8004b48:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004b4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4413      	add	r3, r2
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b74:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b76:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b7c:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b7e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b80:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b84:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	441a      	add	r2, r3
 8004b90:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bbc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	441a      	add	r2, r3
 8004bc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	8013      	strh	r3, [r2, #0]
 8004bde:	e0bc      	b.n	8004d5a <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004bf0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01d      	beq.n	8004c38 <USB_ActivateEndpoint+0x650>
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c12:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	441a      	add	r2, r3
 8004c20:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004c48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01d      	beq.n	8004c90 <USB_ActivateEndpoint+0x6a8>
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	441a      	add	r2, r3
 8004c78:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	78db      	ldrb	r3, [r3, #3]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d024      	beq.n	8004ce2 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004caa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004cb2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004cb6:	f083 0320 	eor.w	r3, r3, #32
 8004cba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	441a      	add	r2, r3
 8004cc8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	8013      	strh	r3, [r2, #0]
 8004ce0:	e01d      	b.n	8004d1e <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	441a      	add	r2, r3
 8004d06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d34:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	441a      	add	r2, r3
 8004d42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004d5a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3774      	adds	r7, #116	; 0x74
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr

08004d68 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b08d      	sub	sp, #52	; 0x34
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	7b1b      	ldrb	r3, [r3, #12]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f040 808e 	bne.w	8004e98 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	785b      	ldrb	r3, [r3, #1]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d044      	beq.n	8004e0e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	81bb      	strh	r3, [r7, #12]
 8004d92:	89bb      	ldrh	r3, [r7, #12]
 8004d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01b      	beq.n	8004dd4 <USB_DeactivateEndpoint+0x6c>
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db2:	817b      	strh	r3, [r7, #10]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	441a      	add	r2, r3
 8004dbe:	897b      	ldrh	r3, [r7, #10]
 8004dc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dea:	813b      	strh	r3, [r7, #8]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	441a      	add	r2, r3
 8004df6:	893b      	ldrh	r3, [r7, #8]
 8004df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	8013      	strh	r3, [r2, #0]
 8004e0c:	e192      	b.n	8005134 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	827b      	strh	r3, [r7, #18]
 8004e1c:	8a7b      	ldrh	r3, [r7, #18]
 8004e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d01b      	beq.n	8004e5e <USB_DeactivateEndpoint+0xf6>
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3c:	823b      	strh	r3, [r7, #16]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	441a      	add	r2, r3
 8004e48:	8a3b      	ldrh	r3, [r7, #16]
 8004e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e74:	81fb      	strh	r3, [r7, #14]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	441a      	add	r2, r3
 8004e80:	89fb      	ldrh	r3, [r7, #14]
 8004e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	8013      	strh	r3, [r2, #0]
 8004e96:	e14d      	b.n	8005134 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	785b      	ldrb	r3, [r3, #1]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f040 80a5 	bne.w	8004fec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	843b      	strh	r3, [r7, #32]
 8004eb0:	8c3b      	ldrh	r3, [r7, #32]
 8004eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d01b      	beq.n	8004ef2 <USB_DeactivateEndpoint+0x18a>
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed0:	83fb      	strh	r3, [r7, #30]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	441a      	add	r2, r3
 8004edc:	8bfb      	ldrh	r3, [r7, #30]
 8004ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	83bb      	strh	r3, [r7, #28]
 8004f00:	8bbb      	ldrh	r3, [r7, #28]
 8004f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d01b      	beq.n	8004f42 <USB_DeactivateEndpoint+0x1da>
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f20:	837b      	strh	r3, [r7, #26]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	441a      	add	r2, r3
 8004f2c:	8b7b      	ldrh	r3, [r7, #26]
 8004f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f58:	833b      	strh	r3, [r7, #24]
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	441a      	add	r2, r3
 8004f64:	8b3b      	ldrh	r3, [r7, #24]
 8004f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f90:	82fb      	strh	r3, [r7, #22]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	441a      	add	r2, r3
 8004f9c:	8afb      	ldrh	r3, [r7, #22]
 8004f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fc8:	82bb      	strh	r3, [r7, #20]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	441a      	add	r2, r3
 8004fd4:	8abb      	ldrh	r3, [r7, #20]
 8004fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	8013      	strh	r3, [r2, #0]
 8004fea:	e0a3      	b.n	8005134 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ffa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01b      	beq.n	800503c <USB_DeactivateEndpoint+0x2d4>
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	b29b      	uxth	r3, r3
 8005012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	441a      	add	r2, r3
 8005026:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800502c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005030:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005038:	b29b      	uxth	r3, r3
 800503a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	857b      	strh	r3, [r7, #42]	; 0x2a
 800504a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	2b00      	cmp	r3, #0
 8005052:	d01b      	beq.n	800508c <USB_DeactivateEndpoint+0x324>
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	b29b      	uxth	r3, r3
 8005062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506a:	853b      	strh	r3, [r7, #40]	; 0x28
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	441a      	add	r2, r3
 8005076:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800507c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005084:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005088:	b29b      	uxth	r3, r3
 800508a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	b29b      	uxth	r3, r3
 800509a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800509e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	441a      	add	r2, r3
 80050ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	441a      	add	r2, r3
 80050e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	b29b      	uxth	r3, r3
 800510a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800510e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005112:	847b      	strh	r3, [r7, #34]	; 0x22
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	441a      	add	r2, r3
 800511e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800512c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005130:	b29b      	uxth	r3, r3
 8005132:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3734      	adds	r7, #52	; 0x34
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr

08005140 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b0c2      	sub	sp, #264	; 0x108
 8005144:	af00      	add	r7, sp, #0
 8005146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800514a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800514e:	6018      	str	r0, [r3, #0]
 8005150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005158:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800515a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800515e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	785b      	ldrb	r3, [r3, #1]
 8005166:	2b01      	cmp	r3, #1
 8005168:	f040 86b7 	bne.w	8005eda <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800516c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	699a      	ldr	r2, [r3, #24]
 8005178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800517c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	429a      	cmp	r2, r3
 8005186:	d908      	bls.n	800519a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800518c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005198:	e007      	b.n	80051aa <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800519a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800519e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80051aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	7b1b      	ldrb	r3, [r3, #12]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d13a      	bne.n	8005230 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80051ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6959      	ldr	r1, [r3, #20]
 80051c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	88da      	ldrh	r2, [r3, #6]
 80051d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80051dc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80051e0:	6800      	ldr	r0, [r0, #0]
 80051e2:	f001 fc9c 	bl	8006b1e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80051e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005200:	b29b      	uxth	r3, r3
 8005202:	461a      	mov	r2, r3
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	4413      	add	r3, r2
 8005208:	613b      	str	r3, [r7, #16]
 800520a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800520e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	011a      	lsls	r2, r3, #4
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	4413      	add	r3, r2
 800521c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	801a      	strh	r2, [r3, #0]
 800522c:	f000 be1f 	b.w	8005e6e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	78db      	ldrb	r3, [r3, #3]
 800523c:	2b02      	cmp	r3, #2
 800523e:	f040 8462 	bne.w	8005b06 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6a1a      	ldr	r2, [r3, #32]
 800524e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	429a      	cmp	r2, r3
 800525c:	f240 83df 	bls.w	8005a1e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005264:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800526e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	b29b      	uxth	r3, r3
 800527e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005286:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800528a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800528e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	441a      	add	r2, r3
 80052a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80052a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80052b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80052bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6a1a      	ldr	r2, [r3, #32]
 80052c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052cc:	1ad2      	subs	r2, r2, r3
 80052ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80052da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 81c7 	beq.w	8005690 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005306:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	633b      	str	r3, [r7, #48]	; 0x30
 800530e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	785b      	ldrb	r3, [r3, #1]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d177      	bne.n	800540e <USB_EPStartXfer+0x2ce>
 800531e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005322:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	62bb      	str	r3, [r7, #40]	; 0x28
 800532a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800532e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005338:	b29b      	uxth	r3, r3
 800533a:	461a      	mov	r2, r3
 800533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533e:	4413      	add	r3, r2
 8005340:	62bb      	str	r3, [r7, #40]	; 0x28
 8005342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	011a      	lsls	r2, r3, #4
 8005350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005352:	4413      	add	r3, r2
 8005354:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	b29b      	uxth	r3, r3
 8005360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005364:	b29a      	uxth	r2, r3
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	801a      	strh	r2, [r3, #0]
 800536a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800536e:	2b3e      	cmp	r3, #62	; 0x3e
 8005370:	d921      	bls.n	80053b6 <USB_EPStartXfer+0x276>
 8005372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005376:	095b      	lsrs	r3, r3, #5
 8005378:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800537c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005380:	f003 031f 	and.w	r3, r3, #31
 8005384:	2b00      	cmp	r3, #0
 8005386:	d104      	bne.n	8005392 <USB_EPStartXfer+0x252>
 8005388:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800538c:	3b01      	subs	r3, #1
 800538e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	b29a      	uxth	r2, r3
 8005398:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800539c:	b29b      	uxth	r3, r3
 800539e:	029b      	lsls	r3, r3, #10
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	4313      	orrs	r3, r2
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	801a      	strh	r2, [r3, #0]
 80053b4:	e050      	b.n	8005458 <USB_EPStartXfer+0x318>
 80053b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10a      	bne.n	80053d4 <USB_EPStartXfer+0x294>
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	801a      	strh	r2, [r3, #0]
 80053d2:	e041      	b.n	8005458 <USB_EPStartXfer+0x318>
 80053d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053d8:	085b      	lsrs	r3, r3, #1
 80053da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80053de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d004      	beq.n	80053f4 <USB_EPStartXfer+0x2b4>
 80053ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80053ee:	3301      	adds	r3, #1
 80053f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80053fe:	b29b      	uxth	r3, r3
 8005400:	029b      	lsls	r3, r3, #10
 8005402:	b29b      	uxth	r3, r3
 8005404:	4313      	orrs	r3, r2
 8005406:	b29a      	uxth	r2, r3
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	801a      	strh	r2, [r3, #0]
 800540c:	e024      	b.n	8005458 <USB_EPStartXfer+0x318>
 800540e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	785b      	ldrb	r3, [r3, #1]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d11c      	bne.n	8005458 <USB_EPStartXfer+0x318>
 800541e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005422:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800542c:	b29b      	uxth	r3, r3
 800542e:	461a      	mov	r2, r3
 8005430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005432:	4413      	add	r3, r2
 8005434:	633b      	str	r3, [r7, #48]	; 0x30
 8005436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800543a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	011a      	lsls	r2, r3, #4
 8005444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005446:	4413      	add	r3, r2
 8005448:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800544c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800544e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005452:	b29a      	uxth	r2, r3
 8005454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005456:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800545c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	895b      	ldrh	r3, [r3, #10]
 8005464:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800546c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6959      	ldr	r1, [r3, #20]
 8005474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005478:	b29b      	uxth	r3, r3
 800547a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800547e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005482:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005486:	6800      	ldr	r0, [r0, #0]
 8005488:	f001 fb49 	bl	8006b1e <USB_WritePMA>
            ep->xfer_buff += len;
 800548c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	695a      	ldr	r2, [r3, #20]
 8005498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800549c:	441a      	add	r2, r3
 800549e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80054aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6a1a      	ldr	r2, [r3, #32]
 80054b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d90f      	bls.n	80054e6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80054c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6a1a      	ldr	r2, [r3, #32]
 80054d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054d6:	1ad2      	subs	r2, r2, r3
 80054d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	621a      	str	r2, [r3, #32]
 80054e4:	e00e      	b.n	8005504 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80054e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80054f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2200      	movs	r2, #0
 8005502:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	785b      	ldrb	r3, [r3, #1]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d177      	bne.n	8005604 <USB_EPStartXfer+0x4c4>
 8005514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005518:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	61bb      	str	r3, [r7, #24]
 8005520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005524:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800552e:	b29b      	uxth	r3, r3
 8005530:	461a      	mov	r2, r3
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	4413      	add	r3, r2
 8005536:	61bb      	str	r3, [r7, #24]
 8005538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800553c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	011a      	lsls	r2, r3, #4
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	4413      	add	r3, r2
 800554a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	881b      	ldrh	r3, [r3, #0]
 8005554:	b29b      	uxth	r3, r3
 8005556:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800555a:	b29a      	uxth	r2, r3
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	801a      	strh	r2, [r3, #0]
 8005560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005564:	2b3e      	cmp	r3, #62	; 0x3e
 8005566:	d921      	bls.n	80055ac <USB_EPStartXfer+0x46c>
 8005568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800556c:	095b      	lsrs	r3, r3, #5
 800556e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005576:	f003 031f 	and.w	r3, r3, #31
 800557a:	2b00      	cmp	r3, #0
 800557c:	d104      	bne.n	8005588 <USB_EPStartXfer+0x448>
 800557e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005582:	3b01      	subs	r3, #1
 8005584:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	b29a      	uxth	r2, r3
 800558e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005592:	b29b      	uxth	r3, r3
 8005594:	029b      	lsls	r3, r3, #10
 8005596:	b29b      	uxth	r3, r3
 8005598:	4313      	orrs	r3, r2
 800559a:	b29b      	uxth	r3, r3
 800559c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	801a      	strh	r2, [r3, #0]
 80055aa:	e056      	b.n	800565a <USB_EPStartXfer+0x51a>
 80055ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10a      	bne.n	80055ca <USB_EPStartXfer+0x48a>
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	801a      	strh	r2, [r3, #0]
 80055c8:	e047      	b.n	800565a <USB_EPStartXfer+0x51a>
 80055ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ce:	085b      	lsrs	r3, r3, #1
 80055d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80055d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d004      	beq.n	80055ea <USB_EPStartXfer+0x4aa>
 80055e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055e4:	3301      	adds	r3, #1
 80055e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	881b      	ldrh	r3, [r3, #0]
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	029b      	lsls	r3, r3, #10
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	4313      	orrs	r3, r2
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	801a      	strh	r2, [r3, #0]
 8005602:	e02a      	b.n	800565a <USB_EPStartXfer+0x51a>
 8005604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	785b      	ldrb	r3, [r3, #1]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d122      	bne.n	800565a <USB_EPStartXfer+0x51a>
 8005614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005618:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	623b      	str	r3, [r7, #32]
 8005620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005624:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800562e:	b29b      	uxth	r3, r3
 8005630:	461a      	mov	r2, r3
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	4413      	add	r3, r2
 8005636:	623b      	str	r3, [r7, #32]
 8005638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800563c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	011a      	lsls	r2, r3, #4
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	4413      	add	r3, r2
 800564a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800564e:	61fb      	str	r3, [r7, #28]
 8005650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005654:	b29a      	uxth	r2, r3
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800565a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800565e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	891b      	ldrh	r3, [r3, #8]
 8005666:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800566a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800566e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6959      	ldr	r1, [r3, #20]
 8005676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800567a:	b29b      	uxth	r3, r3
 800567c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005680:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005684:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005688:	6800      	ldr	r0, [r0, #0]
 800568a:	f001 fa48 	bl	8006b1e <USB_WritePMA>
 800568e:	e3ee      	b.n	8005e6e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	785b      	ldrb	r3, [r3, #1]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d177      	bne.n	8005790 <USB_EPStartXfer+0x650>
 80056a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80056ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	461a      	mov	r2, r3
 80056be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056c0:	4413      	add	r3, r2
 80056c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80056c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	011a      	lsls	r2, r3, #4
 80056d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056d4:	4413      	add	r3, r2
 80056d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056da:	647b      	str	r3, [r7, #68]	; 0x44
 80056dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ea:	801a      	strh	r2, [r3, #0]
 80056ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056f0:	2b3e      	cmp	r3, #62	; 0x3e
 80056f2:	d921      	bls.n	8005738 <USB_EPStartXfer+0x5f8>
 80056f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056f8:	095b      	lsrs	r3, r3, #5
 80056fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005702:	f003 031f 	and.w	r3, r3, #31
 8005706:	2b00      	cmp	r3, #0
 8005708:	d104      	bne.n	8005714 <USB_EPStartXfer+0x5d4>
 800570a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800570e:	3b01      	subs	r3, #1
 8005710:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	b29a      	uxth	r2, r3
 800571a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800571e:	b29b      	uxth	r3, r3
 8005720:	029b      	lsls	r3, r3, #10
 8005722:	b29b      	uxth	r3, r3
 8005724:	4313      	orrs	r3, r2
 8005726:	b29b      	uxth	r3, r3
 8005728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800572c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005730:	b29a      	uxth	r2, r3
 8005732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005734:	801a      	strh	r2, [r3, #0]
 8005736:	e056      	b.n	80057e6 <USB_EPStartXfer+0x6a6>
 8005738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <USB_EPStartXfer+0x616>
 8005740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005742:	881b      	ldrh	r3, [r3, #0]
 8005744:	b29b      	uxth	r3, r3
 8005746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800574a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800574e:	b29a      	uxth	r2, r3
 8005750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005752:	801a      	strh	r2, [r3, #0]
 8005754:	e047      	b.n	80057e6 <USB_EPStartXfer+0x6a6>
 8005756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800575a:	085b      	lsrs	r3, r3, #1
 800575c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b00      	cmp	r3, #0
 800576a:	d004      	beq.n	8005776 <USB_EPStartXfer+0x636>
 800576c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005770:	3301      	adds	r3, #1
 8005772:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	b29a      	uxth	r2, r3
 800577c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005780:	b29b      	uxth	r3, r3
 8005782:	029b      	lsls	r3, r3, #10
 8005784:	b29b      	uxth	r3, r3
 8005786:	4313      	orrs	r3, r2
 8005788:	b29a      	uxth	r2, r3
 800578a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800578c:	801a      	strh	r2, [r3, #0]
 800578e:	e02a      	b.n	80057e6 <USB_EPStartXfer+0x6a6>
 8005790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	785b      	ldrb	r3, [r3, #1]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d122      	bne.n	80057e6 <USB_EPStartXfer+0x6a6>
 80057a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	653b      	str	r3, [r7, #80]	; 0x50
 80057ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	461a      	mov	r2, r3
 80057be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057c0:	4413      	add	r3, r2
 80057c2:	653b      	str	r3, [r7, #80]	; 0x50
 80057c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	011a      	lsls	r2, r3, #4
 80057d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057d4:	4413      	add	r3, r2
 80057d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80057e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	891b      	ldrh	r3, [r3, #8]
 80057f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6959      	ldr	r1, [r3, #20]
 8005802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005806:	b29b      	uxth	r3, r3
 8005808:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800580c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005810:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005814:	6800      	ldr	r0, [r0, #0]
 8005816:	f001 f982 	bl	8006b1e <USB_WritePMA>
            ep->xfer_buff += len;
 800581a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800581e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695a      	ldr	r2, [r3, #20]
 8005826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800582a:	441a      	add	r2, r3
 800582c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800583c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6a1a      	ldr	r2, [r3, #32]
 8005844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005848:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	429a      	cmp	r2, r3
 8005852:	d90f      	bls.n	8005874 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6a1a      	ldr	r2, [r3, #32]
 8005860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005864:	1ad2      	subs	r2, r2, r3
 8005866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800586a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	621a      	str	r2, [r3, #32]
 8005872:	e00e      	b.n	8005892 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2200      	movs	r2, #0
 8005890:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005896:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	643b      	str	r3, [r7, #64]	; 0x40
 800589e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	785b      	ldrb	r3, [r3, #1]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d177      	bne.n	800599e <USB_EPStartXfer+0x85e>
 80058ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80058ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	461a      	mov	r2, r3
 80058cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ce:	4413      	add	r3, r2
 80058d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80058d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	011a      	lsls	r2, r3, #4
 80058e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e2:	4413      	add	r3, r2
 80058e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058e8:	637b      	str	r3, [r7, #52]	; 0x34
 80058ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f8:	801a      	strh	r2, [r3, #0]
 80058fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058fe:	2b3e      	cmp	r3, #62	; 0x3e
 8005900:	d921      	bls.n	8005946 <USB_EPStartXfer+0x806>
 8005902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005906:	095b      	lsrs	r3, r3, #5
 8005908:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800590c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005910:	f003 031f 	and.w	r3, r3, #31
 8005914:	2b00      	cmp	r3, #0
 8005916:	d104      	bne.n	8005922 <USB_EPStartXfer+0x7e2>
 8005918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800591c:	3b01      	subs	r3, #1
 800591e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	b29a      	uxth	r2, r3
 8005928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800592c:	b29b      	uxth	r3, r3
 800592e:	029b      	lsls	r3, r3, #10
 8005930:	b29b      	uxth	r3, r3
 8005932:	4313      	orrs	r3, r2
 8005934:	b29b      	uxth	r3, r3
 8005936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800593a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800593e:	b29a      	uxth	r2, r3
 8005940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005942:	801a      	strh	r2, [r3, #0]
 8005944:	e050      	b.n	80059e8 <USB_EPStartXfer+0x8a8>
 8005946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10a      	bne.n	8005964 <USB_EPStartXfer+0x824>
 800594e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	b29b      	uxth	r3, r3
 8005954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800595c:	b29a      	uxth	r2, r3
 800595e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005960:	801a      	strh	r2, [r3, #0]
 8005962:	e041      	b.n	80059e8 <USB_EPStartXfer+0x8a8>
 8005964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005968:	085b      	lsrs	r3, r3, #1
 800596a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800596e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	d004      	beq.n	8005984 <USB_EPStartXfer+0x844>
 800597a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597e:	3301      	adds	r3, #1
 8005980:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	b29a      	uxth	r2, r3
 800598a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800598e:	b29b      	uxth	r3, r3
 8005990:	029b      	lsls	r3, r3, #10
 8005992:	b29b      	uxth	r3, r3
 8005994:	4313      	orrs	r3, r2
 8005996:	b29a      	uxth	r2, r3
 8005998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599a:	801a      	strh	r2, [r3, #0]
 800599c:	e024      	b.n	80059e8 <USB_EPStartXfer+0x8a8>
 800599e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	785b      	ldrb	r3, [r3, #1]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d11c      	bne.n	80059e8 <USB_EPStartXfer+0x8a8>
 80059ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059bc:	b29b      	uxth	r3, r3
 80059be:	461a      	mov	r2, r3
 80059c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059c2:	4413      	add	r3, r2
 80059c4:	643b      	str	r3, [r7, #64]	; 0x40
 80059c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	011a      	lsls	r2, r3, #4
 80059d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059d6:	4413      	add	r3, r2
 80059d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80059e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	895b      	ldrh	r3, [r3, #10]
 80059f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6959      	ldr	r1, [r3, #20]
 8005a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005a0e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005a12:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005a16:	6800      	ldr	r0, [r0, #0]
 8005a18:	f001 f881 	bl	8006b1e <USB_WritePMA>
 8005a1c:	e227      	b.n	8005e6e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a54:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	441a      	add	r2, r3
 8005a72:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005aaa:	4413      	add	r3, r2
 8005aac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	011a      	lsls	r2, r3, #4
 8005abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005abe:	4413      	add	r3, r2
 8005ac0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ac4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ace:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	891b      	ldrh	r3, [r3, #8]
 8005adc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6959      	ldr	r1, [r3, #20]
 8005aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005af6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005afa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005afe:	6800      	ldr	r0, [r0, #0]
 8005b00:	f001 f80d 	bl	8006b1e <USB_WritePMA>
 8005b04:	e1b3      	b.n	8005e6e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6a1a      	ldr	r2, [r3, #32]
 8005b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b16:	1ad2      	subs	r2, r2, r3
 8005b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 80c6 	beq.w	8005cd8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	673b      	str	r3, [r7, #112]	; 0x70
 8005b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	785b      	ldrb	r3, [r3, #1]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d177      	bne.n	8005c58 <USB_EPStartXfer+0xb18>
 8005b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	461a      	mov	r2, r3
 8005b86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b88:	4413      	add	r3, r2
 8005b8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	011a      	lsls	r2, r3, #4
 8005b9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ba2:	667b      	str	r3, [r7, #100]	; 0x64
 8005ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bb2:	801a      	strh	r2, [r3, #0]
 8005bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bb8:	2b3e      	cmp	r3, #62	; 0x3e
 8005bba:	d921      	bls.n	8005c00 <USB_EPStartXfer+0xac0>
 8005bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bc0:	095b      	lsrs	r3, r3, #5
 8005bc2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bca:	f003 031f 	and.w	r3, r3, #31
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d104      	bne.n	8005bdc <USB_EPStartXfer+0xa9c>
 8005bd2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bde:	881b      	ldrh	r3, [r3, #0]
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	029b      	lsls	r3, r3, #10
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	4313      	orrs	r3, r2
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bfc:	801a      	strh	r2, [r3, #0]
 8005bfe:	e050      	b.n	8005ca2 <USB_EPStartXfer+0xb62>
 8005c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10a      	bne.n	8005c1e <USB_EPStartXfer+0xade>
 8005c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c1a:	801a      	strh	r2, [r3, #0]
 8005c1c:	e041      	b.n	8005ca2 <USB_EPStartXfer+0xb62>
 8005c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c22:	085b      	lsrs	r3, r3, #1
 8005c24:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d004      	beq.n	8005c3e <USB_EPStartXfer+0xafe>
 8005c34:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c38:	3301      	adds	r3, #1
 8005c3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	029b      	lsls	r3, r3, #10
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c54:	801a      	strh	r2, [r3, #0]
 8005c56:	e024      	b.n	8005ca2 <USB_EPStartXfer+0xb62>
 8005c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	785b      	ldrb	r3, [r3, #1]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d11c      	bne.n	8005ca2 <USB_EPStartXfer+0xb62>
 8005c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	461a      	mov	r2, r3
 8005c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c7c:	4413      	add	r3, r2
 8005c7e:	673b      	str	r3, [r7, #112]	; 0x70
 8005c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	011a      	lsls	r2, r3, #4
 8005c8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c90:	4413      	add	r3, r2
 8005c92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	895b      	ldrh	r3, [r3, #10]
 8005cae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6959      	ldr	r1, [r3, #20]
 8005cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005cc8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ccc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005cd0:	6800      	ldr	r0, [r0, #0]
 8005cd2:	f000 ff24 	bl	8006b1e <USB_WritePMA>
 8005cd6:	e0ca      	b.n	8005e6e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	785b      	ldrb	r3, [r3, #1]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d177      	bne.n	8005dd8 <USB_EPStartXfer+0xc98>
 8005ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	461a      	mov	r2, r3
 8005d06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d08:	4413      	add	r3, r2
 8005d0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	011a      	lsls	r2, r3, #4
 8005d1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d22:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d32:	801a      	strh	r2, [r3, #0]
 8005d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d38:	2b3e      	cmp	r3, #62	; 0x3e
 8005d3a:	d921      	bls.n	8005d80 <USB_EPStartXfer+0xc40>
 8005d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d40:	095b      	lsrs	r3, r3, #5
 8005d42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d4a:	f003 031f 	and.w	r3, r3, #31
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d104      	bne.n	8005d5c <USB_EPStartXfer+0xc1c>
 8005d52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d56:	3b01      	subs	r3, #1
 8005d58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	029b      	lsls	r3, r3, #10
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d7c:	801a      	strh	r2, [r3, #0]
 8005d7e:	e05c      	b.n	8005e3a <USB_EPStartXfer+0xcfa>
 8005d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10a      	bne.n	8005d9e <USB_EPStartXfer+0xc5e>
 8005d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d9a:	801a      	strh	r2, [r3, #0]
 8005d9c:	e04d      	b.n	8005e3a <USB_EPStartXfer+0xcfa>
 8005d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005da2:	085b      	lsrs	r3, r3, #1
 8005da4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d004      	beq.n	8005dbe <USB_EPStartXfer+0xc7e>
 8005db4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005db8:	3301      	adds	r3, #1
 8005dba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005dbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	029b      	lsls	r3, r3, #10
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dd4:	801a      	strh	r2, [r3, #0]
 8005dd6:	e030      	b.n	8005e3a <USB_EPStartXfer+0xcfa>
 8005dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	785b      	ldrb	r3, [r3, #1]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d128      	bne.n	8005e3a <USB_EPStartXfer+0xcfa>
 8005de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	461a      	mov	r2, r3
 8005e08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	011a      	lsls	r2, r3, #4
 8005e20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e24:	4413      	add	r3, r2
 8005e26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e38:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	891b      	ldrh	r3, [r3, #8]
 8005e46:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6959      	ldr	r1, [r3, #20]
 8005e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005e60:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005e64:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005e68:	6800      	ldr	r0, [r0, #0]
 8005e6a:	f000 fe58 	bl	8006b1e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	881b      	ldrh	r3, [r3, #0]
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e94:	817b      	strh	r3, [r7, #10]
 8005e96:	897b      	ldrh	r3, [r7, #10]
 8005e98:	f083 0310 	eor.w	r3, r3, #16
 8005e9c:	817b      	strh	r3, [r7, #10]
 8005e9e:	897b      	ldrh	r3, [r7, #10]
 8005ea0:	f083 0320 	eor.w	r3, r3, #32
 8005ea4:	817b      	strh	r3, [r7, #10]
 8005ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	441a      	add	r2, r3
 8005ec0:	897b      	ldrh	r3, [r7, #10]
 8005ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	8013      	strh	r3, [r2, #0]
 8005ed6:	f000 bcde 	b.w	8006896 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	7b1b      	ldrb	r3, [r3, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f040 80bb 	bne.w	8006062 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	699a      	ldr	r2, [r3, #24]
 8005ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d917      	bls.n	8005f38 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	699a      	ldr	r2, [r3, #24]
 8005f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f28:	1ad2      	subs	r2, r2, r3
 8005f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	619a      	str	r2, [r3, #24]
 8005f36:	e00e      	b.n	8005f56 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2200      	movs	r2, #0
 8005f54:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	461a      	mov	r2, r3
 8005f76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	011a      	lsls	r2, r3, #4
 8005f8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f92:	4413      	add	r3, r2
 8005f94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fae:	801a      	strh	r2, [r3, #0]
 8005fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fb4:	2b3e      	cmp	r3, #62	; 0x3e
 8005fb6:	d924      	bls.n	8006002 <USB_EPStartXfer+0xec2>
 8005fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fbc:	095b      	lsrs	r3, r3, #5
 8005fbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc6:	f003 031f 	and.w	r3, r3, #31
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d104      	bne.n	8005fd8 <USB_EPStartXfer+0xe98>
 8005fce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fdc:	881b      	ldrh	r3, [r3, #0]
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	029b      	lsls	r3, r3, #10
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	4313      	orrs	r3, r2
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ffc:	801a      	strh	r2, [r3, #0]
 8005ffe:	f000 bc10 	b.w	8006822 <USB_EPStartXfer+0x16e2>
 8006002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10c      	bne.n	8006024 <USB_EPStartXfer+0xee4>
 800600a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	b29b      	uxth	r3, r3
 8006012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800601a:	b29a      	uxth	r2, r3
 800601c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006020:	801a      	strh	r2, [r3, #0]
 8006022:	e3fe      	b.n	8006822 <USB_EPStartXfer+0x16e2>
 8006024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006028:	085b      	lsrs	r3, r3, #1
 800602a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800602e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	d004      	beq.n	8006044 <USB_EPStartXfer+0xf04>
 800603a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800603e:	3301      	adds	r3, #1
 8006040:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006044:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	b29a      	uxth	r2, r3
 800604c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006050:	b29b      	uxth	r3, r3
 8006052:	029b      	lsls	r3, r3, #10
 8006054:	b29b      	uxth	r3, r3
 8006056:	4313      	orrs	r3, r2
 8006058:	b29a      	uxth	r2, r3
 800605a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800605e:	801a      	strh	r2, [r3, #0]
 8006060:	e3df      	b.n	8006822 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	78db      	ldrb	r3, [r3, #3]
 800606e:	2b02      	cmp	r3, #2
 8006070:	f040 8218 	bne.w	80064a4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	785b      	ldrb	r3, [r3, #1]
 8006080:	2b00      	cmp	r3, #0
 8006082:	f040 809d 	bne.w	80061c0 <USB_EPStartXfer+0x1080>
 8006086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800608a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006098:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	461a      	mov	r2, r3
 80060a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060aa:	4413      	add	r3, r2
 80060ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	011a      	lsls	r2, r3, #4
 80060be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060c2:	4413      	add	r3, r2
 80060c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060d8:	b29a      	uxth	r2, r3
 80060da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060de:	801a      	strh	r2, [r3, #0]
 80060e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	2b3e      	cmp	r3, #62	; 0x3e
 80060ee:	d92b      	bls.n	8006148 <USB_EPStartXfer+0x1008>
 80060f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	095b      	lsrs	r3, r3, #5
 80060fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f003 031f 	and.w	r3, r3, #31
 8006112:	2b00      	cmp	r3, #0
 8006114:	d104      	bne.n	8006120 <USB_EPStartXfer+0xfe0>
 8006116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800611a:	3b01      	subs	r3, #1
 800611c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006120:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	b29a      	uxth	r2, r3
 8006128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612c:	b29b      	uxth	r3, r3
 800612e:	029b      	lsls	r3, r3, #10
 8006130:	b29b      	uxth	r3, r3
 8006132:	4313      	orrs	r3, r2
 8006134:	b29b      	uxth	r3, r3
 8006136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800613a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800613e:	b29a      	uxth	r2, r3
 8006140:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006144:	801a      	strh	r2, [r3, #0]
 8006146:	e070      	b.n	800622a <USB_EPStartXfer+0x10ea>
 8006148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800614c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10c      	bne.n	8006172 <USB_EPStartXfer+0x1032>
 8006158:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800615c:	881b      	ldrh	r3, [r3, #0]
 800615e:	b29b      	uxth	r3, r3
 8006160:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006164:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006168:	b29a      	uxth	r2, r3
 800616a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800616e:	801a      	strh	r2, [r3, #0]
 8006170:	e05b      	b.n	800622a <USB_EPStartXfer+0x10ea>
 8006172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	085b      	lsrs	r3, r3, #1
 8006180:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	d004      	beq.n	80061a2 <USB_EPStartXfer+0x1062>
 8006198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800619c:	3301      	adds	r3, #1
 800619e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	029b      	lsls	r3, r3, #10
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	4313      	orrs	r3, r2
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061bc:	801a      	strh	r2, [r3, #0]
 80061be:	e034      	b.n	800622a <USB_EPStartXfer+0x10ea>
 80061c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	785b      	ldrb	r3, [r3, #1]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d12c      	bne.n	800622a <USB_EPStartXfer+0x10ea>
 80061d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	461a      	mov	r2, r3
 80061f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061f4:	4413      	add	r3, r2
 80061f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	011a      	lsls	r2, r3, #4
 8006208:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800620c:	4413      	add	r3, r2
 800620e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006212:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800621a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	b29a      	uxth	r2, r3
 8006224:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006228:	801a      	strh	r2, [r3, #0]
 800622a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800622e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800623c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	785b      	ldrb	r3, [r3, #1]
 8006244:	2b00      	cmp	r3, #0
 8006246:	f040 809d 	bne.w	8006384 <USB_EPStartXfer+0x1244>
 800624a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800624e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800625c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006266:	b29b      	uxth	r3, r3
 8006268:	461a      	mov	r2, r3
 800626a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800626e:	4413      	add	r3, r2
 8006270:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	011a      	lsls	r2, r3, #4
 8006282:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006286:	4413      	add	r3, r2
 8006288:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800628c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006290:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	b29b      	uxth	r3, r3
 8006298:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800629c:	b29a      	uxth	r2, r3
 800629e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062a2:	801a      	strh	r2, [r3, #0]
 80062a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	2b3e      	cmp	r3, #62	; 0x3e
 80062b2:	d92b      	bls.n	800630c <USB_EPStartXfer+0x11cc>
 80062b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	095b      	lsrs	r3, r3, #5
 80062c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	f003 031f 	and.w	r3, r3, #31
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d104      	bne.n	80062e4 <USB_EPStartXfer+0x11a4>
 80062da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062de:	3b01      	subs	r3, #1
 80062e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	029b      	lsls	r3, r3, #10
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	4313      	orrs	r3, r2
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006302:	b29a      	uxth	r2, r3
 8006304:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006308:	801a      	strh	r2, [r3, #0]
 800630a:	e069      	b.n	80063e0 <USB_EPStartXfer+0x12a0>
 800630c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10c      	bne.n	8006336 <USB_EPStartXfer+0x11f6>
 800631c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	b29b      	uxth	r3, r3
 8006324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800632c:	b29a      	uxth	r2, r3
 800632e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006332:	801a      	strh	r2, [r3, #0]
 8006334:	e054      	b.n	80063e0 <USB_EPStartXfer+0x12a0>
 8006336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800633a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	085b      	lsrs	r3, r3, #1
 8006344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800634c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	d004      	beq.n	8006366 <USB_EPStartXfer+0x1226>
 800635c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006360:	3301      	adds	r3, #1
 8006362:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006366:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	b29a      	uxth	r2, r3
 800636e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006372:	b29b      	uxth	r3, r3
 8006374:	029b      	lsls	r3, r3, #10
 8006376:	b29b      	uxth	r3, r3
 8006378:	4313      	orrs	r3, r2
 800637a:	b29a      	uxth	r2, r3
 800637c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006380:	801a      	strh	r2, [r3, #0]
 8006382:	e02d      	b.n	80063e0 <USB_EPStartXfer+0x12a0>
 8006384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	785b      	ldrb	r3, [r3, #1]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d125      	bne.n	80063e0 <USB_EPStartXfer+0x12a0>
 8006394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006398:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	461a      	mov	r2, r3
 80063a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80063aa:	4413      	add	r3, r2
 80063ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80063b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	011a      	lsls	r2, r3, #4
 80063be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80063c2:	4413      	add	r3, r2
 80063c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	b29a      	uxth	r2, r3
 80063da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063de:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80063e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	69db      	ldr	r3, [r3, #28]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 8218 	beq.w	8006822 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80063f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006412:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d005      	beq.n	800642a <USB_EPStartXfer+0x12ea>
 800641e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10d      	bne.n	8006446 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800642a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800642e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006432:	2b00      	cmp	r3, #0
 8006434:	f040 81f5 	bne.w	8006822 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006438:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800643c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006440:	2b00      	cmp	r3, #0
 8006442:	f040 81ee 	bne.w	8006822 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800644a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	881b      	ldrh	r3, [r3, #0]
 8006462:	b29b      	uxth	r3, r3
 8006464:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006474:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800647e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	441a      	add	r2, r3
 800648a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800648e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800649a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800649e:	b29b      	uxth	r3, r3
 80064a0:	8013      	strh	r3, [r2, #0]
 80064a2:	e1be      	b.n	8006822 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80064a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	78db      	ldrb	r3, [r3, #3]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	f040 81b4 	bne.w	800681e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80064b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699a      	ldr	r2, [r3, #24]
 80064c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d917      	bls.n	8006502 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80064d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80064e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699a      	ldr	r2, [r3, #24]
 80064ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f2:	1ad2      	subs	r2, r2, r3
 80064f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	619a      	str	r2, [r3, #24]
 8006500:	e00e      	b.n	8006520 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2200      	movs	r2, #0
 800651e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	785b      	ldrb	r3, [r3, #1]
 800652c:	2b00      	cmp	r3, #0
 800652e:	f040 8085 	bne.w	800663c <USB_EPStartXfer+0x14fc>
 8006532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006536:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006544:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800654e:	b29b      	uxth	r3, r3
 8006550:	461a      	mov	r2, r3
 8006552:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006556:	4413      	add	r3, r2
 8006558:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800655c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	011a      	lsls	r2, r3, #4
 800656a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800656e:	4413      	add	r3, r2
 8006570:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006574:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006578:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	b29b      	uxth	r3, r3
 8006580:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006584:	b29a      	uxth	r2, r3
 8006586:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800658a:	801a      	strh	r2, [r3, #0]
 800658c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006590:	2b3e      	cmp	r3, #62	; 0x3e
 8006592:	d923      	bls.n	80065dc <USB_EPStartXfer+0x149c>
 8006594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006598:	095b      	lsrs	r3, r3, #5
 800659a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800659e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a2:	f003 031f 	and.w	r3, r3, #31
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d104      	bne.n	80065b4 <USB_EPStartXfer+0x1474>
 80065aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ae:	3b01      	subs	r3, #1
 80065b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065b8:	881b      	ldrh	r3, [r3, #0]
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	029b      	lsls	r3, r3, #10
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	4313      	orrs	r3, r2
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065d8:	801a      	strh	r2, [r3, #0]
 80065da:	e060      	b.n	800669e <USB_EPStartXfer+0x155e>
 80065dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10c      	bne.n	80065fe <USB_EPStartXfer+0x14be>
 80065e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065fa:	801a      	strh	r2, [r3, #0]
 80065fc:	e04f      	b.n	800669e <USB_EPStartXfer+0x155e>
 80065fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006602:	085b      	lsrs	r3, r3, #1
 8006604:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b00      	cmp	r3, #0
 8006612:	d004      	beq.n	800661e <USB_EPStartXfer+0x14de>
 8006614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006618:	3301      	adds	r3, #1
 800661a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800661e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	b29a      	uxth	r2, r3
 8006626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800662a:	b29b      	uxth	r3, r3
 800662c:	029b      	lsls	r3, r3, #10
 800662e:	b29b      	uxth	r3, r3
 8006630:	4313      	orrs	r3, r2
 8006632:	b29a      	uxth	r2, r3
 8006634:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006638:	801a      	strh	r2, [r3, #0]
 800663a:	e030      	b.n	800669e <USB_EPStartXfer+0x155e>
 800663c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	785b      	ldrb	r3, [r3, #1]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d128      	bne.n	800669e <USB_EPStartXfer+0x155e>
 800664c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800665a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800665e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006668:	b29b      	uxth	r3, r3
 800666a:	461a      	mov	r2, r3
 800666c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006670:	4413      	add	r3, r2
 8006672:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800667a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	011a      	lsls	r2, r3, #4
 8006684:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006688:	4413      	add	r3, r2
 800668a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800668e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006696:	b29a      	uxth	r2, r3
 8006698:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800669c:	801a      	strh	r2, [r3, #0]
 800669e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	785b      	ldrb	r3, [r3, #1]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f040 8085 	bne.w	80067c8 <USB_EPStartXfer+0x1688>
 80066be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066da:	b29b      	uxth	r3, r3
 80066dc:	461a      	mov	r2, r3
 80066de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066e2:	4413      	add	r3, r2
 80066e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	011a      	lsls	r2, r3, #4
 80066f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066fa:	4413      	add	r3, r2
 80066fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006700:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006704:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	b29b      	uxth	r3, r3
 800670c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006710:	b29a      	uxth	r2, r3
 8006712:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006716:	801a      	strh	r2, [r3, #0]
 8006718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800671c:	2b3e      	cmp	r3, #62	; 0x3e
 800671e:	d923      	bls.n	8006768 <USB_EPStartXfer+0x1628>
 8006720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006724:	095b      	lsrs	r3, r3, #5
 8006726:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800672a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800672e:	f003 031f 	and.w	r3, r3, #31
 8006732:	2b00      	cmp	r3, #0
 8006734:	d104      	bne.n	8006740 <USB_EPStartXfer+0x1600>
 8006736:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800673a:	3b01      	subs	r3, #1
 800673c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006740:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	b29a      	uxth	r2, r3
 8006748:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800674c:	b29b      	uxth	r3, r3
 800674e:	029b      	lsls	r3, r3, #10
 8006750:	b29b      	uxth	r3, r3
 8006752:	4313      	orrs	r3, r2
 8006754:	b29b      	uxth	r3, r3
 8006756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800675a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800675e:	b29a      	uxth	r2, r3
 8006760:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006764:	801a      	strh	r2, [r3, #0]
 8006766:	e05c      	b.n	8006822 <USB_EPStartXfer+0x16e2>
 8006768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10c      	bne.n	800678a <USB_EPStartXfer+0x164a>
 8006770:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	b29b      	uxth	r3, r3
 8006778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800677c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006780:	b29a      	uxth	r2, r3
 8006782:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006786:	801a      	strh	r2, [r3, #0]
 8006788:	e04b      	b.n	8006822 <USB_EPStartXfer+0x16e2>
 800678a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800678e:	085b      	lsrs	r3, r3, #1
 8006790:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d004      	beq.n	80067aa <USB_EPStartXfer+0x166a>
 80067a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067a4:	3301      	adds	r3, #1
 80067a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	029b      	lsls	r3, r3, #10
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	4313      	orrs	r3, r2
 80067be:	b29a      	uxth	r2, r3
 80067c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067c4:	801a      	strh	r2, [r3, #0]
 80067c6:	e02c      	b.n	8006822 <USB_EPStartXfer+0x16e2>
 80067c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	785b      	ldrb	r3, [r3, #1]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d124      	bne.n	8006822 <USB_EPStartXfer+0x16e2>
 80067d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	461a      	mov	r2, r3
 80067ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067ee:	4413      	add	r3, r2
 80067f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	011a      	lsls	r2, r3, #4
 8006802:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006806:	4413      	add	r3, r2
 8006808:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800680c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006814:	b29a      	uxth	r2, r3
 8006816:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800681a:	801a      	strh	r2, [r3, #0]
 800681c:	e001      	b.n	8006822 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e03a      	b.n	8006898 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006826:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	b29b      	uxth	r3, r3
 8006840:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006848:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800684c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006850:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006854:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006858:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800685c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006860:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006868:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	441a      	add	r2, r3
 800687e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800688a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800688e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006892:	b29b      	uxth	r3, r3
 8006894:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b085      	sub	sp, #20
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	785b      	ldrb	r3, [r3, #1]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d020      	beq.n	80068f6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ca:	81bb      	strh	r3, [r7, #12]
 80068cc:	89bb      	ldrh	r3, [r7, #12]
 80068ce:	f083 0310 	eor.w	r3, r3, #16
 80068d2:	81bb      	strh	r3, [r7, #12]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	441a      	add	r2, r3
 80068de:	89bb      	ldrh	r3, [r7, #12]
 80068e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	8013      	strh	r3, [r2, #0]
 80068f4:	e01f      	b.n	8006936 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	b29b      	uxth	r3, r3
 8006904:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800690c:	81fb      	strh	r3, [r7, #14]
 800690e:	89fb      	ldrh	r3, [r7, #14]
 8006910:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006914:	81fb      	strh	r3, [r7, #14]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	441a      	add	r2, r3
 8006920:	89fb      	ldrh	r3, [r7, #14]
 8006922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800692a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800692e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006932:	b29b      	uxth	r3, r3
 8006934:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3714      	adds	r7, #20
 800693c:	46bd      	mov	sp, r7
 800693e:	bc80      	pop	{r7}
 8006940:	4770      	bx	lr

08006942 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006942:	b480      	push	{r7}
 8006944:	b087      	sub	sp, #28
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	7b1b      	ldrb	r3, [r3, #12]
 8006950:	2b00      	cmp	r3, #0
 8006952:	f040 809d 	bne.w	8006a90 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	785b      	ldrb	r3, [r3, #1]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d04c      	beq.n	80069f8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	823b      	strh	r3, [r7, #16]
 800696c:	8a3b      	ldrh	r3, [r7, #16]
 800696e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006972:	2b00      	cmp	r3, #0
 8006974:	d01b      	beq.n	80069ae <USB_EPClearStall+0x6c>
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4413      	add	r3, r2
 8006980:	881b      	ldrh	r3, [r3, #0]
 8006982:	b29b      	uxth	r3, r3
 8006984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800698c:	81fb      	strh	r3, [r7, #14]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	441a      	add	r2, r3
 8006998:	89fb      	ldrh	r3, [r7, #14]
 800699a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800699e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	78db      	ldrb	r3, [r3, #3]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d06c      	beq.n	8006a90 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4413      	add	r3, r2
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069cc:	81bb      	strh	r3, [r7, #12]
 80069ce:	89bb      	ldrh	r3, [r7, #12]
 80069d0:	f083 0320 	eor.w	r3, r3, #32
 80069d4:	81bb      	strh	r3, [r7, #12]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	441a      	add	r2, r3
 80069e0:	89bb      	ldrh	r3, [r7, #12]
 80069e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	8013      	strh	r3, [r2, #0]
 80069f6:	e04b      	b.n	8006a90 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	82fb      	strh	r3, [r7, #22]
 8006a06:	8afb      	ldrh	r3, [r7, #22]
 8006a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d01b      	beq.n	8006a48 <USB_EPClearStall+0x106>
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a26:	82bb      	strh	r3, [r7, #20]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	441a      	add	r2, r3
 8006a32:	8abb      	ldrh	r3, [r7, #20]
 8006a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5e:	827b      	strh	r3, [r7, #18]
 8006a60:	8a7b      	ldrh	r3, [r7, #18]
 8006a62:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a66:	827b      	strh	r3, [r7, #18]
 8006a68:	8a7b      	ldrh	r3, [r7, #18]
 8006a6a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a6e:	827b      	strh	r3, [r7, #18]
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	441a      	add	r2, r3
 8006a7a:	8a7b      	ldrh	r3, [r7, #18]
 8006a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	371c      	adds	r7, #28
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bc80      	pop	{r7}
 8006a9a:	4770      	bx	lr

08006a9c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006aa8:	78fb      	ldrb	r3, [r7, #3]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d103      	bne.n	8006ab6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2280      	movs	r2, #128	; 0x80
 8006ab2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bc80      	pop	{r7}
 8006ac0:	4770      	bx	lr

08006ac2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b083      	sub	sp, #12
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bc80      	pop	{r7}
 8006ad4:	4770      	bx	lr

08006ad6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b083      	sub	sp, #12
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bc80      	pop	{r7}
 8006ae8:	4770      	bx	lr

08006aea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b085      	sub	sp, #20
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006afc:	68fb      	ldr	r3, [r7, #12]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bc80      	pop	{r7}
 8006b06:	4770      	bx	lr

08006b08 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bc80      	pop	{r7}
 8006b1c:	4770      	bx	lr

08006b1e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b08b      	sub	sp, #44	; 0x2c
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	60f8      	str	r0, [r7, #12]
 8006b26:	60b9      	str	r1, [r7, #8]
 8006b28:	4611      	mov	r1, r2
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	80fb      	strh	r3, [r7, #6]
 8006b30:	4613      	mov	r3, r2
 8006b32:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006b34:	88bb      	ldrh	r3, [r7, #4]
 8006b36:	3301      	adds	r3, #1
 8006b38:	085b      	lsrs	r3, r3, #1
 8006b3a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b44:	88fb      	ldrh	r3, [r7, #6]
 8006b46:	005a      	lsls	r2, r3, #1
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b50:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	627b      	str	r3, [r7, #36]	; 0x24
 8006b56:	e01e      	b.n	8006b96 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	3301      	adds	r3, #1
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	021b      	lsls	r3, r3, #8
 8006b66:	b21a      	sxth	r2, r3
 8006b68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	b21b      	sxth	r3, r3
 8006b70:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006b72:	6a3b      	ldr	r3, [r7, #32]
 8006b74:	8a7a      	ldrh	r2, [r7, #18]
 8006b76:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	3302      	adds	r3, #2
 8006b7c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b7e:	6a3b      	ldr	r3, [r7, #32]
 8006b80:	3302      	adds	r3, #2
 8006b82:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	3301      	adds	r3, #1
 8006b88:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	3b01      	subs	r3, #1
 8006b94:	627b      	str	r3, [r7, #36]	; 0x24
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1dd      	bne.n	8006b58 <USB_WritePMA+0x3a>
  }
}
 8006b9c:	bf00      	nop
 8006b9e:	bf00      	nop
 8006ba0:	372c      	adds	r7, #44	; 0x2c
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bc80      	pop	{r7}
 8006ba6:	4770      	bx	lr

08006ba8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b08b      	sub	sp, #44	; 0x2c
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	80fb      	strh	r3, [r7, #6]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006bbe:	88bb      	ldrh	r3, [r7, #4]
 8006bc0:	085b      	lsrs	r3, r3, #1
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006bce:	88fb      	ldrh	r3, [r7, #6]
 8006bd0:	005a      	lsls	r2, r3, #1
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bda:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	627b      	str	r3, [r7, #36]	; 0x24
 8006be0:	e01b      	b.n	8006c1a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	881b      	ldrh	r3, [r3, #0]
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	3302      	adds	r3, #2
 8006bee:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	0a1b      	lsrs	r3, r3, #8
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	3302      	adds	r3, #2
 8006c12:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	3b01      	subs	r3, #1
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1e0      	bne.n	8006be2 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006c20:	88bb      	ldrh	r3, [r7, #4]
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d007      	beq.n	8006c3c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	701a      	strb	r2, [r3, #0]
  }
}
 8006c3c:	bf00      	nop
 8006c3e:	372c      	adds	r7, #44	; 0x2c
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bc80      	pop	{r7}
 8006c44:	4770      	bx	lr

08006c46 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b084      	sub	sp, #16
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	460b      	mov	r3, r1
 8006c50:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006c52:	2300      	movs	r3, #0
 8006c54:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	7c1b      	ldrb	r3, [r3, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d115      	bne.n	8006c8a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c62:	2202      	movs	r2, #2
 8006c64:	2181      	movs	r1, #129	; 0x81
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f001 fe9d 	bl	80089a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c76:	2202      	movs	r2, #2
 8006c78:	2101      	movs	r1, #1
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f001 fe93 	bl	80089a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006c88:	e012      	b.n	8006cb0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c8a:	2340      	movs	r3, #64	; 0x40
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	2181      	movs	r1, #129	; 0x81
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f001 fe88 	bl	80089a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c9c:	2340      	movs	r3, #64	; 0x40
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f001 fe7f 	bl	80089a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006cb0:	2308      	movs	r3, #8
 8006cb2:	2203      	movs	r2, #3
 8006cb4:	2182      	movs	r1, #130	; 0x82
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f001 fe75 	bl	80089a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006cc2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006cc6:	f001 ff95 	bl	8008bf4 <USBD_static_malloc>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d102      	bne.n	8006ce2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	73fb      	strb	r3, [r7, #15]
 8006ce0:	e026      	b.n	8006d30 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	7c1b      	ldrb	r3, [r3, #16]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d109      	bne.n	8006d20 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d16:	2101      	movs	r1, #1
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f001 ff35 	bl	8008b88 <USBD_LL_PrepareReceive>
 8006d1e:	e007      	b.n	8006d30 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d26:	2340      	movs	r3, #64	; 0x40
 8006d28:	2101      	movs	r1, #1
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f001 ff2c 	bl	8008b88 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b084      	sub	sp, #16
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	460b      	mov	r3, r1
 8006d44:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006d4a:	2181      	movs	r1, #129	; 0x81
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f001 fe50 	bl	80089f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006d58:	2101      	movs	r1, #1
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f001 fe49 	bl	80089f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006d68:	2182      	movs	r1, #130	; 0x82
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f001 fe41 	bl	80089f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00e      	beq.n	8006d9e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d90:	4618      	mov	r0, r3
 8006d92:	f001 ff3b 	bl	8008c0c <USBD_static_free>
    pdev->pClassData = NULL;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d039      	beq.n	8006e46 <USBD_CDC_Setup+0x9e>
 8006dd2:	2b20      	cmp	r3, #32
 8006dd4:	d17f      	bne.n	8006ed6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	88db      	ldrh	r3, [r3, #6]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d029      	beq.n	8006e32 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	b25b      	sxtb	r3, r3
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	da11      	bge.n	8006e0c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006df4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	88d2      	ldrh	r2, [r2, #6]
 8006dfa:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006dfc:	6939      	ldr	r1, [r7, #16]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	88db      	ldrh	r3, [r3, #6]
 8006e02:	461a      	mov	r2, r3
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 fa0a 	bl	800821e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006e0a:	e06b      	b.n	8006ee4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	785a      	ldrb	r2, [r3, #1]
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	88db      	ldrh	r3, [r3, #6]
 8006e1a:	b2da      	uxtb	r2, r3
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006e22:	6939      	ldr	r1, [r7, #16]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	88db      	ldrh	r3, [r3, #6]
 8006e28:	461a      	mov	r2, r3
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f001 fa25 	bl	800827a <USBD_CtlPrepareRx>
      break;
 8006e30:	e058      	b.n	8006ee4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	7850      	ldrb	r0, [r2, #1]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	6839      	ldr	r1, [r7, #0]
 8006e42:	4798      	blx	r3
      break;
 8006e44:	e04e      	b.n	8006ee4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	785b      	ldrb	r3, [r3, #1]
 8006e4a:	2b0b      	cmp	r3, #11
 8006e4c:	d02e      	beq.n	8006eac <USBD_CDC_Setup+0x104>
 8006e4e:	2b0b      	cmp	r3, #11
 8006e50:	dc38      	bgt.n	8006ec4 <USBD_CDC_Setup+0x11c>
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d002      	beq.n	8006e5c <USBD_CDC_Setup+0xb4>
 8006e56:	2b0a      	cmp	r3, #10
 8006e58:	d014      	beq.n	8006e84 <USBD_CDC_Setup+0xdc>
 8006e5a:	e033      	b.n	8006ec4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d107      	bne.n	8006e76 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006e66:	f107 030c 	add.w	r3, r7, #12
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f001 f9d5 	bl	800821e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e74:	e02e      	b.n	8006ed4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006e76:	6839      	ldr	r1, [r7, #0]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f001 f966 	bl	800814a <USBD_CtlError>
            ret = USBD_FAIL;
 8006e7e:	2302      	movs	r3, #2
 8006e80:	75fb      	strb	r3, [r7, #23]
          break;
 8006e82:	e027      	b.n	8006ed4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d107      	bne.n	8006e9e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e8e:	f107 030f 	add.w	r3, r7, #15
 8006e92:	2201      	movs	r2, #1
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f001 f9c1 	bl	800821e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e9c:	e01a      	b.n	8006ed4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006e9e:	6839      	ldr	r1, [r7, #0]
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f001 f952 	bl	800814a <USBD_CtlError>
            ret = USBD_FAIL;
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	75fb      	strb	r3, [r7, #23]
          break;
 8006eaa:	e013      	b.n	8006ed4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	d00d      	beq.n	8006ed2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006eb6:	6839      	ldr	r1, [r7, #0]
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f001 f946 	bl	800814a <USBD_CtlError>
            ret = USBD_FAIL;
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ec2:	e006      	b.n	8006ed2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f001 f93f 	bl	800814a <USBD_CtlError>
          ret = USBD_FAIL;
 8006ecc:	2302      	movs	r3, #2
 8006ece:	75fb      	strb	r3, [r7, #23]
          break;
 8006ed0:	e000      	b.n	8006ed4 <USBD_CDC_Setup+0x12c>
          break;
 8006ed2:	bf00      	nop
      }
      break;
 8006ed4:	e006      	b.n	8006ee4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006ed6:	6839      	ldr	r1, [r7, #0]
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f001 f936 	bl	800814a <USBD_CtlError>
      ret = USBD_FAIL;
 8006ede:	2302      	movs	r3, #2
 8006ee0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ee2:	bf00      	nop
  }

  return ret;
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3718      	adds	r7, #24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b084      	sub	sp, #16
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f00:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f08:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d03a      	beq.n	8006f8a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006f14:	78fa      	ldrb	r2, [r7, #3]
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4413      	add	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	440b      	add	r3, r1
 8006f22:	331c      	adds	r3, #28
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d029      	beq.n	8006f7e <USBD_CDC_DataIn+0x90>
 8006f2a:	78fa      	ldrb	r2, [r7, #3]
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	440b      	add	r3, r1
 8006f38:	331c      	adds	r3, #28
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	78f9      	ldrb	r1, [r7, #3]
 8006f3e:	68b8      	ldr	r0, [r7, #8]
 8006f40:	460b      	mov	r3, r1
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	440b      	add	r3, r1
 8006f46:	00db      	lsls	r3, r3, #3
 8006f48:	4403      	add	r3, r0
 8006f4a:	3338      	adds	r3, #56	; 0x38
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f52:	fb01 f303 	mul.w	r3, r1, r3
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d110      	bne.n	8006f7e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006f5c:	78fa      	ldrb	r2, [r7, #3]
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	4613      	mov	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	440b      	add	r3, r1
 8006f6a:	331c      	adds	r3, #28
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f70:	78f9      	ldrb	r1, [r7, #3]
 8006f72:	2300      	movs	r3, #0
 8006f74:	2200      	movs	r2, #0
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f001 fde3 	bl	8008b42 <USBD_LL_Transmit>
 8006f7c:	e003      	b.n	8006f86 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	e000      	b.n	8006f8c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006f8a:	2302      	movs	r3, #2
  }
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006fa8:	78fb      	ldrb	r3, [r7, #3]
 8006faa:	4619      	mov	r1, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f001 fe0e 	bl	8008bce <USBD_LL_GetRxDataSize>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00d      	beq.n	8006fe0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006fd8:	4611      	mov	r1, r2
 8006fda:	4798      	blx	r3

    return USBD_OK;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	e000      	b.n	8006fe2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006fe0:	2302      	movs	r3, #2
  }
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b084      	sub	sp, #16
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ff8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007000:	2b00      	cmp	r3, #0
 8007002:	d015      	beq.n	8007030 <USBD_CDC_EP0_RxReady+0x46>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800700a:	2bff      	cmp	r3, #255	; 0xff
 800700c:	d010      	beq.n	8007030 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800701c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007024:	b292      	uxth	r2, r2
 8007026:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	22ff      	movs	r2, #255	; 0xff
 800702c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
	...

0800703c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2243      	movs	r2, #67	; 0x43
 8007048:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800704a:	4b03      	ldr	r3, [pc, #12]	; (8007058 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800704c:	4618      	mov	r0, r3
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	bc80      	pop	{r7}
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	20000098 	.word	0x20000098

0800705c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2243      	movs	r2, #67	; 0x43
 8007068:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800706a:	4b03      	ldr	r3, [pc, #12]	; (8007078 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800706c:	4618      	mov	r0, r3
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	bc80      	pop	{r7}
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	20000054 	.word	0x20000054

0800707c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2243      	movs	r2, #67	; 0x43
 8007088:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800708a:	4b03      	ldr	r3, [pc, #12]	; (8007098 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800708c:	4618      	mov	r0, r3
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	bc80      	pop	{r7}
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	200000dc 	.word	0x200000dc

0800709c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	220a      	movs	r2, #10
 80070a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80070aa:	4b03      	ldr	r3, [pc, #12]	; (80070b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bc80      	pop	{r7}
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	20000010 	.word	0x20000010

080070bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80070c6:	2302      	movs	r3, #2
 80070c8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d005      	beq.n	80070dc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bc80      	pop	{r7}
 80070e6:	4770      	bx	lr

080070e8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b087      	sub	sp, #28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	4613      	mov	r3, r2
 80070f4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070fc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007106:	88fa      	ldrh	r2, [r7, #6]
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	371c      	adds	r7, #28
 8007114:	46bd      	mov	sp, r7
 8007116:	bc80      	pop	{r7}
 8007118:	4770      	bx	lr

0800711a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800711a:	b480      	push	{r7}
 800711c:	b085      	sub	sp, #20
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800712a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	bc80      	pop	{r7}
 800713e:	4770      	bx	lr

08007140 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800714e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007156:	2b00      	cmp	r3, #0
 8007158:	d01c      	beq.n	8007194 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007160:	2b00      	cmp	r3, #0
 8007162:	d115      	bne.n	8007190 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2201      	movs	r2, #1
 8007168:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007182:	b29b      	uxth	r3, r3
 8007184:	2181      	movs	r1, #129	; 0x81
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f001 fcdb 	bl	8008b42 <USBD_LL_Transmit>

      return USBD_OK;
 800718c:	2300      	movs	r3, #0
 800718e:	e002      	b.n	8007196 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007190:	2301      	movs	r3, #1
 8007192:	e000      	b.n	8007196 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007194:	2302      	movs	r3, #2
  }
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ac:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d017      	beq.n	80071e8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	7c1b      	ldrb	r3, [r3, #16]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d109      	bne.n	80071d4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071ca:	2101      	movs	r1, #1
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f001 fcdb 	bl	8008b88 <USBD_LL_PrepareReceive>
 80071d2:	e007      	b.n	80071e4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071da:	2340      	movs	r3, #64	; 0x40
 80071dc:	2101      	movs	r1, #1
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f001 fcd2 	bl	8008b88 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	e000      	b.n	80071ea <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80071e8:	2302      	movs	r3, #2
  }
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b084      	sub	sp, #16
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	60f8      	str	r0, [r7, #12]
 80071fa:	60b9      	str	r1, [r7, #8]
 80071fc:	4613      	mov	r3, r2
 80071fe:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d101      	bne.n	800720a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007206:	2302      	movs	r3, #2
 8007208:	e01a      	b.n	8007240 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	79fa      	ldrb	r2, [r7, #7]
 8007236:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f001 fb3f 	bl	80088bc <USBD_LL_Init>

  return USBD_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d006      	beq.n	800726a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007264:	2300      	movs	r3, #0
 8007266:	73fb      	strb	r3, [r7, #15]
 8007268:	e001      	b.n	800726e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800726a:	2302      	movs	r3, #2
 800726c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800726e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3714      	adds	r7, #20
 8007274:	46bd      	mov	sp, r7
 8007276:	bc80      	pop	{r7}
 8007278:	4770      	bx	lr

0800727a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b082      	sub	sp, #8
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f001 fb74 	bl	8008970 <USBD_LL_Start>

  return USBD_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007292:	b480      	push	{r7}
 8007294:	b083      	sub	sp, #12
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bc80      	pop	{r7}
 80072a4:	4770      	bx	lr

080072a6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b084      	sub	sp, #16
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	460b      	mov	r3, r1
 80072b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80072b2:	2302      	movs	r3, #2
 80072b4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00c      	beq.n	80072da <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	78fa      	ldrb	r2, [r7, #3]
 80072ca:	4611      	mov	r1, r2
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	4798      	blx	r3
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80072da:	7bfb      	ldrb	r3, [r7, #15]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	78fa      	ldrb	r2, [r7, #3]
 80072fa:	4611      	mov	r1, r2
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	4798      	blx	r3

  return USBD_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b082      	sub	sp, #8
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800731a:	6839      	ldr	r1, [r7, #0]
 800731c:	4618      	mov	r0, r3
 800731e:	f000 fed8 	bl	80080d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007330:	461a      	mov	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800733e:	f003 031f 	and.w	r3, r3, #31
 8007342:	2b02      	cmp	r3, #2
 8007344:	d016      	beq.n	8007374 <USBD_LL_SetupStage+0x6a>
 8007346:	2b02      	cmp	r3, #2
 8007348:	d81c      	bhi.n	8007384 <USBD_LL_SetupStage+0x7a>
 800734a:	2b00      	cmp	r3, #0
 800734c:	d002      	beq.n	8007354 <USBD_LL_SetupStage+0x4a>
 800734e:	2b01      	cmp	r3, #1
 8007350:	d008      	beq.n	8007364 <USBD_LL_SetupStage+0x5a>
 8007352:	e017      	b.n	8007384 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800735a:	4619      	mov	r1, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f9cb 	bl	80076f8 <USBD_StdDevReq>
      break;
 8007362:	e01a      	b.n	800739a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fa2d 	bl	80077cc <USBD_StdItfReq>
      break;
 8007372:	e012      	b.n	800739a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fa6d 	bl	800785c <USBD_StdEPReq>
      break;
 8007382:	e00a      	b.n	800739a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800738a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800738e:	b2db      	uxtb	r3, r3
 8007390:	4619      	mov	r1, r3
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f001 fb4c 	bl	8008a30 <USBD_LL_StallEP>
      break;
 8007398:	bf00      	nop
  }

  return USBD_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	460b      	mov	r3, r1
 80073ae:	607a      	str	r2, [r7, #4]
 80073b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80073b2:	7afb      	ldrb	r3, [r7, #11]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d14b      	bne.n	8007450 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80073be:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d134      	bne.n	8007434 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	68da      	ldr	r2, [r3, #12]
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d919      	bls.n	800740a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	68da      	ldr	r2, [r3, #12]
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	1ad2      	subs	r2, r2, r3
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	68da      	ldr	r2, [r3, #12]
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d203      	bcs.n	80073f8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	e002      	b.n	80073fe <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	461a      	mov	r2, r3
 8007400:	6879      	ldr	r1, [r7, #4]
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f000 ff57 	bl	80082b6 <USBD_CtlContinueRx>
 8007408:	e038      	b.n	800747c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00a      	beq.n	800742c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800741c:	2b03      	cmp	r3, #3
 800741e:	d105      	bne.n	800742c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 ff54 	bl	80082da <USBD_CtlSendStatus>
 8007432:	e023      	b.n	800747c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800743a:	2b05      	cmp	r3, #5
 800743c:	d11e      	bne.n	800747c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007446:	2100      	movs	r1, #0
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f001 faf1 	bl	8008a30 <USBD_LL_StallEP>
 800744e:	e015      	b.n	800747c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00d      	beq.n	8007478 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007462:	2b03      	cmp	r3, #3
 8007464:	d108      	bne.n	8007478 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	7afa      	ldrb	r2, [r7, #11]
 8007470:	4611      	mov	r1, r2
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	4798      	blx	r3
 8007476:	e001      	b.n	800747c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007478:	2302      	movs	r3, #2
 800747a:	e000      	b.n	800747e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3718      	adds	r7, #24
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b086      	sub	sp, #24
 800748a:	af00      	add	r7, sp, #0
 800748c:	60f8      	str	r0, [r7, #12]
 800748e:	460b      	mov	r3, r1
 8007490:	607a      	str	r2, [r7, #4]
 8007492:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007494:	7afb      	ldrb	r3, [r7, #11]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d17f      	bne.n	800759a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	3314      	adds	r3, #20
 800749e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d15c      	bne.n	8007564 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d915      	bls.n	80074e2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	68da      	ldr	r2, [r3, #12]
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	1ad2      	subs	r2, r2, r3
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	461a      	mov	r2, r3
 80074cc:	6879      	ldr	r1, [r7, #4]
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f000 fec1 	bl	8008256 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074d4:	2300      	movs	r3, #0
 80074d6:	2200      	movs	r2, #0
 80074d8:	2100      	movs	r1, #0
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f001 fb54 	bl	8008b88 <USBD_LL_PrepareReceive>
 80074e0:	e04e      	b.n	8007580 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	6912      	ldr	r2, [r2, #16]
 80074ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80074ee:	fb01 f202 	mul.w	r2, r1, r2
 80074f2:	1a9b      	subs	r3, r3, r2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d11c      	bne.n	8007532 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	689a      	ldr	r2, [r3, #8]
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007500:	429a      	cmp	r2, r3
 8007502:	d316      	bcc.n	8007532 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	689a      	ldr	r2, [r3, #8]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800750e:	429a      	cmp	r2, r3
 8007510:	d20f      	bcs.n	8007532 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007512:	2200      	movs	r2, #0
 8007514:	2100      	movs	r1, #0
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 fe9d 	bl	8008256 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007524:	2300      	movs	r3, #0
 8007526:	2200      	movs	r2, #0
 8007528:	2100      	movs	r1, #0
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f001 fb2c 	bl	8008b88 <USBD_LL_PrepareReceive>
 8007530:	e026      	b.n	8007580 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007544:	2b03      	cmp	r3, #3
 8007546:	d105      	bne.n	8007554 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007554:	2180      	movs	r1, #128	; 0x80
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f001 fa6a 	bl	8008a30 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f000 fecf 	bl	8008300 <USBD_CtlReceiveStatus>
 8007562:	e00d      	b.n	8007580 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800756a:	2b04      	cmp	r3, #4
 800756c:	d004      	beq.n	8007578 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007574:	2b00      	cmp	r3, #0
 8007576:	d103      	bne.n	8007580 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007578:	2180      	movs	r1, #128	; 0x80
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f001 fa58 	bl	8008a30 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007586:	2b01      	cmp	r3, #1
 8007588:	d11d      	bne.n	80075c6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f7ff fe81 	bl	8007292 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007598:	e015      	b.n	80075c6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00d      	beq.n	80075c2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80075ac:	2b03      	cmp	r3, #3
 80075ae:	d108      	bne.n	80075c2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075b6:	695b      	ldr	r3, [r3, #20]
 80075b8:	7afa      	ldrb	r2, [r7, #11]
 80075ba:	4611      	mov	r1, r2
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	4798      	blx	r3
 80075c0:	e001      	b.n	80075c6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075c2:	2302      	movs	r3, #2
 80075c4:	e000      	b.n	80075c8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3718      	adds	r7, #24
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075d8:	2340      	movs	r3, #64	; 0x40
 80075da:	2200      	movs	r2, #0
 80075dc:	2100      	movs	r1, #0
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f001 f9e1 	bl	80089a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2240      	movs	r2, #64	; 0x40
 80075f0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075f4:	2340      	movs	r3, #64	; 0x40
 80075f6:	2200      	movs	r2, #0
 80075f8:	2180      	movs	r1, #128	; 0x80
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f001 f9d3 	bl	80089a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2240      	movs	r2, #64	; 0x40
 800760a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007630:	2b00      	cmp	r3, #0
 8007632:	d009      	beq.n	8007648 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	6852      	ldr	r2, [r2, #4]
 8007640:	b2d2      	uxtb	r2, r2
 8007642:	4611      	mov	r1, r2
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	4798      	blx	r3
  }

  return USBD_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	460b      	mov	r3, r1
 800765c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	78fa      	ldrb	r2, [r7, #3]
 8007662:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	bc80      	pop	{r7}
 800766e:	4770      	bx	lr

08007670 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2204      	movs	r2, #4
 8007688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	bc80      	pop	{r7}
 8007696:	4770      	bx	lr

08007698 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	d105      	bne.n	80076b6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	bc80      	pop	{r7}
 80076c0:	4770      	bx	lr

080076c2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b082      	sub	sp, #8
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d0:	2b03      	cmp	r3, #3
 80076d2:	d10b      	bne.n	80076ec <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d005      	beq.n	80076ec <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076e6:	69db      	ldr	r3, [r3, #28]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800770e:	2b40      	cmp	r3, #64	; 0x40
 8007710:	d005      	beq.n	800771e <USBD_StdDevReq+0x26>
 8007712:	2b40      	cmp	r3, #64	; 0x40
 8007714:	d84f      	bhi.n	80077b6 <USBD_StdDevReq+0xbe>
 8007716:	2b00      	cmp	r3, #0
 8007718:	d009      	beq.n	800772e <USBD_StdDevReq+0x36>
 800771a:	2b20      	cmp	r3, #32
 800771c:	d14b      	bne.n	80077b6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	6839      	ldr	r1, [r7, #0]
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	4798      	blx	r3
      break;
 800772c:	e048      	b.n	80077c0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	785b      	ldrb	r3, [r3, #1]
 8007732:	2b09      	cmp	r3, #9
 8007734:	d839      	bhi.n	80077aa <USBD_StdDevReq+0xb2>
 8007736:	a201      	add	r2, pc, #4	; (adr r2, 800773c <USBD_StdDevReq+0x44>)
 8007738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773c:	0800778d 	.word	0x0800778d
 8007740:	080077a1 	.word	0x080077a1
 8007744:	080077ab 	.word	0x080077ab
 8007748:	08007797 	.word	0x08007797
 800774c:	080077ab 	.word	0x080077ab
 8007750:	0800776f 	.word	0x0800776f
 8007754:	08007765 	.word	0x08007765
 8007758:	080077ab 	.word	0x080077ab
 800775c:	08007783 	.word	0x08007783
 8007760:	08007779 	.word	0x08007779
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f9dc 	bl	8007b24 <USBD_GetDescriptor>
          break;
 800776c:	e022      	b.n	80077b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fb3f 	bl	8007df4 <USBD_SetAddress>
          break;
 8007776:	e01d      	b.n	80077b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fb7e 	bl	8007e7c <USBD_SetConfig>
          break;
 8007780:	e018      	b.n	80077b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fc07 	bl	8007f98 <USBD_GetConfig>
          break;
 800778a:	e013      	b.n	80077b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fc37 	bl	8008002 <USBD_GetStatus>
          break;
 8007794:	e00e      	b.n	80077b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fc65 	bl	8008068 <USBD_SetFeature>
          break;
 800779e:	e009      	b.n	80077b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fc74 	bl	8008090 <USBD_ClrFeature>
          break;
 80077a8:	e004      	b.n	80077b4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fccc 	bl	800814a <USBD_CtlError>
          break;
 80077b2:	bf00      	nop
      }
      break;
 80077b4:	e004      	b.n	80077c0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fcc6 	bl	800814a <USBD_CtlError>
      break;
 80077be:	bf00      	nop
  }

  return ret;
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop

080077cc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077e2:	2b40      	cmp	r3, #64	; 0x40
 80077e4:	d005      	beq.n	80077f2 <USBD_StdItfReq+0x26>
 80077e6:	2b40      	cmp	r3, #64	; 0x40
 80077e8:	d82e      	bhi.n	8007848 <USBD_StdItfReq+0x7c>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <USBD_StdItfReq+0x26>
 80077ee:	2b20      	cmp	r3, #32
 80077f0:	d12a      	bne.n	8007848 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f8:	3b01      	subs	r3, #1
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d81d      	bhi.n	800783a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	889b      	ldrh	r3, [r3, #4]
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b01      	cmp	r3, #1
 8007806:	d813      	bhi.n	8007830 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	4798      	blx	r3
 8007816:	4603      	mov	r3, r0
 8007818:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	88db      	ldrh	r3, [r3, #6]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d110      	bne.n	8007844 <USBD_StdItfReq+0x78>
 8007822:	7bfb      	ldrb	r3, [r7, #15]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10d      	bne.n	8007844 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fd56 	bl	80082da <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800782e:	e009      	b.n	8007844 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fc89 	bl	800814a <USBD_CtlError>
          break;
 8007838:	e004      	b.n	8007844 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fc84 	bl	800814a <USBD_CtlError>
          break;
 8007842:	e000      	b.n	8007846 <USBD_StdItfReq+0x7a>
          break;
 8007844:	bf00      	nop
      }
      break;
 8007846:	e004      	b.n	8007852 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fc7d 	bl	800814a <USBD_CtlError>
      break;
 8007850:	bf00      	nop
  }

  return USBD_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	889b      	ldrh	r3, [r3, #4]
 800786e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007878:	2b40      	cmp	r3, #64	; 0x40
 800787a:	d007      	beq.n	800788c <USBD_StdEPReq+0x30>
 800787c:	2b40      	cmp	r3, #64	; 0x40
 800787e:	f200 8146 	bhi.w	8007b0e <USBD_StdEPReq+0x2b2>
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00a      	beq.n	800789c <USBD_StdEPReq+0x40>
 8007886:	2b20      	cmp	r3, #32
 8007888:	f040 8141 	bne.w	8007b0e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	4798      	blx	r3
      break;
 800789a:	e13d      	b.n	8007b18 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078a4:	2b20      	cmp	r3, #32
 80078a6:	d10a      	bne.n	80078be <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	4798      	blx	r3
 80078b6:	4603      	mov	r3, r0
 80078b8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80078ba:	7bfb      	ldrb	r3, [r7, #15]
 80078bc:	e12d      	b.n	8007b1a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	785b      	ldrb	r3, [r3, #1]
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	d007      	beq.n	80078d6 <USBD_StdEPReq+0x7a>
 80078c6:	2b03      	cmp	r3, #3
 80078c8:	f300 811b 	bgt.w	8007b02 <USBD_StdEPReq+0x2a6>
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d072      	beq.n	80079b6 <USBD_StdEPReq+0x15a>
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d03a      	beq.n	800794a <USBD_StdEPReq+0xee>
 80078d4:	e115      	b.n	8007b02 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d002      	beq.n	80078e6 <USBD_StdEPReq+0x8a>
 80078e0:	2b03      	cmp	r3, #3
 80078e2:	d015      	beq.n	8007910 <USBD_StdEPReq+0xb4>
 80078e4:	e02b      	b.n	800793e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078e6:	7bbb      	ldrb	r3, [r7, #14]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00c      	beq.n	8007906 <USBD_StdEPReq+0xaa>
 80078ec:	7bbb      	ldrb	r3, [r7, #14]
 80078ee:	2b80      	cmp	r3, #128	; 0x80
 80078f0:	d009      	beq.n	8007906 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80078f2:	7bbb      	ldrb	r3, [r7, #14]
 80078f4:	4619      	mov	r1, r3
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f001 f89a 	bl	8008a30 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80078fc:	2180      	movs	r1, #128	; 0x80
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f001 f896 	bl	8008a30 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007904:	e020      	b.n	8007948 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007906:	6839      	ldr	r1, [r7, #0]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fc1e 	bl	800814a <USBD_CtlError>
              break;
 800790e:	e01b      	b.n	8007948 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	885b      	ldrh	r3, [r3, #2]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10e      	bne.n	8007936 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007918:	7bbb      	ldrb	r3, [r7, #14]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00b      	beq.n	8007936 <USBD_StdEPReq+0xda>
 800791e:	7bbb      	ldrb	r3, [r7, #14]
 8007920:	2b80      	cmp	r3, #128	; 0x80
 8007922:	d008      	beq.n	8007936 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	88db      	ldrh	r3, [r3, #6]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d104      	bne.n	8007936 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800792c:	7bbb      	ldrb	r3, [r7, #14]
 800792e:	4619      	mov	r1, r3
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f001 f87d 	bl	8008a30 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fccf 	bl	80082da <USBD_CtlSendStatus>

              break;
 800793c:	e004      	b.n	8007948 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fc02 	bl	800814a <USBD_CtlError>
              break;
 8007946:	bf00      	nop
          }
          break;
 8007948:	e0e0      	b.n	8007b0c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007950:	2b02      	cmp	r3, #2
 8007952:	d002      	beq.n	800795a <USBD_StdEPReq+0xfe>
 8007954:	2b03      	cmp	r3, #3
 8007956:	d015      	beq.n	8007984 <USBD_StdEPReq+0x128>
 8007958:	e026      	b.n	80079a8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800795a:	7bbb      	ldrb	r3, [r7, #14]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00c      	beq.n	800797a <USBD_StdEPReq+0x11e>
 8007960:	7bbb      	ldrb	r3, [r7, #14]
 8007962:	2b80      	cmp	r3, #128	; 0x80
 8007964:	d009      	beq.n	800797a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007966:	7bbb      	ldrb	r3, [r7, #14]
 8007968:	4619      	mov	r1, r3
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f001 f860 	bl	8008a30 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007970:	2180      	movs	r1, #128	; 0x80
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f001 f85c 	bl	8008a30 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007978:	e01c      	b.n	80079b4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fbe4 	bl	800814a <USBD_CtlError>
              break;
 8007982:	e017      	b.n	80079b4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	885b      	ldrh	r3, [r3, #2]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d112      	bne.n	80079b2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800798c:	7bbb      	ldrb	r3, [r7, #14]
 800798e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007992:	2b00      	cmp	r3, #0
 8007994:	d004      	beq.n	80079a0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007996:	7bbb      	ldrb	r3, [r7, #14]
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f001 f867 	bl	8008a6e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fc9a 	bl	80082da <USBD_CtlSendStatus>
              }
              break;
 80079a6:	e004      	b.n	80079b2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80079a8:	6839      	ldr	r1, [r7, #0]
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fbcd 	bl	800814a <USBD_CtlError>
              break;
 80079b0:	e000      	b.n	80079b4 <USBD_StdEPReq+0x158>
              break;
 80079b2:	bf00      	nop
          }
          break;
 80079b4:	e0aa      	b.n	8007b0c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d002      	beq.n	80079c6 <USBD_StdEPReq+0x16a>
 80079c0:	2b03      	cmp	r3, #3
 80079c2:	d032      	beq.n	8007a2a <USBD_StdEPReq+0x1ce>
 80079c4:	e097      	b.n	8007af6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079c6:	7bbb      	ldrb	r3, [r7, #14]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d007      	beq.n	80079dc <USBD_StdEPReq+0x180>
 80079cc:	7bbb      	ldrb	r3, [r7, #14]
 80079ce:	2b80      	cmp	r3, #128	; 0x80
 80079d0:	d004      	beq.n	80079dc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fbb8 	bl	800814a <USBD_CtlError>
                break;
 80079da:	e091      	b.n	8007b00 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	da0b      	bge.n	80079fc <USBD_StdEPReq+0x1a0>
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079ea:	4613      	mov	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	3310      	adds	r3, #16
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	4413      	add	r3, r2
 80079f8:	3304      	adds	r3, #4
 80079fa:	e00b      	b.n	8007a14 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079fc:	7bbb      	ldrb	r3, [r7, #14]
 80079fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a02:	4613      	mov	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	4413      	add	r3, r2
 8007a12:	3304      	adds	r3, #4
 8007a14:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	2202      	movs	r2, #2
 8007a20:	4619      	mov	r1, r3
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fbfb 	bl	800821e <USBD_CtlSendData>
              break;
 8007a28:	e06a      	b.n	8007b00 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	da11      	bge.n	8007a56 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a32:	7bbb      	ldrb	r3, [r7, #14]
 8007a34:	f003 020f 	and.w	r2, r3, #15
 8007a38:	6879      	ldr	r1, [r7, #4]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	440b      	add	r3, r1
 8007a44:	3318      	adds	r3, #24
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d117      	bne.n	8007a7c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fb7b 	bl	800814a <USBD_CtlError>
                  break;
 8007a54:	e054      	b.n	8007b00 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a56:	7bbb      	ldrb	r3, [r7, #14]
 8007a58:	f003 020f 	and.w	r2, r3, #15
 8007a5c:	6879      	ldr	r1, [r7, #4]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	440b      	add	r3, r1
 8007a68:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d104      	bne.n	8007a7c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fb68 	bl	800814a <USBD_CtlError>
                  break;
 8007a7a:	e041      	b.n	8007b00 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	da0b      	bge.n	8007a9c <USBD_StdEPReq+0x240>
 8007a84:	7bbb      	ldrb	r3, [r7, #14]
 8007a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4413      	add	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	3310      	adds	r3, #16
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	4413      	add	r3, r2
 8007a98:	3304      	adds	r3, #4
 8007a9a:	e00b      	b.n	8007ab4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a9c:	7bbb      	ldrb	r3, [r7, #14]
 8007a9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4413      	add	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	3304      	adds	r3, #4
 8007ab4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ab6:	7bbb      	ldrb	r3, [r7, #14]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <USBD_StdEPReq+0x266>
 8007abc:	7bbb      	ldrb	r3, [r7, #14]
 8007abe:	2b80      	cmp	r3, #128	; 0x80
 8007ac0:	d103      	bne.n	8007aca <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	e00e      	b.n	8007ae8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007aca:	7bbb      	ldrb	r3, [r7, #14]
 8007acc:	4619      	mov	r1, r3
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 ffec 	bl	8008aac <USBD_LL_IsStallEP>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	2201      	movs	r2, #1
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	e002      	b.n	8007ae8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2202      	movs	r2, #2
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fb95 	bl	800821e <USBD_CtlSendData>
              break;
 8007af4:	e004      	b.n	8007b00 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fb26 	bl	800814a <USBD_CtlError>
              break;
 8007afe:	bf00      	nop
          }
          break;
 8007b00:	e004      	b.n	8007b0c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007b02:	6839      	ldr	r1, [r7, #0]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fb20 	bl	800814a <USBD_CtlError>
          break;
 8007b0a:	bf00      	nop
      }
      break;
 8007b0c:	e004      	b.n	8007b18 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007b0e:	6839      	ldr	r1, [r7, #0]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fb1a 	bl	800814a <USBD_CtlError>
      break;
 8007b16:	bf00      	nop
  }

  return ret;
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
	...

08007b24 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b32:	2300      	movs	r3, #0
 8007b34:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	885b      	ldrh	r3, [r3, #2]
 8007b3e:	0a1b      	lsrs	r3, r3, #8
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	3b01      	subs	r3, #1
 8007b44:	2b06      	cmp	r3, #6
 8007b46:	f200 8128 	bhi.w	8007d9a <USBD_GetDescriptor+0x276>
 8007b4a:	a201      	add	r2, pc, #4	; (adr r2, 8007b50 <USBD_GetDescriptor+0x2c>)
 8007b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b50:	08007b6d 	.word	0x08007b6d
 8007b54:	08007b85 	.word	0x08007b85
 8007b58:	08007bc5 	.word	0x08007bc5
 8007b5c:	08007d9b 	.word	0x08007d9b
 8007b60:	08007d9b 	.word	0x08007d9b
 8007b64:	08007d3b 	.word	0x08007d3b
 8007b68:	08007d67 	.word	0x08007d67
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	7c12      	ldrb	r2, [r2, #16]
 8007b78:	f107 0108 	add.w	r1, r7, #8
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	4798      	blx	r3
 8007b80:	60f8      	str	r0, [r7, #12]
      break;
 8007b82:	e112      	b.n	8007daa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	7c1b      	ldrb	r3, [r3, #16]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10d      	bne.n	8007ba8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b94:	f107 0208 	add.w	r2, r7, #8
 8007b98:	4610      	mov	r0, r2
 8007b9a:	4798      	blx	r3
 8007b9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ba6:	e100      	b.n	8007daa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb0:	f107 0208 	add.w	r2, r7, #8
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	4798      	blx	r3
 8007bb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	701a      	strb	r2, [r3, #0]
      break;
 8007bc2:	e0f2      	b.n	8007daa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	885b      	ldrh	r3, [r3, #2]
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b05      	cmp	r3, #5
 8007bcc:	f200 80ac 	bhi.w	8007d28 <USBD_GetDescriptor+0x204>
 8007bd0:	a201      	add	r2, pc, #4	; (adr r2, 8007bd8 <USBD_GetDescriptor+0xb4>)
 8007bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd6:	bf00      	nop
 8007bd8:	08007bf1 	.word	0x08007bf1
 8007bdc:	08007c25 	.word	0x08007c25
 8007be0:	08007c59 	.word	0x08007c59
 8007be4:	08007c8d 	.word	0x08007c8d
 8007be8:	08007cc1 	.word	0x08007cc1
 8007bec:	08007cf5 	.word	0x08007cf5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00b      	beq.n	8007c14 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	7c12      	ldrb	r2, [r2, #16]
 8007c08:	f107 0108 	add.w	r1, r7, #8
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	4798      	blx	r3
 8007c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c12:	e091      	b.n	8007d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fa97 	bl	800814a <USBD_CtlError>
            err++;
 8007c1c:	7afb      	ldrb	r3, [r7, #11]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	72fb      	strb	r3, [r7, #11]
          break;
 8007c22:	e089      	b.n	8007d38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00b      	beq.n	8007c48 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	7c12      	ldrb	r2, [r2, #16]
 8007c3c:	f107 0108 	add.w	r1, r7, #8
 8007c40:	4610      	mov	r0, r2
 8007c42:	4798      	blx	r3
 8007c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c46:	e077      	b.n	8007d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fa7d 	bl	800814a <USBD_CtlError>
            err++;
 8007c50:	7afb      	ldrb	r3, [r7, #11]
 8007c52:	3301      	adds	r3, #1
 8007c54:	72fb      	strb	r3, [r7, #11]
          break;
 8007c56:	e06f      	b.n	8007d38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00b      	beq.n	8007c7c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	7c12      	ldrb	r2, [r2, #16]
 8007c70:	f107 0108 	add.w	r1, r7, #8
 8007c74:	4610      	mov	r0, r2
 8007c76:	4798      	blx	r3
 8007c78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c7a:	e05d      	b.n	8007d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fa63 	bl	800814a <USBD_CtlError>
            err++;
 8007c84:	7afb      	ldrb	r3, [r7, #11]
 8007c86:	3301      	adds	r3, #1
 8007c88:	72fb      	strb	r3, [r7, #11]
          break;
 8007c8a:	e055      	b.n	8007d38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00b      	beq.n	8007cb0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	7c12      	ldrb	r2, [r2, #16]
 8007ca4:	f107 0108 	add.w	r1, r7, #8
 8007ca8:	4610      	mov	r0, r2
 8007caa:	4798      	blx	r3
 8007cac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cae:	e043      	b.n	8007d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fa49 	bl	800814a <USBD_CtlError>
            err++;
 8007cb8:	7afb      	ldrb	r3, [r7, #11]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	72fb      	strb	r3, [r7, #11]
          break;
 8007cbe:	e03b      	b.n	8007d38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cc6:	695b      	ldr	r3, [r3, #20]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00b      	beq.n	8007ce4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	7c12      	ldrb	r2, [r2, #16]
 8007cd8:	f107 0108 	add.w	r1, r7, #8
 8007cdc:	4610      	mov	r0, r2
 8007cde:	4798      	blx	r3
 8007ce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ce2:	e029      	b.n	8007d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fa2f 	bl	800814a <USBD_CtlError>
            err++;
 8007cec:	7afb      	ldrb	r3, [r7, #11]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cf2:	e021      	b.n	8007d38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00b      	beq.n	8007d18 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	7c12      	ldrb	r2, [r2, #16]
 8007d0c:	f107 0108 	add.w	r1, r7, #8
 8007d10:	4610      	mov	r0, r2
 8007d12:	4798      	blx	r3
 8007d14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d16:	e00f      	b.n	8007d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fa15 	bl	800814a <USBD_CtlError>
            err++;
 8007d20:	7afb      	ldrb	r3, [r7, #11]
 8007d22:	3301      	adds	r3, #1
 8007d24:	72fb      	strb	r3, [r7, #11]
          break;
 8007d26:	e007      	b.n	8007d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fa0d 	bl	800814a <USBD_CtlError>
          err++;
 8007d30:	7afb      	ldrb	r3, [r7, #11]
 8007d32:	3301      	adds	r3, #1
 8007d34:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007d36:	e038      	b.n	8007daa <USBD_GetDescriptor+0x286>
 8007d38:	e037      	b.n	8007daa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	7c1b      	ldrb	r3, [r3, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d109      	bne.n	8007d56 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4a:	f107 0208 	add.w	r2, r7, #8
 8007d4e:	4610      	mov	r0, r2
 8007d50:	4798      	blx	r3
 8007d52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d54:	e029      	b.n	8007daa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f9f6 	bl	800814a <USBD_CtlError>
        err++;
 8007d5e:	7afb      	ldrb	r3, [r7, #11]
 8007d60:	3301      	adds	r3, #1
 8007d62:	72fb      	strb	r3, [r7, #11]
      break;
 8007d64:	e021      	b.n	8007daa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	7c1b      	ldrb	r3, [r3, #16]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10d      	bne.n	8007d8a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d76:	f107 0208 	add.w	r2, r7, #8
 8007d7a:	4610      	mov	r0, r2
 8007d7c:	4798      	blx	r3
 8007d7e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	3301      	adds	r3, #1
 8007d84:	2207      	movs	r2, #7
 8007d86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d88:	e00f      	b.n	8007daa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f9dc 	bl	800814a <USBD_CtlError>
        err++;
 8007d92:	7afb      	ldrb	r3, [r7, #11]
 8007d94:	3301      	adds	r3, #1
 8007d96:	72fb      	strb	r3, [r7, #11]
      break;
 8007d98:	e007      	b.n	8007daa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d9a:	6839      	ldr	r1, [r7, #0]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f9d4 	bl	800814a <USBD_CtlError>
      err++;
 8007da2:	7afb      	ldrb	r3, [r7, #11]
 8007da4:	3301      	adds	r3, #1
 8007da6:	72fb      	strb	r3, [r7, #11]
      break;
 8007da8:	bf00      	nop
  }

  if (err != 0U)
 8007daa:	7afb      	ldrb	r3, [r7, #11]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d11c      	bne.n	8007dea <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007db0:	893b      	ldrh	r3, [r7, #8]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d011      	beq.n	8007dda <USBD_GetDescriptor+0x2b6>
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	88db      	ldrh	r3, [r3, #6]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00d      	beq.n	8007dda <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	88da      	ldrh	r2, [r3, #6]
 8007dc2:	893b      	ldrh	r3, [r7, #8]
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	bf28      	it	cs
 8007dc8:	4613      	movcs	r3, r2
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007dce:	893b      	ldrh	r3, [r7, #8]
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	68f9      	ldr	r1, [r7, #12]
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fa22 	bl	800821e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	88db      	ldrh	r3, [r3, #6]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d104      	bne.n	8007dec <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fa79 	bl	80082da <USBD_CtlSendStatus>
 8007de8:	e000      	b.n	8007dec <USBD_GetDescriptor+0x2c8>
    return;
 8007dea:	bf00      	nop
    }
  }
}
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop

08007df4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	889b      	ldrh	r3, [r3, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d130      	bne.n	8007e68 <USBD_SetAddress+0x74>
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	88db      	ldrh	r3, [r3, #6]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d12c      	bne.n	8007e68 <USBD_SetAddress+0x74>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	885b      	ldrh	r3, [r3, #2]
 8007e12:	2b7f      	cmp	r3, #127	; 0x7f
 8007e14:	d828      	bhi.n	8007e68 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	885b      	ldrh	r3, [r3, #2]
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e28:	2b03      	cmp	r3, #3
 8007e2a:	d104      	bne.n	8007e36 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f98b 	bl	800814a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e34:	e01d      	b.n	8007e72 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	7bfa      	ldrb	r2, [r7, #15]
 8007e3a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
 8007e40:	4619      	mov	r1, r3
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fe5e 	bl	8008b04 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fa46 	bl	80082da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d004      	beq.n	8007e5e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e5c:	e009      	b.n	8007e72 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e66:	e004      	b.n	8007e72 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f96d 	bl	800814a <USBD_CtlError>
  }
}
 8007e70:	bf00      	nop
 8007e72:	bf00      	nop
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
	...

08007e7c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	885b      	ldrh	r3, [r3, #2]
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	4b41      	ldr	r3, [pc, #260]	; (8007f94 <USBD_SetConfig+0x118>)
 8007e8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e90:	4b40      	ldr	r3, [pc, #256]	; (8007f94 <USBD_SetConfig+0x118>)
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d904      	bls.n	8007ea2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f955 	bl	800814a <USBD_CtlError>
 8007ea0:	e075      	b.n	8007f8e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d002      	beq.n	8007eb2 <USBD_SetConfig+0x36>
 8007eac:	2b03      	cmp	r3, #3
 8007eae:	d023      	beq.n	8007ef8 <USBD_SetConfig+0x7c>
 8007eb0:	e062      	b.n	8007f78 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007eb2:	4b38      	ldr	r3, [pc, #224]	; (8007f94 <USBD_SetConfig+0x118>)
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d01a      	beq.n	8007ef0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007eba:	4b36      	ldr	r3, [pc, #216]	; (8007f94 <USBD_SetConfig+0x118>)
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2203      	movs	r2, #3
 8007ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007ecc:	4b31      	ldr	r3, [pc, #196]	; (8007f94 <USBD_SetConfig+0x118>)
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7ff f9e7 	bl	80072a6 <USBD_SetClassConfig>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d104      	bne.n	8007ee8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f932 	bl	800814a <USBD_CtlError>
            return;
 8007ee6:	e052      	b.n	8007f8e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 f9f6 	bl	80082da <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007eee:	e04e      	b.n	8007f8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f9f2 	bl	80082da <USBD_CtlSendStatus>
        break;
 8007ef6:	e04a      	b.n	8007f8e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007ef8:	4b26      	ldr	r3, [pc, #152]	; (8007f94 <USBD_SetConfig+0x118>)
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d112      	bne.n	8007f26 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2202      	movs	r2, #2
 8007f04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007f08:	4b22      	ldr	r3, [pc, #136]	; (8007f94 <USBD_SetConfig+0x118>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007f12:	4b20      	ldr	r3, [pc, #128]	; (8007f94 <USBD_SetConfig+0x118>)
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7ff f9e3 	bl	80072e4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f9db 	bl	80082da <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007f24:	e033      	b.n	8007f8e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007f26:	4b1b      	ldr	r3, [pc, #108]	; (8007f94 <USBD_SetConfig+0x118>)
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d01d      	beq.n	8007f70 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f7ff f9d1 	bl	80072e4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007f42:	4b14      	ldr	r3, [pc, #80]	; (8007f94 <USBD_SetConfig+0x118>)
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	461a      	mov	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f4c:	4b11      	ldr	r3, [pc, #68]	; (8007f94 <USBD_SetConfig+0x118>)
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	4619      	mov	r1, r3
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7ff f9a7 	bl	80072a6 <USBD_SetClassConfig>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d104      	bne.n	8007f68 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f8f2 	bl	800814a <USBD_CtlError>
            return;
 8007f66:	e012      	b.n	8007f8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 f9b6 	bl	80082da <USBD_CtlSendStatus>
        break;
 8007f6e:	e00e      	b.n	8007f8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f9b2 	bl	80082da <USBD_CtlSendStatus>
        break;
 8007f76:	e00a      	b.n	8007f8e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f8e5 	bl	800814a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007f80:	4b04      	ldr	r3, [pc, #16]	; (8007f94 <USBD_SetConfig+0x118>)
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7ff f9ac 	bl	80072e4 <USBD_ClrClassConfig>
        break;
 8007f8c:	bf00      	nop
    }
  }
}
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	20000284 	.word	0x20000284

08007f98 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	88db      	ldrh	r3, [r3, #6]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d004      	beq.n	8007fb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f8cc 	bl	800814a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007fb2:	e022      	b.n	8007ffa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	dc02      	bgt.n	8007fc4 <USBD_GetConfig+0x2c>
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	dc03      	bgt.n	8007fca <USBD_GetConfig+0x32>
 8007fc2:	e015      	b.n	8007ff0 <USBD_GetConfig+0x58>
 8007fc4:	2b03      	cmp	r3, #3
 8007fc6:	d00b      	beq.n	8007fe0 <USBD_GetConfig+0x48>
 8007fc8:	e012      	b.n	8007ff0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3308      	adds	r3, #8
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f920 	bl	800821e <USBD_CtlSendData>
        break;
 8007fde:	e00c      	b.n	8007ffa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	3304      	adds	r3, #4
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f918 	bl	800821e <USBD_CtlSendData>
        break;
 8007fee:	e004      	b.n	8007ffa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007ff0:	6839      	ldr	r1, [r7, #0]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f8a9 	bl	800814a <USBD_CtlError>
        break;
 8007ff8:	bf00      	nop
}
 8007ffa:	bf00      	nop
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b082      	sub	sp, #8
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008012:	3b01      	subs	r3, #1
 8008014:	2b02      	cmp	r3, #2
 8008016:	d81e      	bhi.n	8008056 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	88db      	ldrh	r3, [r3, #6]
 800801c:	2b02      	cmp	r3, #2
 800801e:	d004      	beq.n	800802a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008020:	6839      	ldr	r1, [r7, #0]
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f891 	bl	800814a <USBD_CtlError>
        break;
 8008028:	e01a      	b.n	8008060 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008036:	2b00      	cmp	r3, #0
 8008038:	d005      	beq.n	8008046 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	f043 0202 	orr.w	r2, r3, #2
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	330c      	adds	r3, #12
 800804a:	2202      	movs	r2, #2
 800804c:	4619      	mov	r1, r3
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f8e5 	bl	800821e <USBD_CtlSendData>
      break;
 8008054:	e004      	b.n	8008060 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008056:	6839      	ldr	r1, [r7, #0]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 f876 	bl	800814a <USBD_CtlError>
      break;
 800805e:	bf00      	nop
  }
}
 8008060:	bf00      	nop
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	885b      	ldrh	r3, [r3, #2]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d106      	bne.n	8008088 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f929 	bl	80082da <USBD_CtlSendStatus>
  }
}
 8008088:	bf00      	nop
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a0:	3b01      	subs	r3, #1
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d80b      	bhi.n	80080be <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	885b      	ldrh	r3, [r3, #2]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d10c      	bne.n	80080c8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f90f 	bl	80082da <USBD_CtlSendStatus>
      }
      break;
 80080bc:	e004      	b.n	80080c8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f842 	bl	800814a <USBD_CtlError>
      break;
 80080c6:	e000      	b.n	80080ca <USBD_ClrFeature+0x3a>
      break;
 80080c8:	bf00      	nop
  }
}
 80080ca:	bf00      	nop
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b083      	sub	sp, #12
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
 80080da:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	781a      	ldrb	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	785a      	ldrb	r2, [r3, #1]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	3302      	adds	r3, #2
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	3303      	adds	r3, #3
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	021b      	lsls	r3, r3, #8
 80080fe:	b29b      	uxth	r3, r3
 8008100:	4413      	add	r3, r2
 8008102:	b29a      	uxth	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	3304      	adds	r3, #4
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	b29a      	uxth	r2, r3
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	3305      	adds	r3, #5
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	b29b      	uxth	r3, r3
 8008118:	021b      	lsls	r3, r3, #8
 800811a:	b29b      	uxth	r3, r3
 800811c:	4413      	add	r3, r2
 800811e:	b29a      	uxth	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	3306      	adds	r3, #6
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	b29a      	uxth	r2, r3
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	3307      	adds	r3, #7
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	b29b      	uxth	r3, r3
 8008134:	021b      	lsls	r3, r3, #8
 8008136:	b29b      	uxth	r3, r3
 8008138:	4413      	add	r3, r2
 800813a:	b29a      	uxth	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	80da      	strh	r2, [r3, #6]

}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	bc80      	pop	{r7}
 8008148:	4770      	bx	lr

0800814a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b082      	sub	sp, #8
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008154:	2180      	movs	r1, #128	; 0x80
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fc6a 	bl	8008a30 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800815c:	2100      	movs	r1, #0
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fc66 	bl	8008a30 <USBD_LL_StallEP>
}
 8008164:	bf00      	nop
 8008166:	3708      	adds	r7, #8
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008178:	2300      	movs	r3, #0
 800817a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d032      	beq.n	80081e8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f000 f834 	bl	80081f0 <USBD_GetLen>
 8008188:	4603      	mov	r3, r0
 800818a:	3301      	adds	r3, #1
 800818c:	b29b      	uxth	r3, r3
 800818e:	005b      	lsls	r3, r3, #1
 8008190:	b29a      	uxth	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008196:	7dfb      	ldrb	r3, [r7, #23]
 8008198:	1c5a      	adds	r2, r3, #1
 800819a:	75fa      	strb	r2, [r7, #23]
 800819c:	461a      	mov	r2, r3
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	4413      	add	r3, r2
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	7812      	ldrb	r2, [r2, #0]
 80081a6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80081a8:	7dfb      	ldrb	r3, [r7, #23]
 80081aa:	1c5a      	adds	r2, r3, #1
 80081ac:	75fa      	strb	r2, [r7, #23]
 80081ae:	461a      	mov	r2, r3
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	4413      	add	r3, r2
 80081b4:	2203      	movs	r2, #3
 80081b6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80081b8:	e012      	b.n	80081e0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	1c5a      	adds	r2, r3, #1
 80081be:	60fa      	str	r2, [r7, #12]
 80081c0:	7dfa      	ldrb	r2, [r7, #23]
 80081c2:	1c51      	adds	r1, r2, #1
 80081c4:	75f9      	strb	r1, [r7, #23]
 80081c6:	4611      	mov	r1, r2
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	440a      	add	r2, r1
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80081d0:	7dfb      	ldrb	r3, [r7, #23]
 80081d2:	1c5a      	adds	r2, r3, #1
 80081d4:	75fa      	strb	r2, [r7, #23]
 80081d6:	461a      	mov	r2, r3
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	4413      	add	r3, r2
 80081dc:	2200      	movs	r2, #0
 80081de:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1e8      	bne.n	80081ba <USBD_GetString+0x4e>
    }
  }
}
 80081e8:	bf00      	nop
 80081ea:	3718      	adds	r7, #24
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80081f8:	2300      	movs	r3, #0
 80081fa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80081fc:	e005      	b.n	800820a <USBD_GetLen+0x1a>
  {
    len++;
 80081fe:	7bfb      	ldrb	r3, [r7, #15]
 8008200:	3301      	adds	r3, #1
 8008202:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	3301      	adds	r3, #1
 8008208:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1f5      	bne.n	80081fe <USBD_GetLen+0xe>
  }

  return len;
 8008212:	7bfb      	ldrb	r3, [r7, #15]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	bc80      	pop	{r7}
 800821c:	4770      	bx	lr

0800821e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	60f8      	str	r0, [r7, #12]
 8008226:	60b9      	str	r1, [r7, #8]
 8008228:	4613      	mov	r3, r2
 800822a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2202      	movs	r2, #2
 8008230:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008234:	88fa      	ldrh	r2, [r7, #6]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800823a:	88fa      	ldrh	r2, [r7, #6]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008240:	88fb      	ldrh	r3, [r7, #6]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	2100      	movs	r1, #0
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f000 fc7b 	bl	8008b42 <USBD_LL_Transmit>

  return USBD_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	60f8      	str	r0, [r7, #12]
 800825e:	60b9      	str	r1, [r7, #8]
 8008260:	4613      	mov	r3, r2
 8008262:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008264:	88fb      	ldrh	r3, [r7, #6]
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	2100      	movs	r1, #0
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f000 fc69 	bl	8008b42 <USBD_LL_Transmit>

  return USBD_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b084      	sub	sp, #16
 800827e:	af00      	add	r7, sp, #0
 8008280:	60f8      	str	r0, [r7, #12]
 8008282:	60b9      	str	r1, [r7, #8]
 8008284:	4613      	mov	r3, r2
 8008286:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2203      	movs	r2, #3
 800828c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008290:	88fa      	ldrh	r2, [r7, #6]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008298:	88fa      	ldrh	r2, [r7, #6]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082a0:	88fb      	ldrh	r3, [r7, #6]
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	2100      	movs	r1, #0
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f000 fc6e 	bl	8008b88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	60f8      	str	r0, [r7, #12]
 80082be:	60b9      	str	r1, [r7, #8]
 80082c0:	4613      	mov	r3, r2
 80082c2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082c4:	88fb      	ldrh	r3, [r7, #6]
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	2100      	movs	r1, #0
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f000 fc5c 	bl	8008b88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b082      	sub	sp, #8
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2204      	movs	r2, #4
 80082e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80082ea:	2300      	movs	r3, #0
 80082ec:	2200      	movs	r2, #0
 80082ee:	2100      	movs	r1, #0
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fc26 	bl	8008b42 <USBD_LL_Transmit>

  return USBD_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2205      	movs	r2, #5
 800830c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008310:	2300      	movs	r3, #0
 8008312:	2200      	movs	r2, #0
 8008314:	2100      	movs	r1, #0
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fc36 	bl	8008b88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
	...

08008328 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800832c:	2200      	movs	r2, #0
 800832e:	4912      	ldr	r1, [pc, #72]	; (8008378 <MX_USB_DEVICE_Init+0x50>)
 8008330:	4812      	ldr	r0, [pc, #72]	; (800837c <MX_USB_DEVICE_Init+0x54>)
 8008332:	f7fe ff5e 	bl	80071f2 <USBD_Init>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d001      	beq.n	8008340 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800833c:	f7f8 f8ca 	bl	80004d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008340:	490f      	ldr	r1, [pc, #60]	; (8008380 <MX_USB_DEVICE_Init+0x58>)
 8008342:	480e      	ldr	r0, [pc, #56]	; (800837c <MX_USB_DEVICE_Init+0x54>)
 8008344:	f7fe ff80 	bl	8007248 <USBD_RegisterClass>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d001      	beq.n	8008352 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800834e:	f7f8 f8c1 	bl	80004d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008352:	490c      	ldr	r1, [pc, #48]	; (8008384 <MX_USB_DEVICE_Init+0x5c>)
 8008354:	4809      	ldr	r0, [pc, #36]	; (800837c <MX_USB_DEVICE_Init+0x54>)
 8008356:	f7fe feb1 	bl	80070bc <USBD_CDC_RegisterInterface>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d001      	beq.n	8008364 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008360:	f7f8 f8b8 	bl	80004d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008364:	4805      	ldr	r0, [pc, #20]	; (800837c <MX_USB_DEVICE_Init+0x54>)
 8008366:	f7fe ff88 	bl	800727a <USBD_Start>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008370:	f7f8 f8b0 	bl	80004d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008374:	bf00      	nop
 8008376:	bd80      	pop	{r7, pc}
 8008378:	20000130 	.word	0x20000130
 800837c:	20000288 	.word	0x20000288
 8008380:	2000001c 	.word	0x2000001c
 8008384:	20000120 	.word	0x20000120

08008388 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800838c:	2200      	movs	r2, #0
 800838e:	4905      	ldr	r1, [pc, #20]	; (80083a4 <CDC_Init_FS+0x1c>)
 8008390:	4805      	ldr	r0, [pc, #20]	; (80083a8 <CDC_Init_FS+0x20>)
 8008392:	f7fe fea9 	bl	80070e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008396:	4905      	ldr	r1, [pc, #20]	; (80083ac <CDC_Init_FS+0x24>)
 8008398:	4803      	ldr	r0, [pc, #12]	; (80083a8 <CDC_Init_FS+0x20>)
 800839a:	f7fe febe 	bl	800711a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800839e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	2000094c 	.word	0x2000094c
 80083a8:	20000288 	.word	0x20000288
 80083ac:	2000054c 	.word	0x2000054c

080083b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80083b0:	b480      	push	{r7}
 80083b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80083b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bc80      	pop	{r7}
 80083bc:	4770      	bx	lr
	...

080083c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	4603      	mov	r3, r0
 80083c8:	6039      	str	r1, [r7, #0]
 80083ca:	71fb      	strb	r3, [r7, #7]
 80083cc:	4613      	mov	r3, r2
 80083ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80083d0:	79fb      	ldrb	r3, [r7, #7]
 80083d2:	2b23      	cmp	r3, #35	; 0x23
 80083d4:	d84a      	bhi.n	800846c <CDC_Control_FS+0xac>
 80083d6:	a201      	add	r2, pc, #4	; (adr r2, 80083dc <CDC_Control_FS+0x1c>)
 80083d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083dc:	0800846d 	.word	0x0800846d
 80083e0:	0800846d 	.word	0x0800846d
 80083e4:	0800846d 	.word	0x0800846d
 80083e8:	0800846d 	.word	0x0800846d
 80083ec:	0800846d 	.word	0x0800846d
 80083f0:	0800846d 	.word	0x0800846d
 80083f4:	0800846d 	.word	0x0800846d
 80083f8:	0800846d 	.word	0x0800846d
 80083fc:	0800846d 	.word	0x0800846d
 8008400:	0800846d 	.word	0x0800846d
 8008404:	0800846d 	.word	0x0800846d
 8008408:	0800846d 	.word	0x0800846d
 800840c:	0800846d 	.word	0x0800846d
 8008410:	0800846d 	.word	0x0800846d
 8008414:	0800846d 	.word	0x0800846d
 8008418:	0800846d 	.word	0x0800846d
 800841c:	0800846d 	.word	0x0800846d
 8008420:	0800846d 	.word	0x0800846d
 8008424:	0800846d 	.word	0x0800846d
 8008428:	0800846d 	.word	0x0800846d
 800842c:	0800846d 	.word	0x0800846d
 8008430:	0800846d 	.word	0x0800846d
 8008434:	0800846d 	.word	0x0800846d
 8008438:	0800846d 	.word	0x0800846d
 800843c:	0800846d 	.word	0x0800846d
 8008440:	0800846d 	.word	0x0800846d
 8008444:	0800846d 	.word	0x0800846d
 8008448:	0800846d 	.word	0x0800846d
 800844c:	0800846d 	.word	0x0800846d
 8008450:	0800846d 	.word	0x0800846d
 8008454:	0800846d 	.word	0x0800846d
 8008458:	0800846d 	.word	0x0800846d
 800845c:	0800846d 	.word	0x0800846d
 8008460:	0800846d 	.word	0x0800846d
 8008464:	0800846d 	.word	0x0800846d
 8008468:	0800846d 	.word	0x0800846d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800846c:	bf00      	nop
  }

  return (USBD_OK);
 800846e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008470:	4618      	mov	r0, r3
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	bc80      	pop	{r7}
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop

0800847c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008486:	6879      	ldr	r1, [r7, #4]
 8008488:	4805      	ldr	r0, [pc, #20]	; (80084a0 <CDC_Receive_FS+0x24>)
 800848a:	f7fe fe46 	bl	800711a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800848e:	4804      	ldr	r0, [pc, #16]	; (80084a0 <CDC_Receive_FS+0x24>)
 8008490:	f7fe fe85 	bl	800719e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008494:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008496:	4618      	mov	r0, r3
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	20000288 	.word	0x20000288

080084a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	460b      	mov	r3, r1
 80084ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80084b0:	2300      	movs	r3, #0
 80084b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80084b4:	4b0d      	ldr	r3, [pc, #52]	; (80084ec <CDC_Transmit_FS+0x48>)
 80084b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d001      	beq.n	80084ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e00b      	b.n	80084e2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80084ca:	887b      	ldrh	r3, [r7, #2]
 80084cc:	461a      	mov	r2, r3
 80084ce:	6879      	ldr	r1, [r7, #4]
 80084d0:	4806      	ldr	r0, [pc, #24]	; (80084ec <CDC_Transmit_FS+0x48>)
 80084d2:	f7fe fe09 	bl	80070e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80084d6:	4805      	ldr	r0, [pc, #20]	; (80084ec <CDC_Transmit_FS+0x48>)
 80084d8:	f7fe fe32 	bl	8007140 <USBD_CDC_TransmitPacket>
 80084dc:	4603      	mov	r3, r0
 80084de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	20000288 	.word	0x20000288

080084f0 <CDC_getReady>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_getReady(void)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *) hUsbDeviceFS.pClassData;
 80084f6:	4b08      	ldr	r3, [pc, #32]	; (8008518 <CDC_getReady+0x28>)
 80084f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084fc:	607b      	str	r3, [r7, #4]
	if(hcdc -> TxState != 0)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008504:	2b00      	cmp	r3, #0
 8008506:	d001      	beq.n	800850c <CDC_getReady+0x1c>
	{
		return USBD_BUSY;
 8008508:	2301      	movs	r3, #1
 800850a:	e000      	b.n	800850e <CDC_getReady+0x1e>
	}
	else
	{
		return USBD_OK;
 800850c:	2300      	movs	r3, #0
	}
}
 800850e:	4618      	mov	r0, r3
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	bc80      	pop	{r7}
 8008516:	4770      	bx	lr
 8008518:	20000288 	.word	0x20000288

0800851c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	4603      	mov	r3, r0
 8008524:	6039      	str	r1, [r7, #0]
 8008526:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	2212      	movs	r2, #18
 800852c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800852e:	4b03      	ldr	r3, [pc, #12]	; (800853c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008530:	4618      	mov	r0, r3
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	bc80      	pop	{r7}
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	2000014c 	.word	0x2000014c

08008540 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	4603      	mov	r3, r0
 8008548:	6039      	str	r1, [r7, #0]
 800854a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	2204      	movs	r2, #4
 8008550:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008552:	4b03      	ldr	r3, [pc, #12]	; (8008560 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008554:	4618      	mov	r0, r3
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	bc80      	pop	{r7}
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	20000160 	.word	0x20000160

08008564 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	4603      	mov	r3, r0
 800856c:	6039      	str	r1, [r7, #0]
 800856e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008570:	79fb      	ldrb	r3, [r7, #7]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d105      	bne.n	8008582 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	4907      	ldr	r1, [pc, #28]	; (8008598 <USBD_FS_ProductStrDescriptor+0x34>)
 800857a:	4808      	ldr	r0, [pc, #32]	; (800859c <USBD_FS_ProductStrDescriptor+0x38>)
 800857c:	f7ff fdf6 	bl	800816c <USBD_GetString>
 8008580:	e004      	b.n	800858c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	4904      	ldr	r1, [pc, #16]	; (8008598 <USBD_FS_ProductStrDescriptor+0x34>)
 8008586:	4805      	ldr	r0, [pc, #20]	; (800859c <USBD_FS_ProductStrDescriptor+0x38>)
 8008588:	f7ff fdf0 	bl	800816c <USBD_GetString>
  }
  return USBD_StrDesc;
 800858c:	4b02      	ldr	r3, [pc, #8]	; (8008598 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800858e:	4618      	mov	r0, r3
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	20000d4c 	.word	0x20000d4c
 800859c:	08009604 	.word	0x08009604

080085a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	4603      	mov	r3, r0
 80085a8:	6039      	str	r1, [r7, #0]
 80085aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	4904      	ldr	r1, [pc, #16]	; (80085c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80085b0:	4804      	ldr	r0, [pc, #16]	; (80085c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80085b2:	f7ff fddb 	bl	800816c <USBD_GetString>
  return USBD_StrDesc;
 80085b6:	4b02      	ldr	r3, [pc, #8]	; (80085c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	20000d4c 	.word	0x20000d4c
 80085c4:	08009618 	.word	0x08009618

080085c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	4603      	mov	r3, r0
 80085d0:	6039      	str	r1, [r7, #0]
 80085d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	221a      	movs	r2, #26
 80085d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80085da:	f000 f843 	bl	8008664 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80085de:	4b02      	ldr	r3, [pc, #8]	; (80085e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	20000164 	.word	0x20000164

080085ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	4603      	mov	r3, r0
 80085f4:	6039      	str	r1, [r7, #0]
 80085f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80085f8:	79fb      	ldrb	r3, [r7, #7]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d105      	bne.n	800860a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085fe:	683a      	ldr	r2, [r7, #0]
 8008600:	4907      	ldr	r1, [pc, #28]	; (8008620 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008602:	4808      	ldr	r0, [pc, #32]	; (8008624 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008604:	f7ff fdb2 	bl	800816c <USBD_GetString>
 8008608:	e004      	b.n	8008614 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	4904      	ldr	r1, [pc, #16]	; (8008620 <USBD_FS_ConfigStrDescriptor+0x34>)
 800860e:	4805      	ldr	r0, [pc, #20]	; (8008624 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008610:	f7ff fdac 	bl	800816c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008614:	4b02      	ldr	r3, [pc, #8]	; (8008620 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008616:	4618      	mov	r0, r3
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	20000d4c 	.word	0x20000d4c
 8008624:	0800962c 	.word	0x0800962c

08008628 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	4603      	mov	r3, r0
 8008630:	6039      	str	r1, [r7, #0]
 8008632:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008634:	79fb      	ldrb	r3, [r7, #7]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d105      	bne.n	8008646 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800863a:	683a      	ldr	r2, [r7, #0]
 800863c:	4907      	ldr	r1, [pc, #28]	; (800865c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800863e:	4808      	ldr	r0, [pc, #32]	; (8008660 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008640:	f7ff fd94 	bl	800816c <USBD_GetString>
 8008644:	e004      	b.n	8008650 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	4904      	ldr	r1, [pc, #16]	; (800865c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800864a:	4805      	ldr	r0, [pc, #20]	; (8008660 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800864c:	f7ff fd8e 	bl	800816c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008650:	4b02      	ldr	r3, [pc, #8]	; (800865c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008652:	4618      	mov	r0, r3
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	20000d4c 	.word	0x20000d4c
 8008660:	08009638 	.word	0x08009638

08008664 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800866a:	4b0f      	ldr	r3, [pc, #60]	; (80086a8 <Get_SerialNum+0x44>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008670:	4b0e      	ldr	r3, [pc, #56]	; (80086ac <Get_SerialNum+0x48>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008676:	4b0e      	ldr	r3, [pc, #56]	; (80086b0 <Get_SerialNum+0x4c>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4413      	add	r3, r2
 8008682:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d009      	beq.n	800869e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800868a:	2208      	movs	r2, #8
 800868c:	4909      	ldr	r1, [pc, #36]	; (80086b4 <Get_SerialNum+0x50>)
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f000 f814 	bl	80086bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008694:	2204      	movs	r2, #4
 8008696:	4908      	ldr	r1, [pc, #32]	; (80086b8 <Get_SerialNum+0x54>)
 8008698:	68b8      	ldr	r0, [r7, #8]
 800869a:	f000 f80f 	bl	80086bc <IntToUnicode>
  }
}
 800869e:	bf00      	nop
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	1ffff7e8 	.word	0x1ffff7e8
 80086ac:	1ffff7ec 	.word	0x1ffff7ec
 80086b0:	1ffff7f0 	.word	0x1ffff7f0
 80086b4:	20000166 	.word	0x20000166
 80086b8:	20000176 	.word	0x20000176

080086bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80086bc:	b480      	push	{r7}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	4613      	mov	r3, r2
 80086c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80086ca:	2300      	movs	r3, #0
 80086cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80086ce:	2300      	movs	r3, #0
 80086d0:	75fb      	strb	r3, [r7, #23]
 80086d2:	e027      	b.n	8008724 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	0f1b      	lsrs	r3, r3, #28
 80086d8:	2b09      	cmp	r3, #9
 80086da:	d80b      	bhi.n	80086f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	0f1b      	lsrs	r3, r3, #28
 80086e0:	b2da      	uxtb	r2, r3
 80086e2:	7dfb      	ldrb	r3, [r7, #23]
 80086e4:	005b      	lsls	r3, r3, #1
 80086e6:	4619      	mov	r1, r3
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	440b      	add	r3, r1
 80086ec:	3230      	adds	r2, #48	; 0x30
 80086ee:	b2d2      	uxtb	r2, r2
 80086f0:	701a      	strb	r2, [r3, #0]
 80086f2:	e00a      	b.n	800870a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	0f1b      	lsrs	r3, r3, #28
 80086f8:	b2da      	uxtb	r2, r3
 80086fa:	7dfb      	ldrb	r3, [r7, #23]
 80086fc:	005b      	lsls	r3, r3, #1
 80086fe:	4619      	mov	r1, r3
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	440b      	add	r3, r1
 8008704:	3237      	adds	r2, #55	; 0x37
 8008706:	b2d2      	uxtb	r2, r2
 8008708:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	011b      	lsls	r3, r3, #4
 800870e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008710:	7dfb      	ldrb	r3, [r7, #23]
 8008712:	005b      	lsls	r3, r3, #1
 8008714:	3301      	adds	r3, #1
 8008716:	68ba      	ldr	r2, [r7, #8]
 8008718:	4413      	add	r3, r2
 800871a:	2200      	movs	r2, #0
 800871c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800871e:	7dfb      	ldrb	r3, [r7, #23]
 8008720:	3301      	adds	r3, #1
 8008722:	75fb      	strb	r3, [r7, #23]
 8008724:	7dfa      	ldrb	r2, [r7, #23]
 8008726:	79fb      	ldrb	r3, [r7, #7]
 8008728:	429a      	cmp	r2, r3
 800872a:	d3d3      	bcc.n	80086d4 <IntToUnicode+0x18>
  }
}
 800872c:	bf00      	nop
 800872e:	bf00      	nop
 8008730:	371c      	adds	r7, #28
 8008732:	46bd      	mov	sp, r7
 8008734:	bc80      	pop	{r7}
 8008736:	4770      	bx	lr

08008738 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a0d      	ldr	r2, [pc, #52]	; (800877c <HAL_PCD_MspInit+0x44>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d113      	bne.n	8008772 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800874a:	4b0d      	ldr	r3, [pc, #52]	; (8008780 <HAL_PCD_MspInit+0x48>)
 800874c:	69db      	ldr	r3, [r3, #28]
 800874e:	4a0c      	ldr	r2, [pc, #48]	; (8008780 <HAL_PCD_MspInit+0x48>)
 8008750:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008754:	61d3      	str	r3, [r2, #28]
 8008756:	4b0a      	ldr	r3, [pc, #40]	; (8008780 <HAL_PCD_MspInit+0x48>)
 8008758:	69db      	ldr	r3, [r3, #28]
 800875a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800875e:	60fb      	str	r3, [r7, #12]
 8008760:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008762:	2200      	movs	r2, #0
 8008764:	2100      	movs	r1, #0
 8008766:	2014      	movs	r0, #20
 8008768:	f7f8 fe2b 	bl	80013c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800876c:	2014      	movs	r0, #20
 800876e:	f7f8 fe44 	bl	80013fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008772:	bf00      	nop
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	40005c00 	.word	0x40005c00
 8008780:	40021000 	.word	0x40021000

08008784 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008798:	4619      	mov	r1, r3
 800879a:	4610      	mov	r0, r2
 800879c:	f7fe fdb5 	bl	800730a <USBD_LL_SetupStage>
}
 80087a0:	bf00      	nop
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	460b      	mov	r3, r1
 80087b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80087ba:	78fa      	ldrb	r2, [r7, #3]
 80087bc:	6879      	ldr	r1, [r7, #4]
 80087be:	4613      	mov	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	00db      	lsls	r3, r3, #3
 80087c6:	440b      	add	r3, r1
 80087c8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	78fb      	ldrb	r3, [r7, #3]
 80087d0:	4619      	mov	r1, r3
 80087d2:	f7fe fde7 	bl	80073a4 <USBD_LL_DataOutStage>
}
 80087d6:	bf00      	nop
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b082      	sub	sp, #8
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
 80087e6:	460b      	mov	r3, r1
 80087e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80087f0:	78fa      	ldrb	r2, [r7, #3]
 80087f2:	6879      	ldr	r1, [r7, #4]
 80087f4:	4613      	mov	r3, r2
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	4413      	add	r3, r2
 80087fa:	00db      	lsls	r3, r3, #3
 80087fc:	440b      	add	r3, r1
 80087fe:	333c      	adds	r3, #60	; 0x3c
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	78fb      	ldrb	r3, [r7, #3]
 8008804:	4619      	mov	r1, r3
 8008806:	f7fe fe3e 	bl	8007486 <USBD_LL_DataInStage>
}
 800880a:	bf00      	nop
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b082      	sub	sp, #8
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008820:	4618      	mov	r0, r3
 8008822:	f7fe ff4e 	bl	80076c2 <USBD_LL_SOF>
}
 8008826:	bf00      	nop
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b084      	sub	sp, #16
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008836:	2301      	movs	r3, #1
 8008838:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	2b02      	cmp	r3, #2
 8008840:	d001      	beq.n	8008846 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008842:	f7f7 fe47 	bl	80004d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800884c:	7bfa      	ldrb	r2, [r7, #15]
 800884e:	4611      	mov	r1, r2
 8008850:	4618      	mov	r0, r3
 8008852:	f7fe fefe 	bl	8007652 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800885c:	4618      	mov	r0, r3
 800885e:	f7fe feb7 	bl	80075d0 <USBD_LL_Reset>
}
 8008862:	bf00      	nop
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
	...

0800886c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800887a:	4618      	mov	r0, r3
 800887c:	f7fe fef8 	bl	8007670 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d005      	beq.n	8008894 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008888:	4b04      	ldr	r3, [pc, #16]	; (800889c <HAL_PCD_SuspendCallback+0x30>)
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	4a03      	ldr	r2, [pc, #12]	; (800889c <HAL_PCD_SuspendCallback+0x30>)
 800888e:	f043 0306 	orr.w	r3, r3, #6
 8008892:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008894:	bf00      	nop
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	e000ed00 	.word	0xe000ed00

080088a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fef2 	bl	8007698 <USBD_LL_Resume>
}
 80088b4:	bf00      	nop
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80088c4:	4a28      	ldr	r2, [pc, #160]	; (8008968 <USBD_LL_Init+0xac>)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a26      	ldr	r2, [pc, #152]	; (8008968 <USBD_LL_Init+0xac>)
 80088d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80088d4:	4b24      	ldr	r3, [pc, #144]	; (8008968 <USBD_LL_Init+0xac>)
 80088d6:	4a25      	ldr	r2, [pc, #148]	; (800896c <USBD_LL_Init+0xb0>)
 80088d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80088da:	4b23      	ldr	r3, [pc, #140]	; (8008968 <USBD_LL_Init+0xac>)
 80088dc:	2208      	movs	r2, #8
 80088de:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80088e0:	4b21      	ldr	r3, [pc, #132]	; (8008968 <USBD_LL_Init+0xac>)
 80088e2:	2202      	movs	r2, #2
 80088e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80088e6:	4b20      	ldr	r3, [pc, #128]	; (8008968 <USBD_LL_Init+0xac>)
 80088e8:	2200      	movs	r2, #0
 80088ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80088ec:	4b1e      	ldr	r3, [pc, #120]	; (8008968 <USBD_LL_Init+0xac>)
 80088ee:	2200      	movs	r2, #0
 80088f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80088f2:	4b1d      	ldr	r3, [pc, #116]	; (8008968 <USBD_LL_Init+0xac>)
 80088f4:	2200      	movs	r2, #0
 80088f6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80088f8:	481b      	ldr	r0, [pc, #108]	; (8008968 <USBD_LL_Init+0xac>)
 80088fa:	f7f8 ff35 	bl	8001768 <HAL_PCD_Init>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008904:	f7f7 fde6 	bl	80004d4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800890e:	2318      	movs	r3, #24
 8008910:	2200      	movs	r2, #0
 8008912:	2100      	movs	r1, #0
 8008914:	f7fa fc54 	bl	80031c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800891e:	2358      	movs	r3, #88	; 0x58
 8008920:	2200      	movs	r2, #0
 8008922:	2180      	movs	r1, #128	; 0x80
 8008924:	f7fa fc4c 	bl	80031c0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800892e:	23c0      	movs	r3, #192	; 0xc0
 8008930:	2200      	movs	r2, #0
 8008932:	2181      	movs	r1, #129	; 0x81
 8008934:	f7fa fc44 	bl	80031c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800893e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008942:	2200      	movs	r2, #0
 8008944:	2101      	movs	r1, #1
 8008946:	f7fa fc3b 	bl	80031c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008950:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008954:	2200      	movs	r2, #0
 8008956:	2182      	movs	r1, #130	; 0x82
 8008958:	f7fa fc32 	bl	80031c0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	20000f4c 	.word	0x20000f4c
 800896c:	40005c00 	.word	0x40005c00

08008970 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008978:	2300      	movs	r3, #0
 800897a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800897c:	2300      	movs	r3, #0
 800897e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008986:	4618      	mov	r0, r3
 8008988:	f7f8 ffed 	bl	8001966 <HAL_PCD_Start>
 800898c:	4603      	mov	r3, r0
 800898e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008990:	7bfb      	ldrb	r3, [r7, #15]
 8008992:	4618      	mov	r0, r3
 8008994:	f000 f94e 	bl	8008c34 <USBD_Get_USB_Status>
 8008998:	4603      	mov	r3, r0
 800899a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800899c:	7bbb      	ldrb	r3, [r7, #14]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b084      	sub	sp, #16
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
 80089ae:	4608      	mov	r0, r1
 80089b0:	4611      	mov	r1, r2
 80089b2:	461a      	mov	r2, r3
 80089b4:	4603      	mov	r3, r0
 80089b6:	70fb      	strb	r3, [r7, #3]
 80089b8:	460b      	mov	r3, r1
 80089ba:	70bb      	strb	r3, [r7, #2]
 80089bc:	4613      	mov	r3, r2
 80089be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089ce:	78bb      	ldrb	r3, [r7, #2]
 80089d0:	883a      	ldrh	r2, [r7, #0]
 80089d2:	78f9      	ldrb	r1, [r7, #3]
 80089d4:	f7f9 f942 	bl	8001c5c <HAL_PCD_EP_Open>
 80089d8:	4603      	mov	r3, r0
 80089da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
 80089de:	4618      	mov	r0, r3
 80089e0:	f000 f928 	bl	8008c34 <USBD_Get_USB_Status>
 80089e4:	4603      	mov	r3, r0
 80089e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b084      	sub	sp, #16
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
 80089fa:	460b      	mov	r3, r1
 80089fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a0c:	78fa      	ldrb	r2, [r7, #3]
 8008a0e:	4611      	mov	r1, r2
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7f9 f980 	bl	8001d16 <HAL_PCD_EP_Close>
 8008a16:	4603      	mov	r3, r0
 8008a18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a1a:	7bfb      	ldrb	r3, [r7, #15]
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f000 f909 	bl	8008c34 <USBD_Get_USB_Status>
 8008a22:	4603      	mov	r3, r0
 8008a24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a26:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a4a:	78fa      	ldrb	r2, [r7, #3]
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7f9 fa28 	bl	8001ea4 <HAL_PCD_EP_SetStall>
 8008a54:	4603      	mov	r3, r0
 8008a56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f000 f8ea 	bl	8008c34 <USBD_Get_USB_Status>
 8008a60:	4603      	mov	r3, r0
 8008a62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b084      	sub	sp, #16
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
 8008a76:	460b      	mov	r3, r1
 8008a78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a88:	78fa      	ldrb	r2, [r7, #3]
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7f9 fa69 	bl	8001f64 <HAL_PCD_EP_ClrStall>
 8008a92:	4603      	mov	r3, r0
 8008a94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f000 f8cb 	bl	8008c34 <USBD_Get_USB_Status>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aa2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008abe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008ac0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	da0c      	bge.n	8008ae2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ac8:	78fb      	ldrb	r3, [r7, #3]
 8008aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ace:	68f9      	ldr	r1, [r7, #12]
 8008ad0:	1c5a      	adds	r2, r3, #1
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	00db      	lsls	r3, r3, #3
 8008ada:	440b      	add	r3, r1
 8008adc:	3302      	adds	r3, #2
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	e00b      	b.n	8008afa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ae2:	78fb      	ldrb	r3, [r7, #3]
 8008ae4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ae8:	68f9      	ldr	r1, [r7, #12]
 8008aea:	4613      	mov	r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	00db      	lsls	r3, r3, #3
 8008af2:	440b      	add	r3, r1
 8008af4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008af8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bc80      	pop	{r7}
 8008b02:	4770      	bx	lr

08008b04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b10:	2300      	movs	r3, #0
 8008b12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b1e:	78fa      	ldrb	r2, [r7, #3]
 8008b20:	4611      	mov	r1, r2
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7f9 f875 	bl	8001c12 <HAL_PCD_SetAddress>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 f880 	bl	8008c34 <USBD_Get_USB_Status>
 8008b34:	4603      	mov	r3, r0
 8008b36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b086      	sub	sp, #24
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	60f8      	str	r0, [r7, #12]
 8008b4a:	607a      	str	r2, [r7, #4]
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	460b      	mov	r3, r1
 8008b50:	72fb      	strb	r3, [r7, #11]
 8008b52:	4613      	mov	r3, r2
 8008b54:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b64:	893b      	ldrh	r3, [r7, #8]
 8008b66:	7af9      	ldrb	r1, [r7, #11]
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	f7f9 f964 	bl	8001e36 <HAL_PCD_EP_Transmit>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b72:	7dfb      	ldrb	r3, [r7, #23]
 8008b74:	4618      	mov	r0, r3
 8008b76:	f000 f85d 	bl	8008c34 <USBD_Get_USB_Status>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3718      	adds	r7, #24
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	607a      	str	r2, [r7, #4]
 8008b92:	461a      	mov	r2, r3
 8008b94:	460b      	mov	r3, r1
 8008b96:	72fb      	strb	r3, [r7, #11]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008baa:	893b      	ldrh	r3, [r7, #8]
 8008bac:	7af9      	ldrb	r1, [r7, #11]
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	f7f9 f8f9 	bl	8001da6 <HAL_PCD_EP_Receive>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bb8:	7dfb      	ldrb	r3, [r7, #23]
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f000 f83a 	bl	8008c34 <USBD_Get_USB_Status>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bc4:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3718      	adds	r7, #24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b082      	sub	sp, #8
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008be0:	78fa      	ldrb	r2, [r7, #3]
 8008be2:	4611      	mov	r1, r2
 8008be4:	4618      	mov	r0, r3
 8008be6:	f7f9 f90f 	bl	8001e08 <HAL_PCD_EP_GetRxCount>
 8008bea:	4603      	mov	r3, r0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008bfc:	4b02      	ldr	r3, [pc, #8]	; (8008c08 <USBD_static_malloc+0x14>)
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	370c      	adds	r7, #12
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bc80      	pop	{r7}
 8008c06:	4770      	bx	lr
 8008c08:	2000123c 	.word	0x2000123c

08008c0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]

}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bc80      	pop	{r7}
 8008c1c:	4770      	bx	lr

08008c1e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b083      	sub	sp, #12
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
 8008c26:	460b      	mov	r3, r1
 8008c28:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008c2a:	bf00      	nop
 8008c2c:	370c      	adds	r7, #12
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bc80      	pop	{r7}
 8008c32:	4770      	bx	lr

08008c34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c42:	79fb      	ldrb	r3, [r7, #7]
 8008c44:	2b03      	cmp	r3, #3
 8008c46:	d817      	bhi.n	8008c78 <USBD_Get_USB_Status+0x44>
 8008c48:	a201      	add	r2, pc, #4	; (adr r2, 8008c50 <USBD_Get_USB_Status+0x1c>)
 8008c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4e:	bf00      	nop
 8008c50:	08008c61 	.word	0x08008c61
 8008c54:	08008c67 	.word	0x08008c67
 8008c58:	08008c6d 	.word	0x08008c6d
 8008c5c:	08008c73 	.word	0x08008c73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	73fb      	strb	r3, [r7, #15]
    break;
 8008c64:	e00b      	b.n	8008c7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c66:	2302      	movs	r3, #2
 8008c68:	73fb      	strb	r3, [r7, #15]
    break;
 8008c6a:	e008      	b.n	8008c7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c70:	e005      	b.n	8008c7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c72:	2302      	movs	r3, #2
 8008c74:	73fb      	strb	r3, [r7, #15]
    break;
 8008c76:	e002      	b.n	8008c7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c78:	2302      	movs	r3, #2
 8008c7a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c7c:	bf00      	nop
  }
  return usb_status;
 8008c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bc80      	pop	{r7}
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop

08008c8c <__errno>:
 8008c8c:	4b01      	ldr	r3, [pc, #4]	; (8008c94 <__errno+0x8>)
 8008c8e:	6818      	ldr	r0, [r3, #0]
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	20000180 	.word	0x20000180

08008c98 <__libc_init_array>:
 8008c98:	b570      	push	{r4, r5, r6, lr}
 8008c9a:	2600      	movs	r6, #0
 8008c9c:	4d0c      	ldr	r5, [pc, #48]	; (8008cd0 <__libc_init_array+0x38>)
 8008c9e:	4c0d      	ldr	r4, [pc, #52]	; (8008cd4 <__libc_init_array+0x3c>)
 8008ca0:	1b64      	subs	r4, r4, r5
 8008ca2:	10a4      	asrs	r4, r4, #2
 8008ca4:	42a6      	cmp	r6, r4
 8008ca6:	d109      	bne.n	8008cbc <__libc_init_array+0x24>
 8008ca8:	f000 fc9c 	bl	80095e4 <_init>
 8008cac:	2600      	movs	r6, #0
 8008cae:	4d0a      	ldr	r5, [pc, #40]	; (8008cd8 <__libc_init_array+0x40>)
 8008cb0:	4c0a      	ldr	r4, [pc, #40]	; (8008cdc <__libc_init_array+0x44>)
 8008cb2:	1b64      	subs	r4, r4, r5
 8008cb4:	10a4      	asrs	r4, r4, #2
 8008cb6:	42a6      	cmp	r6, r4
 8008cb8:	d105      	bne.n	8008cc6 <__libc_init_array+0x2e>
 8008cba:	bd70      	pop	{r4, r5, r6, pc}
 8008cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cc0:	4798      	blx	r3
 8008cc2:	3601      	adds	r6, #1
 8008cc4:	e7ee      	b.n	8008ca4 <__libc_init_array+0xc>
 8008cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cca:	4798      	blx	r3
 8008ccc:	3601      	adds	r6, #1
 8008cce:	e7f2      	b.n	8008cb6 <__libc_init_array+0x1e>
 8008cd0:	080096bc 	.word	0x080096bc
 8008cd4:	080096bc 	.word	0x080096bc
 8008cd8:	080096bc 	.word	0x080096bc
 8008cdc:	080096c0 	.word	0x080096c0

08008ce0 <memset>:
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	4402      	add	r2, r0
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d100      	bne.n	8008cea <memset+0xa>
 8008ce8:	4770      	bx	lr
 8008cea:	f803 1b01 	strb.w	r1, [r3], #1
 8008cee:	e7f9      	b.n	8008ce4 <memset+0x4>

08008cf0 <siprintf>:
 8008cf0:	b40e      	push	{r1, r2, r3}
 8008cf2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008cf6:	b500      	push	{lr}
 8008cf8:	b09c      	sub	sp, #112	; 0x70
 8008cfa:	ab1d      	add	r3, sp, #116	; 0x74
 8008cfc:	9002      	str	r0, [sp, #8]
 8008cfe:	9006      	str	r0, [sp, #24]
 8008d00:	9107      	str	r1, [sp, #28]
 8008d02:	9104      	str	r1, [sp, #16]
 8008d04:	4808      	ldr	r0, [pc, #32]	; (8008d28 <siprintf+0x38>)
 8008d06:	4909      	ldr	r1, [pc, #36]	; (8008d2c <siprintf+0x3c>)
 8008d08:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d0c:	9105      	str	r1, [sp, #20]
 8008d0e:	6800      	ldr	r0, [r0, #0]
 8008d10:	a902      	add	r1, sp, #8
 8008d12:	9301      	str	r3, [sp, #4]
 8008d14:	f000 f868 	bl	8008de8 <_svfiprintf_r>
 8008d18:	2200      	movs	r2, #0
 8008d1a:	9b02      	ldr	r3, [sp, #8]
 8008d1c:	701a      	strb	r2, [r3, #0]
 8008d1e:	b01c      	add	sp, #112	; 0x70
 8008d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d24:	b003      	add	sp, #12
 8008d26:	4770      	bx	lr
 8008d28:	20000180 	.word	0x20000180
 8008d2c:	ffff0208 	.word	0xffff0208

08008d30 <__ssputs_r>:
 8008d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d34:	688e      	ldr	r6, [r1, #8]
 8008d36:	4682      	mov	sl, r0
 8008d38:	429e      	cmp	r6, r3
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	4690      	mov	r8, r2
 8008d3e:	461f      	mov	r7, r3
 8008d40:	d838      	bhi.n	8008db4 <__ssputs_r+0x84>
 8008d42:	898a      	ldrh	r2, [r1, #12]
 8008d44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d48:	d032      	beq.n	8008db0 <__ssputs_r+0x80>
 8008d4a:	6825      	ldr	r5, [r4, #0]
 8008d4c:	6909      	ldr	r1, [r1, #16]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	eba5 0901 	sub.w	r9, r5, r1
 8008d54:	6965      	ldr	r5, [r4, #20]
 8008d56:	444b      	add	r3, r9
 8008d58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d60:	106d      	asrs	r5, r5, #1
 8008d62:	429d      	cmp	r5, r3
 8008d64:	bf38      	it	cc
 8008d66:	461d      	movcc	r5, r3
 8008d68:	0553      	lsls	r3, r2, #21
 8008d6a:	d531      	bpl.n	8008dd0 <__ssputs_r+0xa0>
 8008d6c:	4629      	mov	r1, r5
 8008d6e:	f000 fb6f 	bl	8009450 <_malloc_r>
 8008d72:	4606      	mov	r6, r0
 8008d74:	b950      	cbnz	r0, 8008d8c <__ssputs_r+0x5c>
 8008d76:	230c      	movs	r3, #12
 8008d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d7c:	f8ca 3000 	str.w	r3, [sl]
 8008d80:	89a3      	ldrh	r3, [r4, #12]
 8008d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d86:	81a3      	strh	r3, [r4, #12]
 8008d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8c:	464a      	mov	r2, r9
 8008d8e:	6921      	ldr	r1, [r4, #16]
 8008d90:	f000 face 	bl	8009330 <memcpy>
 8008d94:	89a3      	ldrh	r3, [r4, #12]
 8008d96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d9e:	81a3      	strh	r3, [r4, #12]
 8008da0:	6126      	str	r6, [r4, #16]
 8008da2:	444e      	add	r6, r9
 8008da4:	6026      	str	r6, [r4, #0]
 8008da6:	463e      	mov	r6, r7
 8008da8:	6165      	str	r5, [r4, #20]
 8008daa:	eba5 0509 	sub.w	r5, r5, r9
 8008dae:	60a5      	str	r5, [r4, #8]
 8008db0:	42be      	cmp	r6, r7
 8008db2:	d900      	bls.n	8008db6 <__ssputs_r+0x86>
 8008db4:	463e      	mov	r6, r7
 8008db6:	4632      	mov	r2, r6
 8008db8:	4641      	mov	r1, r8
 8008dba:	6820      	ldr	r0, [r4, #0]
 8008dbc:	f000 fac6 	bl	800934c <memmove>
 8008dc0:	68a3      	ldr	r3, [r4, #8]
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	1b9b      	subs	r3, r3, r6
 8008dc6:	60a3      	str	r3, [r4, #8]
 8008dc8:	6823      	ldr	r3, [r4, #0]
 8008dca:	4433      	add	r3, r6
 8008dcc:	6023      	str	r3, [r4, #0]
 8008dce:	e7db      	b.n	8008d88 <__ssputs_r+0x58>
 8008dd0:	462a      	mov	r2, r5
 8008dd2:	f000 fbb1 	bl	8009538 <_realloc_r>
 8008dd6:	4606      	mov	r6, r0
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	d1e1      	bne.n	8008da0 <__ssputs_r+0x70>
 8008ddc:	4650      	mov	r0, sl
 8008dde:	6921      	ldr	r1, [r4, #16]
 8008de0:	f000 face 	bl	8009380 <_free_r>
 8008de4:	e7c7      	b.n	8008d76 <__ssputs_r+0x46>
	...

08008de8 <_svfiprintf_r>:
 8008de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dec:	4698      	mov	r8, r3
 8008dee:	898b      	ldrh	r3, [r1, #12]
 8008df0:	4607      	mov	r7, r0
 8008df2:	061b      	lsls	r3, r3, #24
 8008df4:	460d      	mov	r5, r1
 8008df6:	4614      	mov	r4, r2
 8008df8:	b09d      	sub	sp, #116	; 0x74
 8008dfa:	d50e      	bpl.n	8008e1a <_svfiprintf_r+0x32>
 8008dfc:	690b      	ldr	r3, [r1, #16]
 8008dfe:	b963      	cbnz	r3, 8008e1a <_svfiprintf_r+0x32>
 8008e00:	2140      	movs	r1, #64	; 0x40
 8008e02:	f000 fb25 	bl	8009450 <_malloc_r>
 8008e06:	6028      	str	r0, [r5, #0]
 8008e08:	6128      	str	r0, [r5, #16]
 8008e0a:	b920      	cbnz	r0, 8008e16 <_svfiprintf_r+0x2e>
 8008e0c:	230c      	movs	r3, #12
 8008e0e:	603b      	str	r3, [r7, #0]
 8008e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e14:	e0d1      	b.n	8008fba <_svfiprintf_r+0x1d2>
 8008e16:	2340      	movs	r3, #64	; 0x40
 8008e18:	616b      	str	r3, [r5, #20]
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e1e:	2320      	movs	r3, #32
 8008e20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e24:	2330      	movs	r3, #48	; 0x30
 8008e26:	f04f 0901 	mov.w	r9, #1
 8008e2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e2e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008fd4 <_svfiprintf_r+0x1ec>
 8008e32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e36:	4623      	mov	r3, r4
 8008e38:	469a      	mov	sl, r3
 8008e3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e3e:	b10a      	cbz	r2, 8008e44 <_svfiprintf_r+0x5c>
 8008e40:	2a25      	cmp	r2, #37	; 0x25
 8008e42:	d1f9      	bne.n	8008e38 <_svfiprintf_r+0x50>
 8008e44:	ebba 0b04 	subs.w	fp, sl, r4
 8008e48:	d00b      	beq.n	8008e62 <_svfiprintf_r+0x7a>
 8008e4a:	465b      	mov	r3, fp
 8008e4c:	4622      	mov	r2, r4
 8008e4e:	4629      	mov	r1, r5
 8008e50:	4638      	mov	r0, r7
 8008e52:	f7ff ff6d 	bl	8008d30 <__ssputs_r>
 8008e56:	3001      	adds	r0, #1
 8008e58:	f000 80aa 	beq.w	8008fb0 <_svfiprintf_r+0x1c8>
 8008e5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e5e:	445a      	add	r2, fp
 8008e60:	9209      	str	r2, [sp, #36]	; 0x24
 8008e62:	f89a 3000 	ldrb.w	r3, [sl]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f000 80a2 	beq.w	8008fb0 <_svfiprintf_r+0x1c8>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e76:	f10a 0a01 	add.w	sl, sl, #1
 8008e7a:	9304      	str	r3, [sp, #16]
 8008e7c:	9307      	str	r3, [sp, #28]
 8008e7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e82:	931a      	str	r3, [sp, #104]	; 0x68
 8008e84:	4654      	mov	r4, sl
 8008e86:	2205      	movs	r2, #5
 8008e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e8c:	4851      	ldr	r0, [pc, #324]	; (8008fd4 <_svfiprintf_r+0x1ec>)
 8008e8e:	f000 fa41 	bl	8009314 <memchr>
 8008e92:	9a04      	ldr	r2, [sp, #16]
 8008e94:	b9d8      	cbnz	r0, 8008ece <_svfiprintf_r+0xe6>
 8008e96:	06d0      	lsls	r0, r2, #27
 8008e98:	bf44      	itt	mi
 8008e9a:	2320      	movmi	r3, #32
 8008e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ea0:	0711      	lsls	r1, r2, #28
 8008ea2:	bf44      	itt	mi
 8008ea4:	232b      	movmi	r3, #43	; 0x2b
 8008ea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8008eae:	2b2a      	cmp	r3, #42	; 0x2a
 8008eb0:	d015      	beq.n	8008ede <_svfiprintf_r+0xf6>
 8008eb2:	4654      	mov	r4, sl
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	f04f 0c0a 	mov.w	ip, #10
 8008eba:	9a07      	ldr	r2, [sp, #28]
 8008ebc:	4621      	mov	r1, r4
 8008ebe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ec2:	3b30      	subs	r3, #48	; 0x30
 8008ec4:	2b09      	cmp	r3, #9
 8008ec6:	d94e      	bls.n	8008f66 <_svfiprintf_r+0x17e>
 8008ec8:	b1b0      	cbz	r0, 8008ef8 <_svfiprintf_r+0x110>
 8008eca:	9207      	str	r2, [sp, #28]
 8008ecc:	e014      	b.n	8008ef8 <_svfiprintf_r+0x110>
 8008ece:	eba0 0308 	sub.w	r3, r0, r8
 8008ed2:	fa09 f303 	lsl.w	r3, r9, r3
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	46a2      	mov	sl, r4
 8008eda:	9304      	str	r3, [sp, #16]
 8008edc:	e7d2      	b.n	8008e84 <_svfiprintf_r+0x9c>
 8008ede:	9b03      	ldr	r3, [sp, #12]
 8008ee0:	1d19      	adds	r1, r3, #4
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	9103      	str	r1, [sp, #12]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	bfbb      	ittet	lt
 8008eea:	425b      	neglt	r3, r3
 8008eec:	f042 0202 	orrlt.w	r2, r2, #2
 8008ef0:	9307      	strge	r3, [sp, #28]
 8008ef2:	9307      	strlt	r3, [sp, #28]
 8008ef4:	bfb8      	it	lt
 8008ef6:	9204      	strlt	r2, [sp, #16]
 8008ef8:	7823      	ldrb	r3, [r4, #0]
 8008efa:	2b2e      	cmp	r3, #46	; 0x2e
 8008efc:	d10c      	bne.n	8008f18 <_svfiprintf_r+0x130>
 8008efe:	7863      	ldrb	r3, [r4, #1]
 8008f00:	2b2a      	cmp	r3, #42	; 0x2a
 8008f02:	d135      	bne.n	8008f70 <_svfiprintf_r+0x188>
 8008f04:	9b03      	ldr	r3, [sp, #12]
 8008f06:	3402      	adds	r4, #2
 8008f08:	1d1a      	adds	r2, r3, #4
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	9203      	str	r2, [sp, #12]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	bfb8      	it	lt
 8008f12:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008f16:	9305      	str	r3, [sp, #20]
 8008f18:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008fd8 <_svfiprintf_r+0x1f0>
 8008f1c:	2203      	movs	r2, #3
 8008f1e:	4650      	mov	r0, sl
 8008f20:	7821      	ldrb	r1, [r4, #0]
 8008f22:	f000 f9f7 	bl	8009314 <memchr>
 8008f26:	b140      	cbz	r0, 8008f3a <_svfiprintf_r+0x152>
 8008f28:	2340      	movs	r3, #64	; 0x40
 8008f2a:	eba0 000a 	sub.w	r0, r0, sl
 8008f2e:	fa03 f000 	lsl.w	r0, r3, r0
 8008f32:	9b04      	ldr	r3, [sp, #16]
 8008f34:	3401      	adds	r4, #1
 8008f36:	4303      	orrs	r3, r0
 8008f38:	9304      	str	r3, [sp, #16]
 8008f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f3e:	2206      	movs	r2, #6
 8008f40:	4826      	ldr	r0, [pc, #152]	; (8008fdc <_svfiprintf_r+0x1f4>)
 8008f42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f46:	f000 f9e5 	bl	8009314 <memchr>
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d038      	beq.n	8008fc0 <_svfiprintf_r+0x1d8>
 8008f4e:	4b24      	ldr	r3, [pc, #144]	; (8008fe0 <_svfiprintf_r+0x1f8>)
 8008f50:	bb1b      	cbnz	r3, 8008f9a <_svfiprintf_r+0x1b2>
 8008f52:	9b03      	ldr	r3, [sp, #12]
 8008f54:	3307      	adds	r3, #7
 8008f56:	f023 0307 	bic.w	r3, r3, #7
 8008f5a:	3308      	adds	r3, #8
 8008f5c:	9303      	str	r3, [sp, #12]
 8008f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f60:	4433      	add	r3, r6
 8008f62:	9309      	str	r3, [sp, #36]	; 0x24
 8008f64:	e767      	b.n	8008e36 <_svfiprintf_r+0x4e>
 8008f66:	460c      	mov	r4, r1
 8008f68:	2001      	movs	r0, #1
 8008f6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f6e:	e7a5      	b.n	8008ebc <_svfiprintf_r+0xd4>
 8008f70:	2300      	movs	r3, #0
 8008f72:	f04f 0c0a 	mov.w	ip, #10
 8008f76:	4619      	mov	r1, r3
 8008f78:	3401      	adds	r4, #1
 8008f7a:	9305      	str	r3, [sp, #20]
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f82:	3a30      	subs	r2, #48	; 0x30
 8008f84:	2a09      	cmp	r2, #9
 8008f86:	d903      	bls.n	8008f90 <_svfiprintf_r+0x1a8>
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d0c5      	beq.n	8008f18 <_svfiprintf_r+0x130>
 8008f8c:	9105      	str	r1, [sp, #20]
 8008f8e:	e7c3      	b.n	8008f18 <_svfiprintf_r+0x130>
 8008f90:	4604      	mov	r4, r0
 8008f92:	2301      	movs	r3, #1
 8008f94:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f98:	e7f0      	b.n	8008f7c <_svfiprintf_r+0x194>
 8008f9a:	ab03      	add	r3, sp, #12
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	462a      	mov	r2, r5
 8008fa0:	4638      	mov	r0, r7
 8008fa2:	4b10      	ldr	r3, [pc, #64]	; (8008fe4 <_svfiprintf_r+0x1fc>)
 8008fa4:	a904      	add	r1, sp, #16
 8008fa6:	f3af 8000 	nop.w
 8008faa:	1c42      	adds	r2, r0, #1
 8008fac:	4606      	mov	r6, r0
 8008fae:	d1d6      	bne.n	8008f5e <_svfiprintf_r+0x176>
 8008fb0:	89ab      	ldrh	r3, [r5, #12]
 8008fb2:	065b      	lsls	r3, r3, #25
 8008fb4:	f53f af2c 	bmi.w	8008e10 <_svfiprintf_r+0x28>
 8008fb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fba:	b01d      	add	sp, #116	; 0x74
 8008fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc0:	ab03      	add	r3, sp, #12
 8008fc2:	9300      	str	r3, [sp, #0]
 8008fc4:	462a      	mov	r2, r5
 8008fc6:	4638      	mov	r0, r7
 8008fc8:	4b06      	ldr	r3, [pc, #24]	; (8008fe4 <_svfiprintf_r+0x1fc>)
 8008fca:	a904      	add	r1, sp, #16
 8008fcc:	f000 f87c 	bl	80090c8 <_printf_i>
 8008fd0:	e7eb      	b.n	8008faa <_svfiprintf_r+0x1c2>
 8008fd2:	bf00      	nop
 8008fd4:	08009686 	.word	0x08009686
 8008fd8:	0800968c 	.word	0x0800968c
 8008fdc:	08009690 	.word	0x08009690
 8008fe0:	00000000 	.word	0x00000000
 8008fe4:	08008d31 	.word	0x08008d31

08008fe8 <_printf_common>:
 8008fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fec:	4616      	mov	r6, r2
 8008fee:	4699      	mov	r9, r3
 8008ff0:	688a      	ldr	r2, [r1, #8]
 8008ff2:	690b      	ldr	r3, [r1, #16]
 8008ff4:	4607      	mov	r7, r0
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	bfb8      	it	lt
 8008ffa:	4613      	movlt	r3, r2
 8008ffc:	6033      	str	r3, [r6, #0]
 8008ffe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009002:	460c      	mov	r4, r1
 8009004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009008:	b10a      	cbz	r2, 800900e <_printf_common+0x26>
 800900a:	3301      	adds	r3, #1
 800900c:	6033      	str	r3, [r6, #0]
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	0699      	lsls	r1, r3, #26
 8009012:	bf42      	ittt	mi
 8009014:	6833      	ldrmi	r3, [r6, #0]
 8009016:	3302      	addmi	r3, #2
 8009018:	6033      	strmi	r3, [r6, #0]
 800901a:	6825      	ldr	r5, [r4, #0]
 800901c:	f015 0506 	ands.w	r5, r5, #6
 8009020:	d106      	bne.n	8009030 <_printf_common+0x48>
 8009022:	f104 0a19 	add.w	sl, r4, #25
 8009026:	68e3      	ldr	r3, [r4, #12]
 8009028:	6832      	ldr	r2, [r6, #0]
 800902a:	1a9b      	subs	r3, r3, r2
 800902c:	42ab      	cmp	r3, r5
 800902e:	dc28      	bgt.n	8009082 <_printf_common+0x9a>
 8009030:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009034:	1e13      	subs	r3, r2, #0
 8009036:	6822      	ldr	r2, [r4, #0]
 8009038:	bf18      	it	ne
 800903a:	2301      	movne	r3, #1
 800903c:	0692      	lsls	r2, r2, #26
 800903e:	d42d      	bmi.n	800909c <_printf_common+0xb4>
 8009040:	4649      	mov	r1, r9
 8009042:	4638      	mov	r0, r7
 8009044:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009048:	47c0      	blx	r8
 800904a:	3001      	adds	r0, #1
 800904c:	d020      	beq.n	8009090 <_printf_common+0xa8>
 800904e:	6823      	ldr	r3, [r4, #0]
 8009050:	68e5      	ldr	r5, [r4, #12]
 8009052:	f003 0306 	and.w	r3, r3, #6
 8009056:	2b04      	cmp	r3, #4
 8009058:	bf18      	it	ne
 800905a:	2500      	movne	r5, #0
 800905c:	6832      	ldr	r2, [r6, #0]
 800905e:	f04f 0600 	mov.w	r6, #0
 8009062:	68a3      	ldr	r3, [r4, #8]
 8009064:	bf08      	it	eq
 8009066:	1aad      	subeq	r5, r5, r2
 8009068:	6922      	ldr	r2, [r4, #16]
 800906a:	bf08      	it	eq
 800906c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009070:	4293      	cmp	r3, r2
 8009072:	bfc4      	itt	gt
 8009074:	1a9b      	subgt	r3, r3, r2
 8009076:	18ed      	addgt	r5, r5, r3
 8009078:	341a      	adds	r4, #26
 800907a:	42b5      	cmp	r5, r6
 800907c:	d11a      	bne.n	80090b4 <_printf_common+0xcc>
 800907e:	2000      	movs	r0, #0
 8009080:	e008      	b.n	8009094 <_printf_common+0xac>
 8009082:	2301      	movs	r3, #1
 8009084:	4652      	mov	r2, sl
 8009086:	4649      	mov	r1, r9
 8009088:	4638      	mov	r0, r7
 800908a:	47c0      	blx	r8
 800908c:	3001      	adds	r0, #1
 800908e:	d103      	bne.n	8009098 <_printf_common+0xb0>
 8009090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009098:	3501      	adds	r5, #1
 800909a:	e7c4      	b.n	8009026 <_printf_common+0x3e>
 800909c:	2030      	movs	r0, #48	; 0x30
 800909e:	18e1      	adds	r1, r4, r3
 80090a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090a4:	1c5a      	adds	r2, r3, #1
 80090a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090aa:	4422      	add	r2, r4
 80090ac:	3302      	adds	r3, #2
 80090ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090b2:	e7c5      	b.n	8009040 <_printf_common+0x58>
 80090b4:	2301      	movs	r3, #1
 80090b6:	4622      	mov	r2, r4
 80090b8:	4649      	mov	r1, r9
 80090ba:	4638      	mov	r0, r7
 80090bc:	47c0      	blx	r8
 80090be:	3001      	adds	r0, #1
 80090c0:	d0e6      	beq.n	8009090 <_printf_common+0xa8>
 80090c2:	3601      	adds	r6, #1
 80090c4:	e7d9      	b.n	800907a <_printf_common+0x92>
	...

080090c8 <_printf_i>:
 80090c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090cc:	7e0f      	ldrb	r7, [r1, #24]
 80090ce:	4691      	mov	r9, r2
 80090d0:	2f78      	cmp	r7, #120	; 0x78
 80090d2:	4680      	mov	r8, r0
 80090d4:	460c      	mov	r4, r1
 80090d6:	469a      	mov	sl, r3
 80090d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80090de:	d807      	bhi.n	80090f0 <_printf_i+0x28>
 80090e0:	2f62      	cmp	r7, #98	; 0x62
 80090e2:	d80a      	bhi.n	80090fa <_printf_i+0x32>
 80090e4:	2f00      	cmp	r7, #0
 80090e6:	f000 80d9 	beq.w	800929c <_printf_i+0x1d4>
 80090ea:	2f58      	cmp	r7, #88	; 0x58
 80090ec:	f000 80a4 	beq.w	8009238 <_printf_i+0x170>
 80090f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090f8:	e03a      	b.n	8009170 <_printf_i+0xa8>
 80090fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090fe:	2b15      	cmp	r3, #21
 8009100:	d8f6      	bhi.n	80090f0 <_printf_i+0x28>
 8009102:	a101      	add	r1, pc, #4	; (adr r1, 8009108 <_printf_i+0x40>)
 8009104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009108:	08009161 	.word	0x08009161
 800910c:	08009175 	.word	0x08009175
 8009110:	080090f1 	.word	0x080090f1
 8009114:	080090f1 	.word	0x080090f1
 8009118:	080090f1 	.word	0x080090f1
 800911c:	080090f1 	.word	0x080090f1
 8009120:	08009175 	.word	0x08009175
 8009124:	080090f1 	.word	0x080090f1
 8009128:	080090f1 	.word	0x080090f1
 800912c:	080090f1 	.word	0x080090f1
 8009130:	080090f1 	.word	0x080090f1
 8009134:	08009283 	.word	0x08009283
 8009138:	080091a5 	.word	0x080091a5
 800913c:	08009265 	.word	0x08009265
 8009140:	080090f1 	.word	0x080090f1
 8009144:	080090f1 	.word	0x080090f1
 8009148:	080092a5 	.word	0x080092a5
 800914c:	080090f1 	.word	0x080090f1
 8009150:	080091a5 	.word	0x080091a5
 8009154:	080090f1 	.word	0x080090f1
 8009158:	080090f1 	.word	0x080090f1
 800915c:	0800926d 	.word	0x0800926d
 8009160:	682b      	ldr	r3, [r5, #0]
 8009162:	1d1a      	adds	r2, r3, #4
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	602a      	str	r2, [r5, #0]
 8009168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800916c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009170:	2301      	movs	r3, #1
 8009172:	e0a4      	b.n	80092be <_printf_i+0x1f6>
 8009174:	6820      	ldr	r0, [r4, #0]
 8009176:	6829      	ldr	r1, [r5, #0]
 8009178:	0606      	lsls	r6, r0, #24
 800917a:	f101 0304 	add.w	r3, r1, #4
 800917e:	d50a      	bpl.n	8009196 <_printf_i+0xce>
 8009180:	680e      	ldr	r6, [r1, #0]
 8009182:	602b      	str	r3, [r5, #0]
 8009184:	2e00      	cmp	r6, #0
 8009186:	da03      	bge.n	8009190 <_printf_i+0xc8>
 8009188:	232d      	movs	r3, #45	; 0x2d
 800918a:	4276      	negs	r6, r6
 800918c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009190:	230a      	movs	r3, #10
 8009192:	485e      	ldr	r0, [pc, #376]	; (800930c <_printf_i+0x244>)
 8009194:	e019      	b.n	80091ca <_printf_i+0x102>
 8009196:	680e      	ldr	r6, [r1, #0]
 8009198:	f010 0f40 	tst.w	r0, #64	; 0x40
 800919c:	602b      	str	r3, [r5, #0]
 800919e:	bf18      	it	ne
 80091a0:	b236      	sxthne	r6, r6
 80091a2:	e7ef      	b.n	8009184 <_printf_i+0xbc>
 80091a4:	682b      	ldr	r3, [r5, #0]
 80091a6:	6820      	ldr	r0, [r4, #0]
 80091a8:	1d19      	adds	r1, r3, #4
 80091aa:	6029      	str	r1, [r5, #0]
 80091ac:	0601      	lsls	r1, r0, #24
 80091ae:	d501      	bpl.n	80091b4 <_printf_i+0xec>
 80091b0:	681e      	ldr	r6, [r3, #0]
 80091b2:	e002      	b.n	80091ba <_printf_i+0xf2>
 80091b4:	0646      	lsls	r6, r0, #25
 80091b6:	d5fb      	bpl.n	80091b0 <_printf_i+0xe8>
 80091b8:	881e      	ldrh	r6, [r3, #0]
 80091ba:	2f6f      	cmp	r7, #111	; 0x6f
 80091bc:	bf0c      	ite	eq
 80091be:	2308      	moveq	r3, #8
 80091c0:	230a      	movne	r3, #10
 80091c2:	4852      	ldr	r0, [pc, #328]	; (800930c <_printf_i+0x244>)
 80091c4:	2100      	movs	r1, #0
 80091c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091ca:	6865      	ldr	r5, [r4, #4]
 80091cc:	2d00      	cmp	r5, #0
 80091ce:	bfa8      	it	ge
 80091d0:	6821      	ldrge	r1, [r4, #0]
 80091d2:	60a5      	str	r5, [r4, #8]
 80091d4:	bfa4      	itt	ge
 80091d6:	f021 0104 	bicge.w	r1, r1, #4
 80091da:	6021      	strge	r1, [r4, #0]
 80091dc:	b90e      	cbnz	r6, 80091e2 <_printf_i+0x11a>
 80091de:	2d00      	cmp	r5, #0
 80091e0:	d04d      	beq.n	800927e <_printf_i+0x1b6>
 80091e2:	4615      	mov	r5, r2
 80091e4:	fbb6 f1f3 	udiv	r1, r6, r3
 80091e8:	fb03 6711 	mls	r7, r3, r1, r6
 80091ec:	5dc7      	ldrb	r7, [r0, r7]
 80091ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80091f2:	4637      	mov	r7, r6
 80091f4:	42bb      	cmp	r3, r7
 80091f6:	460e      	mov	r6, r1
 80091f8:	d9f4      	bls.n	80091e4 <_printf_i+0x11c>
 80091fa:	2b08      	cmp	r3, #8
 80091fc:	d10b      	bne.n	8009216 <_printf_i+0x14e>
 80091fe:	6823      	ldr	r3, [r4, #0]
 8009200:	07de      	lsls	r6, r3, #31
 8009202:	d508      	bpl.n	8009216 <_printf_i+0x14e>
 8009204:	6923      	ldr	r3, [r4, #16]
 8009206:	6861      	ldr	r1, [r4, #4]
 8009208:	4299      	cmp	r1, r3
 800920a:	bfde      	ittt	le
 800920c:	2330      	movle	r3, #48	; 0x30
 800920e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009212:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009216:	1b52      	subs	r2, r2, r5
 8009218:	6122      	str	r2, [r4, #16]
 800921a:	464b      	mov	r3, r9
 800921c:	4621      	mov	r1, r4
 800921e:	4640      	mov	r0, r8
 8009220:	f8cd a000 	str.w	sl, [sp]
 8009224:	aa03      	add	r2, sp, #12
 8009226:	f7ff fedf 	bl	8008fe8 <_printf_common>
 800922a:	3001      	adds	r0, #1
 800922c:	d14c      	bne.n	80092c8 <_printf_i+0x200>
 800922e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009232:	b004      	add	sp, #16
 8009234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009238:	4834      	ldr	r0, [pc, #208]	; (800930c <_printf_i+0x244>)
 800923a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800923e:	6829      	ldr	r1, [r5, #0]
 8009240:	6823      	ldr	r3, [r4, #0]
 8009242:	f851 6b04 	ldr.w	r6, [r1], #4
 8009246:	6029      	str	r1, [r5, #0]
 8009248:	061d      	lsls	r5, r3, #24
 800924a:	d514      	bpl.n	8009276 <_printf_i+0x1ae>
 800924c:	07df      	lsls	r7, r3, #31
 800924e:	bf44      	itt	mi
 8009250:	f043 0320 	orrmi.w	r3, r3, #32
 8009254:	6023      	strmi	r3, [r4, #0]
 8009256:	b91e      	cbnz	r6, 8009260 <_printf_i+0x198>
 8009258:	6823      	ldr	r3, [r4, #0]
 800925a:	f023 0320 	bic.w	r3, r3, #32
 800925e:	6023      	str	r3, [r4, #0]
 8009260:	2310      	movs	r3, #16
 8009262:	e7af      	b.n	80091c4 <_printf_i+0xfc>
 8009264:	6823      	ldr	r3, [r4, #0]
 8009266:	f043 0320 	orr.w	r3, r3, #32
 800926a:	6023      	str	r3, [r4, #0]
 800926c:	2378      	movs	r3, #120	; 0x78
 800926e:	4828      	ldr	r0, [pc, #160]	; (8009310 <_printf_i+0x248>)
 8009270:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009274:	e7e3      	b.n	800923e <_printf_i+0x176>
 8009276:	0659      	lsls	r1, r3, #25
 8009278:	bf48      	it	mi
 800927a:	b2b6      	uxthmi	r6, r6
 800927c:	e7e6      	b.n	800924c <_printf_i+0x184>
 800927e:	4615      	mov	r5, r2
 8009280:	e7bb      	b.n	80091fa <_printf_i+0x132>
 8009282:	682b      	ldr	r3, [r5, #0]
 8009284:	6826      	ldr	r6, [r4, #0]
 8009286:	1d18      	adds	r0, r3, #4
 8009288:	6961      	ldr	r1, [r4, #20]
 800928a:	6028      	str	r0, [r5, #0]
 800928c:	0635      	lsls	r5, r6, #24
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	d501      	bpl.n	8009296 <_printf_i+0x1ce>
 8009292:	6019      	str	r1, [r3, #0]
 8009294:	e002      	b.n	800929c <_printf_i+0x1d4>
 8009296:	0670      	lsls	r0, r6, #25
 8009298:	d5fb      	bpl.n	8009292 <_printf_i+0x1ca>
 800929a:	8019      	strh	r1, [r3, #0]
 800929c:	2300      	movs	r3, #0
 800929e:	4615      	mov	r5, r2
 80092a0:	6123      	str	r3, [r4, #16]
 80092a2:	e7ba      	b.n	800921a <_printf_i+0x152>
 80092a4:	682b      	ldr	r3, [r5, #0]
 80092a6:	2100      	movs	r1, #0
 80092a8:	1d1a      	adds	r2, r3, #4
 80092aa:	602a      	str	r2, [r5, #0]
 80092ac:	681d      	ldr	r5, [r3, #0]
 80092ae:	6862      	ldr	r2, [r4, #4]
 80092b0:	4628      	mov	r0, r5
 80092b2:	f000 f82f 	bl	8009314 <memchr>
 80092b6:	b108      	cbz	r0, 80092bc <_printf_i+0x1f4>
 80092b8:	1b40      	subs	r0, r0, r5
 80092ba:	6060      	str	r0, [r4, #4]
 80092bc:	6863      	ldr	r3, [r4, #4]
 80092be:	6123      	str	r3, [r4, #16]
 80092c0:	2300      	movs	r3, #0
 80092c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092c6:	e7a8      	b.n	800921a <_printf_i+0x152>
 80092c8:	462a      	mov	r2, r5
 80092ca:	4649      	mov	r1, r9
 80092cc:	4640      	mov	r0, r8
 80092ce:	6923      	ldr	r3, [r4, #16]
 80092d0:	47d0      	blx	sl
 80092d2:	3001      	adds	r0, #1
 80092d4:	d0ab      	beq.n	800922e <_printf_i+0x166>
 80092d6:	6823      	ldr	r3, [r4, #0]
 80092d8:	079b      	lsls	r3, r3, #30
 80092da:	d413      	bmi.n	8009304 <_printf_i+0x23c>
 80092dc:	68e0      	ldr	r0, [r4, #12]
 80092de:	9b03      	ldr	r3, [sp, #12]
 80092e0:	4298      	cmp	r0, r3
 80092e2:	bfb8      	it	lt
 80092e4:	4618      	movlt	r0, r3
 80092e6:	e7a4      	b.n	8009232 <_printf_i+0x16a>
 80092e8:	2301      	movs	r3, #1
 80092ea:	4632      	mov	r2, r6
 80092ec:	4649      	mov	r1, r9
 80092ee:	4640      	mov	r0, r8
 80092f0:	47d0      	blx	sl
 80092f2:	3001      	adds	r0, #1
 80092f4:	d09b      	beq.n	800922e <_printf_i+0x166>
 80092f6:	3501      	adds	r5, #1
 80092f8:	68e3      	ldr	r3, [r4, #12]
 80092fa:	9903      	ldr	r1, [sp, #12]
 80092fc:	1a5b      	subs	r3, r3, r1
 80092fe:	42ab      	cmp	r3, r5
 8009300:	dcf2      	bgt.n	80092e8 <_printf_i+0x220>
 8009302:	e7eb      	b.n	80092dc <_printf_i+0x214>
 8009304:	2500      	movs	r5, #0
 8009306:	f104 0619 	add.w	r6, r4, #25
 800930a:	e7f5      	b.n	80092f8 <_printf_i+0x230>
 800930c:	08009697 	.word	0x08009697
 8009310:	080096a8 	.word	0x080096a8

08009314 <memchr>:
 8009314:	4603      	mov	r3, r0
 8009316:	b510      	push	{r4, lr}
 8009318:	b2c9      	uxtb	r1, r1
 800931a:	4402      	add	r2, r0
 800931c:	4293      	cmp	r3, r2
 800931e:	4618      	mov	r0, r3
 8009320:	d101      	bne.n	8009326 <memchr+0x12>
 8009322:	2000      	movs	r0, #0
 8009324:	e003      	b.n	800932e <memchr+0x1a>
 8009326:	7804      	ldrb	r4, [r0, #0]
 8009328:	3301      	adds	r3, #1
 800932a:	428c      	cmp	r4, r1
 800932c:	d1f6      	bne.n	800931c <memchr+0x8>
 800932e:	bd10      	pop	{r4, pc}

08009330 <memcpy>:
 8009330:	440a      	add	r2, r1
 8009332:	4291      	cmp	r1, r2
 8009334:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009338:	d100      	bne.n	800933c <memcpy+0xc>
 800933a:	4770      	bx	lr
 800933c:	b510      	push	{r4, lr}
 800933e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009342:	4291      	cmp	r1, r2
 8009344:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009348:	d1f9      	bne.n	800933e <memcpy+0xe>
 800934a:	bd10      	pop	{r4, pc}

0800934c <memmove>:
 800934c:	4288      	cmp	r0, r1
 800934e:	b510      	push	{r4, lr}
 8009350:	eb01 0402 	add.w	r4, r1, r2
 8009354:	d902      	bls.n	800935c <memmove+0x10>
 8009356:	4284      	cmp	r4, r0
 8009358:	4623      	mov	r3, r4
 800935a:	d807      	bhi.n	800936c <memmove+0x20>
 800935c:	1e43      	subs	r3, r0, #1
 800935e:	42a1      	cmp	r1, r4
 8009360:	d008      	beq.n	8009374 <memmove+0x28>
 8009362:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009366:	f803 2f01 	strb.w	r2, [r3, #1]!
 800936a:	e7f8      	b.n	800935e <memmove+0x12>
 800936c:	4601      	mov	r1, r0
 800936e:	4402      	add	r2, r0
 8009370:	428a      	cmp	r2, r1
 8009372:	d100      	bne.n	8009376 <memmove+0x2a>
 8009374:	bd10      	pop	{r4, pc}
 8009376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800937a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800937e:	e7f7      	b.n	8009370 <memmove+0x24>

08009380 <_free_r>:
 8009380:	b538      	push	{r3, r4, r5, lr}
 8009382:	4605      	mov	r5, r0
 8009384:	2900      	cmp	r1, #0
 8009386:	d040      	beq.n	800940a <_free_r+0x8a>
 8009388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800938c:	1f0c      	subs	r4, r1, #4
 800938e:	2b00      	cmp	r3, #0
 8009390:	bfb8      	it	lt
 8009392:	18e4      	addlt	r4, r4, r3
 8009394:	f000 f910 	bl	80095b8 <__malloc_lock>
 8009398:	4a1c      	ldr	r2, [pc, #112]	; (800940c <_free_r+0x8c>)
 800939a:	6813      	ldr	r3, [r2, #0]
 800939c:	b933      	cbnz	r3, 80093ac <_free_r+0x2c>
 800939e:	6063      	str	r3, [r4, #4]
 80093a0:	6014      	str	r4, [r2, #0]
 80093a2:	4628      	mov	r0, r5
 80093a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093a8:	f000 b90c 	b.w	80095c4 <__malloc_unlock>
 80093ac:	42a3      	cmp	r3, r4
 80093ae:	d908      	bls.n	80093c2 <_free_r+0x42>
 80093b0:	6820      	ldr	r0, [r4, #0]
 80093b2:	1821      	adds	r1, r4, r0
 80093b4:	428b      	cmp	r3, r1
 80093b6:	bf01      	itttt	eq
 80093b8:	6819      	ldreq	r1, [r3, #0]
 80093ba:	685b      	ldreq	r3, [r3, #4]
 80093bc:	1809      	addeq	r1, r1, r0
 80093be:	6021      	streq	r1, [r4, #0]
 80093c0:	e7ed      	b.n	800939e <_free_r+0x1e>
 80093c2:	461a      	mov	r2, r3
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	b10b      	cbz	r3, 80093cc <_free_r+0x4c>
 80093c8:	42a3      	cmp	r3, r4
 80093ca:	d9fa      	bls.n	80093c2 <_free_r+0x42>
 80093cc:	6811      	ldr	r1, [r2, #0]
 80093ce:	1850      	adds	r0, r2, r1
 80093d0:	42a0      	cmp	r0, r4
 80093d2:	d10b      	bne.n	80093ec <_free_r+0x6c>
 80093d4:	6820      	ldr	r0, [r4, #0]
 80093d6:	4401      	add	r1, r0
 80093d8:	1850      	adds	r0, r2, r1
 80093da:	4283      	cmp	r3, r0
 80093dc:	6011      	str	r1, [r2, #0]
 80093de:	d1e0      	bne.n	80093a2 <_free_r+0x22>
 80093e0:	6818      	ldr	r0, [r3, #0]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	4401      	add	r1, r0
 80093e6:	6011      	str	r1, [r2, #0]
 80093e8:	6053      	str	r3, [r2, #4]
 80093ea:	e7da      	b.n	80093a2 <_free_r+0x22>
 80093ec:	d902      	bls.n	80093f4 <_free_r+0x74>
 80093ee:	230c      	movs	r3, #12
 80093f0:	602b      	str	r3, [r5, #0]
 80093f2:	e7d6      	b.n	80093a2 <_free_r+0x22>
 80093f4:	6820      	ldr	r0, [r4, #0]
 80093f6:	1821      	adds	r1, r4, r0
 80093f8:	428b      	cmp	r3, r1
 80093fa:	bf01      	itttt	eq
 80093fc:	6819      	ldreq	r1, [r3, #0]
 80093fe:	685b      	ldreq	r3, [r3, #4]
 8009400:	1809      	addeq	r1, r1, r0
 8009402:	6021      	streq	r1, [r4, #0]
 8009404:	6063      	str	r3, [r4, #4]
 8009406:	6054      	str	r4, [r2, #4]
 8009408:	e7cb      	b.n	80093a2 <_free_r+0x22>
 800940a:	bd38      	pop	{r3, r4, r5, pc}
 800940c:	2000145c 	.word	0x2000145c

08009410 <sbrk_aligned>:
 8009410:	b570      	push	{r4, r5, r6, lr}
 8009412:	4e0e      	ldr	r6, [pc, #56]	; (800944c <sbrk_aligned+0x3c>)
 8009414:	460c      	mov	r4, r1
 8009416:	6831      	ldr	r1, [r6, #0]
 8009418:	4605      	mov	r5, r0
 800941a:	b911      	cbnz	r1, 8009422 <sbrk_aligned+0x12>
 800941c:	f000 f8bc 	bl	8009598 <_sbrk_r>
 8009420:	6030      	str	r0, [r6, #0]
 8009422:	4621      	mov	r1, r4
 8009424:	4628      	mov	r0, r5
 8009426:	f000 f8b7 	bl	8009598 <_sbrk_r>
 800942a:	1c43      	adds	r3, r0, #1
 800942c:	d00a      	beq.n	8009444 <sbrk_aligned+0x34>
 800942e:	1cc4      	adds	r4, r0, #3
 8009430:	f024 0403 	bic.w	r4, r4, #3
 8009434:	42a0      	cmp	r0, r4
 8009436:	d007      	beq.n	8009448 <sbrk_aligned+0x38>
 8009438:	1a21      	subs	r1, r4, r0
 800943a:	4628      	mov	r0, r5
 800943c:	f000 f8ac 	bl	8009598 <_sbrk_r>
 8009440:	3001      	adds	r0, #1
 8009442:	d101      	bne.n	8009448 <sbrk_aligned+0x38>
 8009444:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009448:	4620      	mov	r0, r4
 800944a:	bd70      	pop	{r4, r5, r6, pc}
 800944c:	20001460 	.word	0x20001460

08009450 <_malloc_r>:
 8009450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009454:	1ccd      	adds	r5, r1, #3
 8009456:	f025 0503 	bic.w	r5, r5, #3
 800945a:	3508      	adds	r5, #8
 800945c:	2d0c      	cmp	r5, #12
 800945e:	bf38      	it	cc
 8009460:	250c      	movcc	r5, #12
 8009462:	2d00      	cmp	r5, #0
 8009464:	4607      	mov	r7, r0
 8009466:	db01      	blt.n	800946c <_malloc_r+0x1c>
 8009468:	42a9      	cmp	r1, r5
 800946a:	d905      	bls.n	8009478 <_malloc_r+0x28>
 800946c:	230c      	movs	r3, #12
 800946e:	2600      	movs	r6, #0
 8009470:	603b      	str	r3, [r7, #0]
 8009472:	4630      	mov	r0, r6
 8009474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009478:	4e2e      	ldr	r6, [pc, #184]	; (8009534 <_malloc_r+0xe4>)
 800947a:	f000 f89d 	bl	80095b8 <__malloc_lock>
 800947e:	6833      	ldr	r3, [r6, #0]
 8009480:	461c      	mov	r4, r3
 8009482:	bb34      	cbnz	r4, 80094d2 <_malloc_r+0x82>
 8009484:	4629      	mov	r1, r5
 8009486:	4638      	mov	r0, r7
 8009488:	f7ff ffc2 	bl	8009410 <sbrk_aligned>
 800948c:	1c43      	adds	r3, r0, #1
 800948e:	4604      	mov	r4, r0
 8009490:	d14d      	bne.n	800952e <_malloc_r+0xde>
 8009492:	6834      	ldr	r4, [r6, #0]
 8009494:	4626      	mov	r6, r4
 8009496:	2e00      	cmp	r6, #0
 8009498:	d140      	bne.n	800951c <_malloc_r+0xcc>
 800949a:	6823      	ldr	r3, [r4, #0]
 800949c:	4631      	mov	r1, r6
 800949e:	4638      	mov	r0, r7
 80094a0:	eb04 0803 	add.w	r8, r4, r3
 80094a4:	f000 f878 	bl	8009598 <_sbrk_r>
 80094a8:	4580      	cmp	r8, r0
 80094aa:	d13a      	bne.n	8009522 <_malloc_r+0xd2>
 80094ac:	6821      	ldr	r1, [r4, #0]
 80094ae:	3503      	adds	r5, #3
 80094b0:	1a6d      	subs	r5, r5, r1
 80094b2:	f025 0503 	bic.w	r5, r5, #3
 80094b6:	3508      	adds	r5, #8
 80094b8:	2d0c      	cmp	r5, #12
 80094ba:	bf38      	it	cc
 80094bc:	250c      	movcc	r5, #12
 80094be:	4638      	mov	r0, r7
 80094c0:	4629      	mov	r1, r5
 80094c2:	f7ff ffa5 	bl	8009410 <sbrk_aligned>
 80094c6:	3001      	adds	r0, #1
 80094c8:	d02b      	beq.n	8009522 <_malloc_r+0xd2>
 80094ca:	6823      	ldr	r3, [r4, #0]
 80094cc:	442b      	add	r3, r5
 80094ce:	6023      	str	r3, [r4, #0]
 80094d0:	e00e      	b.n	80094f0 <_malloc_r+0xa0>
 80094d2:	6822      	ldr	r2, [r4, #0]
 80094d4:	1b52      	subs	r2, r2, r5
 80094d6:	d41e      	bmi.n	8009516 <_malloc_r+0xc6>
 80094d8:	2a0b      	cmp	r2, #11
 80094da:	d916      	bls.n	800950a <_malloc_r+0xba>
 80094dc:	1961      	adds	r1, r4, r5
 80094de:	42a3      	cmp	r3, r4
 80094e0:	6025      	str	r5, [r4, #0]
 80094e2:	bf18      	it	ne
 80094e4:	6059      	strne	r1, [r3, #4]
 80094e6:	6863      	ldr	r3, [r4, #4]
 80094e8:	bf08      	it	eq
 80094ea:	6031      	streq	r1, [r6, #0]
 80094ec:	5162      	str	r2, [r4, r5]
 80094ee:	604b      	str	r3, [r1, #4]
 80094f0:	4638      	mov	r0, r7
 80094f2:	f104 060b 	add.w	r6, r4, #11
 80094f6:	f000 f865 	bl	80095c4 <__malloc_unlock>
 80094fa:	f026 0607 	bic.w	r6, r6, #7
 80094fe:	1d23      	adds	r3, r4, #4
 8009500:	1af2      	subs	r2, r6, r3
 8009502:	d0b6      	beq.n	8009472 <_malloc_r+0x22>
 8009504:	1b9b      	subs	r3, r3, r6
 8009506:	50a3      	str	r3, [r4, r2]
 8009508:	e7b3      	b.n	8009472 <_malloc_r+0x22>
 800950a:	6862      	ldr	r2, [r4, #4]
 800950c:	42a3      	cmp	r3, r4
 800950e:	bf0c      	ite	eq
 8009510:	6032      	streq	r2, [r6, #0]
 8009512:	605a      	strne	r2, [r3, #4]
 8009514:	e7ec      	b.n	80094f0 <_malloc_r+0xa0>
 8009516:	4623      	mov	r3, r4
 8009518:	6864      	ldr	r4, [r4, #4]
 800951a:	e7b2      	b.n	8009482 <_malloc_r+0x32>
 800951c:	4634      	mov	r4, r6
 800951e:	6876      	ldr	r6, [r6, #4]
 8009520:	e7b9      	b.n	8009496 <_malloc_r+0x46>
 8009522:	230c      	movs	r3, #12
 8009524:	4638      	mov	r0, r7
 8009526:	603b      	str	r3, [r7, #0]
 8009528:	f000 f84c 	bl	80095c4 <__malloc_unlock>
 800952c:	e7a1      	b.n	8009472 <_malloc_r+0x22>
 800952e:	6025      	str	r5, [r4, #0]
 8009530:	e7de      	b.n	80094f0 <_malloc_r+0xa0>
 8009532:	bf00      	nop
 8009534:	2000145c 	.word	0x2000145c

08009538 <_realloc_r>:
 8009538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800953c:	4680      	mov	r8, r0
 800953e:	4614      	mov	r4, r2
 8009540:	460e      	mov	r6, r1
 8009542:	b921      	cbnz	r1, 800954e <_realloc_r+0x16>
 8009544:	4611      	mov	r1, r2
 8009546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800954a:	f7ff bf81 	b.w	8009450 <_malloc_r>
 800954e:	b92a      	cbnz	r2, 800955c <_realloc_r+0x24>
 8009550:	f7ff ff16 	bl	8009380 <_free_r>
 8009554:	4625      	mov	r5, r4
 8009556:	4628      	mov	r0, r5
 8009558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800955c:	f000 f838 	bl	80095d0 <_malloc_usable_size_r>
 8009560:	4284      	cmp	r4, r0
 8009562:	4607      	mov	r7, r0
 8009564:	d802      	bhi.n	800956c <_realloc_r+0x34>
 8009566:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800956a:	d812      	bhi.n	8009592 <_realloc_r+0x5a>
 800956c:	4621      	mov	r1, r4
 800956e:	4640      	mov	r0, r8
 8009570:	f7ff ff6e 	bl	8009450 <_malloc_r>
 8009574:	4605      	mov	r5, r0
 8009576:	2800      	cmp	r0, #0
 8009578:	d0ed      	beq.n	8009556 <_realloc_r+0x1e>
 800957a:	42bc      	cmp	r4, r7
 800957c:	4622      	mov	r2, r4
 800957e:	4631      	mov	r1, r6
 8009580:	bf28      	it	cs
 8009582:	463a      	movcs	r2, r7
 8009584:	f7ff fed4 	bl	8009330 <memcpy>
 8009588:	4631      	mov	r1, r6
 800958a:	4640      	mov	r0, r8
 800958c:	f7ff fef8 	bl	8009380 <_free_r>
 8009590:	e7e1      	b.n	8009556 <_realloc_r+0x1e>
 8009592:	4635      	mov	r5, r6
 8009594:	e7df      	b.n	8009556 <_realloc_r+0x1e>
	...

08009598 <_sbrk_r>:
 8009598:	b538      	push	{r3, r4, r5, lr}
 800959a:	2300      	movs	r3, #0
 800959c:	4d05      	ldr	r5, [pc, #20]	; (80095b4 <_sbrk_r+0x1c>)
 800959e:	4604      	mov	r4, r0
 80095a0:	4608      	mov	r0, r1
 80095a2:	602b      	str	r3, [r5, #0]
 80095a4:	f7f7 f86c 	bl	8000680 <_sbrk>
 80095a8:	1c43      	adds	r3, r0, #1
 80095aa:	d102      	bne.n	80095b2 <_sbrk_r+0x1a>
 80095ac:	682b      	ldr	r3, [r5, #0]
 80095ae:	b103      	cbz	r3, 80095b2 <_sbrk_r+0x1a>
 80095b0:	6023      	str	r3, [r4, #0]
 80095b2:	bd38      	pop	{r3, r4, r5, pc}
 80095b4:	20001464 	.word	0x20001464

080095b8 <__malloc_lock>:
 80095b8:	4801      	ldr	r0, [pc, #4]	; (80095c0 <__malloc_lock+0x8>)
 80095ba:	f000 b811 	b.w	80095e0 <__retarget_lock_acquire_recursive>
 80095be:	bf00      	nop
 80095c0:	20001468 	.word	0x20001468

080095c4 <__malloc_unlock>:
 80095c4:	4801      	ldr	r0, [pc, #4]	; (80095cc <__malloc_unlock+0x8>)
 80095c6:	f000 b80c 	b.w	80095e2 <__retarget_lock_release_recursive>
 80095ca:	bf00      	nop
 80095cc:	20001468 	.word	0x20001468

080095d0 <_malloc_usable_size_r>:
 80095d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095d4:	1f18      	subs	r0, r3, #4
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	bfbc      	itt	lt
 80095da:	580b      	ldrlt	r3, [r1, r0]
 80095dc:	18c0      	addlt	r0, r0, r3
 80095de:	4770      	bx	lr

080095e0 <__retarget_lock_acquire_recursive>:
 80095e0:	4770      	bx	lr

080095e2 <__retarget_lock_release_recursive>:
 80095e2:	4770      	bx	lr

080095e4 <_init>:
 80095e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e6:	bf00      	nop
 80095e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ea:	bc08      	pop	{r3}
 80095ec:	469e      	mov	lr, r3
 80095ee:	4770      	bx	lr

080095f0 <_fini>:
 80095f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f2:	bf00      	nop
 80095f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f6:	bc08      	pop	{r3}
 80095f8:	469e      	mov	lr, r3
 80095fa:	4770      	bx	lr
